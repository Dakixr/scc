{"file": {"path": "/Users/dakixr/Desktop/github/scc/tmp-data/metadata/LinkedEarth/Pyleoclim_util/pyleoclim/utils/causality.py", "fileNameBase": "causality", "extension": "py", "doc": {"long_description": "@author: deborahkhider\n\nContains all relevant functions for causality analysis", "short_description": "Created on Tue Feb 25 05:47:03 2020", "full": "Created on Tue Feb 25 05:47:03 2020\n\n@author: deborahkhider\n\nContains all relevant functions for causality analysis"}}, "dependencies": [{"import": "numpy", "alias": "np", "type": "external"}, {"from_module": "statsmodels.tsa.stattools", "import": "grangercausalitytests", "type": "external"}, {"from_module": "tqdm", "import": "tqdm", "type": "external"}, {"from_module": "tsmodel", "import": "ar1_fit_evenly", "type": "external"}, {"from_module": "correlation", "import": "sm_ar1_sim", "type": "external"}, {"from_module": "correlation", "import": "phaseran", "type": "external"}, {"from_module": "scipy.stats.mstats", "import": "mquantiles", "type": "external"}], "functions": {"granger_causality": {"doc": {"long_description": "Four tests for granger non causality of 2 time series.\n\nAll four tests give similar results. params_ftest and ssr_ftest are equivalent based on F test which is identical to lmtest:grangertest in R.\n\nWrapper for the functions described in statsmodel (https://www.statsmodels.org/stable/generated/statsmodels.tsa.stattools.grangercausalitytests.html)", "short_description": "statsmodels granger causality tests", "args": {"y1, y2": {"description": "vectors of (real) numbers with identical length, no NaNs allowed", "type_name": "array", "is_optional": false}, "maxlag": {"description": "If an integer, computes the test for all lags up to maxlag. If an iterable, computes the tests only for the lags in maxlag.", "type_name": "int or int iterable", "is_optional": true}, "addconst": {"description": "Include a constant in the model.", "type_name": "bool", "is_optional": true}, "verbose": {"description": "Print results", "type_name": "bool", "is_optional": true}}, "returns": {"description": "All test results, dictionary keys are the number of lags. For each lag the values are a tuple, with the first element a dictionary with test statistic,\npvalues, degrees of freedom, the second element are the OLS estimation results for the restricted model, the unrestricted model and the restriction (contrast)\nmatrix for the parameter f_test.", "type_name": "dict", "is_generator": false}}, "args": ["y1", "y2", "maxlag", "addconst", "verbose"], "returns": [["res"]], "min_max_lineno": {"min_lineno": 26, "max_lineno": 86}, "calls": ["statsmodels.tsa.stattools.grangercausalitytests", "len", "len", "ValueError", "numpy.array"], "store_vars_calls": {"res": "grangercausalitytests"}}, "liang_causality": {"doc": {"long_description": "significance estimates using either an AR(1) test with series with the same\npersistence or surrogates with randomized phases.", "short_description": "Estimate the Liang information transfer from series y2 to series y1 with ", "args": {"y1, y2": {"description": "vectors of (real) numbers with identical length, no NaNs allowed", "type_name": "array", "is_optional": false}, "npt": {"description": "time advance in performing Euler forward differencing,\ne.g., 1, 2. Unless the series are generated with a highly chaotic deterministic system,\nnpt=1 should be used", "type_name": "int  >=1", "is_optional": false}, "signif_test": {"description": "the method for significance test\nsee signif_isospec and signif_isopersist for details.", "type_name": "{'isopersist', 'isospec'}", "is_optional": false}, "nsim": {"description": "the number of AR(1) surrogates for significance test", "type_name": "int", "is_optional": false}, "qs": {"description": "the quantiles for significance test", "type_name": "list", "is_optional": false}}, "returns": {"description": "A dictionary of results including:\n    T21 : float\n        information flow from y2 to y1 (Note: not y1 -> y2!)\n    tau21 : float\n        the standardized information flow from y2 to y1\n    Z : float\n        the total information flow from y2 to y1\n    T21_noise_qs : list\n        the quantiles of the information flow from noise2 to noise1 for significance testing\n    tau21_noise_qs : list\n        the quantiles of the standardized information flow from noise2 to noise1 for significance testing", "type_name": "dict", "is_generator": false, "return_name": "res"}}, "args": ["y1", "y2", "npt", "signif_test", "nsim", "qs"], "returns": [["res"]], "min_max_lineno": {"min_lineno": 87, "max_lineno": 238}, "calls": ["numpy.size", "numpy.cov", "numpy.linalg.det", "numpy.ndarray", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sqrt", "numpy.ndarray", "numpy.linalg.pinv", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.abs", "numpy.mean", "numpy.mean", "numpy.sum", "numpy.abs", "numpy.abs", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean"], "store_vars_calls": {"nm": "np.size", "C": "np.cov", "detC": "np.linalg.det", "dC": "np.ndarray", "Q1": "np.sum", "b1": "np.sqrt", "NI": "np.ndarray", "invNI": "np.linalg.pinv"}}, "liang": {"doc": {"short_description": "Estimate the Liang information transfer from series y2 to series y1 ", "args": {"y1, y2": {"description": "vectors of (real) numbers with identical length, no NaNs allowed", "type_name": "array", "is_optional": false}, "npt": {"description": "time advance in performing Euler forward differencing,\ne.g., 1, 2. Unless the series are generated with a highly chaotic deterministic system,\nnpt=1 should be used", "type_name": "int  >=1", "is_optional": false}}, "returns": {"description": "A dictionary of results including:\n    T21 : float\n        information flow from y2 to y1 (Note: not y1 -> y2!)\n    tau21 : float\n        the standardized information flow from y2 to y1\n    Z : float\n        the total information flow from y2 to y1", "type_name": "dict", "is_generator": false, "return_name": "res"}}, "args": ["y1", "y2", "npt"], "returns": [["res"]], "min_max_lineno": {"min_lineno": 239, "max_lineno": 361}, "calls": ["numpy.size", "numpy.cov", "numpy.linalg.det", "numpy.ndarray", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sqrt", "numpy.ndarray", "numpy.linalg.pinv", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.abs", "numpy.mean", "numpy.mean", "numpy.sum", "numpy.abs", "numpy.abs", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean"], "store_vars_calls": {"nm": "np.size", "C": "np.cov", "detC": "np.linalg.det", "dC": "np.ndarray", "Q1": "np.sum", "b1": "np.sqrt", "NI": "np.ndarray", "invNI": "np.linalg.pinv"}}, "signif_isopersist": {"doc": {"long_description": "parameters\n----------\n\ny1, y2 : array\n    vectors of (real) numbers with identical length, no NaNs allowed\nmethod : {'liang'}\n    estimates for the Liang method\nnpt : int>=1\n    time advance in performing Euler forward differencing,\n    e.g., 1, 2. Unless the series are generated with a highly chaotic deterministic system,\n    npt=1 should be used.\nnsim : int\n    the number of AR(1) surrogates for significance test\nqs : list\n    the quantiles for significance test", "short_description": "significance test with AR(1) with same persistence", "returns": {"description": "A dictionary with the following information:\n  T21_noise_qs : list\n    the quantiles of the information flow from noise2 to noise1 for significance testing\n  tau21_noise_qs : list\n    the quantiles of the standardized information flow from noise2 to noise1 for significance testing", "type_name": "dict", "is_generator": false, "return_name": "res_dict"}}, "args": ["y1", "y2", "method", "nsim", "qs"], "returns": [["res_dict"]], "min_max_lineno": {"min_lineno": 362, "max_lineno": 424}, "calls": ["tsmodel.ar1_fit_evenly", "tsmodel.ar1_fit_evenly", "numpy.std", "numpy.std", "numpy.size", "correlation.sm_ar1_sim", "correlation.sm_ar1_sim", "tqdm.tqdm", "numpy.array", "numpy.array", "scipy.stats.mstats.mquantiles", "scipy.stats.mstats.mquantiles", "KeyError", "range", "causality.liang", "np.array.append", "np.array.append"], "store_vars_calls": {"g1": "ar1_fit_evenly", "g2": "ar1_fit_evenly", "sig1": "np.std", "sig2": "np.std", "n": "np.size", "noise1": "sm_ar1_sim", "noise2": "sm_ar1_sim", "tau21_noise": "np.array", "T21_noise": "np.array", "tau21_noise_qs": "mquantiles", "T21_noise_qs": "mquantiles", "res_noise": "liang"}}, "signif_isospec": {"doc": {"short_description": "significance test with surrogates with randomized phases", "args": {"y1, y2": {"description": "vectors of (real) numbers with identical length, no NaNs allowed", "type_name": "array", "is_optional": false}, "method": {"description": "estimates for the Liang method", "type_name": "{'liang'}", "is_optional": false}, "npt": {"description": "time advance in performing Euler forward differencing,\ne.g., 1, 2. Unless the series are generated with a highly chaotic deterministic system,\nnpt=1 should be used.", "type_name": "int>=1", "is_optional": false}, "nsim": {"description": "the number of surrogates for significance test", "type_name": "int", "is_optional": false}, "qs": {"description": "the quantiles for significance test", "type_name": "list", "is_optional": false}}, "returns": {"description": "A dictionary with the following information:\n  T21_noise_qs : list\n                the quantiles of the information flow from noise2 to noise1 for significance testing\n  tau21_noise_qs : list\n                  the quantiles of the standardized information flow from noise2 to noise1 for significance testing", "type_name": "dict", "is_generator": false, "return_name": "res_dict"}}, "args": ["y1", "y2", "method", "nsim", "qs"], "returns": [["res_dict"]], "min_max_lineno": {"min_lineno": 425, "max_lineno": 482}, "calls": ["correlation.phaseran", "correlation.phaseran", "tqdm.tqdm", "numpy.array", "numpy.array", "scipy.stats.mstats.mquantiles", "scipy.stats.mstats.mquantiles", "KeyError", "range", "causality.liang", "np.array.append", "np.array.append"], "store_vars_calls": {"noise1": "phaseran", "noise2": "phaseran", "tau21_noise": "np.array", "T21_noise": "np.array", "tau21_noise_qs": "mquantiles", "T21_noise_qs": "mquantiles", "res_noise": "liang"}}}, "is_test": false}