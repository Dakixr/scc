{"file": {"path": "/Users/dakixr/Desktop/github/scc/tmp-data/metadata/LinkedEarth/Pyleoclim_util/pyleoclim/utils/mapping.py", "fileNameBase": "mapping", "extension": "py", "doc": {"long_description": "@author: deborahkhider\n\nContains all relevant mapping functions", "short_description": "Created on Tue Feb 25 05:46:36 2020", "full": "Created on Tue Feb 25 05:46:36 2020\n\n@author: deborahkhider\n\nContains all relevant mapping functions"}}, "dependencies": [{"import": "cartopy", "alias": "ccrs", "type": "external"}, {"import": "cartopy", "alias": "cfeature", "type": "external"}, {"import": "matplotlib", "alias": "plt", "type": "external"}, {"import": "numpy", "alias": "np", "type": "external"}, {"import": "pandas", "alias": "pd", "type": "external"}, {"from_module": "plotting", "import": "savefig", "type": "external"}, {"from_module": "plotting", "import": "showfig", "type": "external"}], "functions": {"set_proj": {"doc": {"short_description": "Set the projection for Cartopy.", "args": {"projection": {"description": "the map projection. Available projections:\n'Robinson' (default), 'PlateCarree', 'AlbertsEqualArea',\n'AzimuthalEquidistant','EquidistantConic','LambertConformal',\n'LambertCylindrical','Mercator','Miller','Mollweide','Orthographic',\n'Sinusoidal','Stereographic','TransverseMercator','UTM',\n'InterruptedGoodeHomolosine','RotatedPole','OSGB','EuroPP',\n'Geostationary','NearsidePerspective','EckertI','EckertII',\n'EckertIII','EckertIV','EckertV','EckertVI','EqualEarth','Gnomonic',\n'LambertAzimuthalEqualArea','NorthPolarStereo','OSNI','SouthPolarStereo'", "type_name": "string", "is_optional": false}, "proj_default": {"description": "If True, uses the standard projection attributes from Cartopy.\nEnter new attributes in a dictionary to change them. Lists of attributes\ncan be found in the Cartopy documentation: \n    https://scitools.org.uk/cartopy/docs/latest/crs/projections.html#eckertiv", "type_name": "bool", "is_optional": false}}}, "args": ["projection", "proj_default"], "returns": [["proj"]], "min_max_lineno": {"min_lineno": 20, "max_lineno": 200}, "calls": ["TypeError", "type", "cartopy.Robinson", "cartopy.Robinson", "cartopy.PlateCarree", "cartopy.PlateCarree", "cartopy.AlbersEqualArea", "cartopy.AlbersEqualArea", "cartopy.AzimuthalEquidistant", "cartopy.AzimuthalEquidistant", "cartopy.EquidistantConic", "cartopy.EquidistantConic", "cartopy.LambertConformal", "cartopy.LambertConformal", "cartopy.LambertCylindrical", "cartopy.LambertCylindrical", "cartopy.Mercator", "cartopy.Mercator", "cartopy.Miller", "cartopy.Miller", "cartopy.Mollweide", "cartopy.Mollweide", "cartopy.Orthographic", "cartopy.Orthographic", "cartopy.Sinusoidal", "cartopy.Sinusoidal", "cartopy.Stereographic", "cartopy.Stereographic", "cartopy.TransverseMercator", "cartopy.TransverseMercator", "cartopy.TransverseMercator", "cartopy.TransverseMercator", "cartopy.UTM", "cartopy.UTM", "cartopy.UTM", "cartopy.UTM", "cartopy.InterruptedGoodeHomolosine", "cartopy.InterruptedGoodeHomolosine", "cartopy.RotatedPole", "cartopy.RotatedPole", "cartopy.OSGB", "cartopy.OSGB", "cartopy.EuroPP", "cartopy.EuroPP", "cartopy.Geostationary", "cartopy.Geostationary", "cartopy.NearsidePerspective", "cartopy.NearsidePerspective", "cartopy.EckertI", "cartopy.EckertI", "cartopy.EckertII", "cartopy.EckertII", "cartopy.EckertIII", "cartopy.EckertIII", "cartopy.EckertIV", "cartopy.EckertIV", "cartopy.EckertV", "cartopy.EckertV", "cartopy.EckertVI", "cartopy.EckertVI", "cartopy.EqualEarth", "cartopy.EqualEarth", "cartopy.Gnomonic", "cartopy.Gnomonic", "cartopy.LambertAzimuthalEqualArea", "cartopy.LambertAzimuthalEqualArea", "cartopy.NorthPolarStereo", "cartopy.NorthPolarStereo", "cartopy.OSNI", "cartopy.OSNI", "ValueError", "cartopy.SouthPolarStereo", "cartopy.SouthPolarStereo"], "store_vars_calls": {"proj": "ccrs.SouthPolarStereo"}}, "map_all": {"doc": {"long_description": "Map the location of all lat/lon according to some criteria. Based on functions defined in the Cartopy package.", "short_description": "Map the location of all lat/lon according to some criteria", "args": {"lat": {"description": "a list of latitudes.", "type_name": "list", "is_optional": false}, "lon": {"description": "a list of longitudes.", "type_name": "list", "is_optional": false}, "criteria": {"description": "a list of unique criteria for plotting purposes. For instance,\na map by the types of archive present in the dataset or proxy\nobservations. Should have the same length as lon/lat.", "type_name": "list", "is_optional": false}, "marker": {"description": "a list of possible markers for each criterion. If None, will use pyleoclim default", "type_name": "list", "is_optional": false}, "color": {"description": "a list of possible colors for each criterion. If None, will use pyleoclim default", "type_name": "list", "is_optional": false}, "projection": {"description": "the map projection. Available projections:\n'Robinson' (default), 'PlateCarree', 'AlbertsEqualArea',\n'AzimuthalEquidistant','EquidistantConic','LambertConformal',\n'LambertCylindrical','Mercator','Miller','Mollweide','Orthographic',\n'Sinusoidal','Stereographic','TransverseMercator','UTM',\n'InterruptedGoodeHomolosine','RotatedPole','OSGB','EuroPP',\n'Geostationary','NearsidePerspective','EckertI','EckertII',\n'EckertIII','EckertIV','EckertV','EckertVI','EqualEarth','Gnomonic',\n'LambertAzimuthalEqualArea','NorthPolarStereo','OSNI','SouthPolarStereo'", "type_name": "string", "is_optional": false}, "proj_default": {"description": "If True, uses the standard projection attributes.\nEnter new attributes in a dictionary to change them. Lists of attributes\ncan be found in the Cartopy documentation: \n    https://scitools.org.uk/cartopy/docs/latest/crs/projections.html#eckertiv", "type_name": "bool", "is_optional": false}, "background": {"description": "If True, uses a shaded relief background (only one \navailable in Cartopy)", "type_name": "bool", "is_optional": false}, "borders": {"description": "Draws the countries border. Defaults is off (False).", "type_name": "bool", "is_optional": false, "default": "s"}, "rivers": {"description": "Draws major rivers. Default is off (False).", "type_name": "bool", "is_optional": false, "default": "off"}, "lakes": {"description": "Draws major lakes. \nDefault is off (False).", "type_name": "bool", "is_optional": false, "default": "off"}, "figsize": {"description": "the size for the figure", "type_name": "list", "is_optional": false}, "ax": {"description": "Return as axis instead of figure (useful to integrate plot into a subplot)", "type_name": "axis,optional", "is_optional": false}, "scatter_kwargs": {"description": "Dictionary of arguments available in matplotlib.pyplot.scatter (https://matplotlib.org/3.2.1/api/_as_gen/matplotlib.pyplot.scatter.html).", "type_name": "dict", "is_optional": false}, "legend": {"description": "Whether the draw a legend on the figure", "type_name": "bool", "is_optional": false}, "lgd_kwargs": {"description": "Dictionary of arguments for matplotlib.pyplot.legend (https://matplotlib.org/3.2.1/api/_as_gen/matplotlib.pyplot.legend.html)", "type_name": "dict", "is_optional": false}, "savefig_settings": {"description": "Dictionary of arguments for matplotlib.pyplot.saveFig.\n- \"path\" must be specified; it can be any existed or non-existed path,\n  with or without a suffix; if the suffix is not given in \"path\", it will follow \"format\"\n- \"format\" can be one of {\"pdf\", \"eps\", \"png\", \"ps\"}", "type_name": "dict", "is_optional": false}, "mute": {"description": "if True, the plot will not show;\nrecommend to set to true when more modifications are going to be made on ax", "type_name": "bool", "is_optional": false}}, "returns": {"type_name": "The figure, or axis if ax specified ", "is_generator": false, "return_name": "ax"}}, "args": ["lat", "lon", "criteria", "marker", "color", "projection", "proj_default", "background", "borders", "rivers", "lakes", "figsize", "ax", "scatter_kwargs", "legend", "lgd_kwargs", "savefig_settings", "mute"], "returns": [["fig", "ax"], ["ax"]], "min_max_lineno": {"min_lineno": 201, "max_lineno": 403}, "calls": ["pandas.DataFrame", "mapping.set_proj", "cartopy.PlateCarree", "ax.add_feature", "enumerate", "ax.get_legend_handles_labels", "ax.legend", "ValueError", "TypeError", "savefig_settings.copy", "scatter_kwargs.copy", "lgd_kwargs.copy", "scatter_kwargs.keys", "scatter_kwargs.keys", "matplotlib.subplots", "ax.stock_img", "ax.add_feature", "ax.add_feature", "ax.add_feature", "ax.scatter", "mapping.map_all.legend_without_duplicate_labels"], "store_vars_calls": {"color_data": "pd.DataFrame", "proj": "set_proj", "data_crs": "ccrs.PlateCarree"}, "functions": {"legend_without_duplicate_labels": {"args": ["ax"], "min_max_lineno": {"min_lineno": 297, "max_lineno": 301}, "calls": ["ax.get_legend_handles_labels", "ax.legend", "enumerate", "zip", "zip"]}}}, "dist_sphere": {"doc": {"short_description": "Uses the harversine formula to calculate distance on a sphere", "args": {"lat1": {"description": "Latitude of the first point, in radians", "type_name": "float", "is_optional": false}, "lon1": {"description": "Longitude of the first point, in radians", "type_name": "float", "is_optional": false}, "lat2": {"description": "Latitude of the second point, in radians", "type_name": "float", "is_optional": false}, "lon2": {"description": "Longitude of the second point, in radians", "type_name": "float", "is_optional": false}}, "returns": {"description": "The distance between the two point in km", "type_name": "float", "is_generator": false, "return_name": "dist"}}, "args": ["lat1", "lon1", "lat2", "lon2"], "min_max_lineno": {"min_lineno": 405, "max_lineno": 433}, "calls": ["float", "numpy.arctan2", "numpy.sin", "numpy.sqrt", "numpy.sqrt", "numpy.cos", "numpy.cos", "numpy.sin"]}, "compute_dist": {"doc": {"long_description": "of other coordinates.", "short_description": "Computes the distance in (km) between a reference point and an array", "args": {"lat_r": {"description": "The reference latitude, in deg", "type_name": "float", "is_optional": false}, "lon_r": {"description": "The reference longitude, in deg", "type_name": "float", "is_optional": false}, "lat_c": {"description": "A list of latitudes for the comparison points, in deg", "type_name": "list", "is_optional": false}, "lon_c": {"description": "A list of longitudes for the comparison points, in deg", "type_name": "list", "is_optional": false}, "pyleoclim.utils.mapping.dist_sphere": {"type_name": "calculate distance on a sphere", "is_optional": false}}, "returns": {"description": "A list of distances in km.", "type_name": "list", "is_generator": false, "return_name": "dist"}}, "args": ["lat_r", "lon_r", "lat_c", "lon_c"], "returns": [["dist"]], "min_max_lineno": {"min_lineno": 434, "max_lineno": 469}, "calls": ["enumerate", "numpy.radians", "numpy.radians", "numpy.radians", "numpy.radians", "dist.append", "mapping.dist_sphere"], "store_vars_calls": {"lat1": "np.radians", "lon1": "np.radians", "lat2": "np.radians", "lon2": "np.radians"}}, "within_distance": {"doc": {"long_description": "Parameters:\n-----------    \ndistance: list\n    A list containing the distance\nradius: float\n    The radius to be considered", "short_description": "Returns the index of the records that are within a certain distance", "returns": {"description": "a list of index", "type_name": "list", "is_generator": false, "return_name": "idx"}}, "args": ["distance", "radius"], "returns": [["idx"]], "min_max_lineno": {"min_lineno": 470, "max_lineno": 488}, "calls": ["enumerate"]}}, "is_test": false}