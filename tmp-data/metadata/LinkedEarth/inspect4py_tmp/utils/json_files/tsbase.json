{"file": {"path": "/Users/dakixr/Desktop/github/scc/tmp-data/metadata/LinkedEarth/Pyleoclim_util/pyleoclim/utils/tsbase.py", "fileNameBase": "tsbase", "extension": "py", "doc": {"long_description": "@author: deborahkhider\n\nBasic functionalities to clean timeseries data.", "short_description": "Created on Wed Sep  8 09:52:10 2021", "full": "Created on Wed Sep  8 09:52:10 2021\n\n@author: deborahkhider\n\nBasic functionalities to clean timeseries data. "}}, "dependencies": [{"import": "numpy", "alias": "np", "type": "external"}, {"from_module": "typing", "import": "OrderedDict", "type": "external"}], "functions": {"clean_ts": {"doc": {"long_description": "Delete the NaNs in the time series and sort it with time axis ascending,\nduplicate timestamps will be reduced by averaging the values.", "short_description": "Cleaning the timeseries", "args": {"ys": {"description": "A time series, NaNs allowed", "type_name": "array", "is_optional": false}, "ts": {"description": "The time axis of the time series, NaNs allowed", "type_name": "array", "is_optional": false}}, "returns": {"description": "The time series without nans", "type_name": "array", "is_generator": false, "return_name": "ys"}}, "args": ["ys", "ts", "verbose"], "returns": [["ys", "ts"]], "min_max_lineno": {"min_lineno": 24, "max_lineno": 50}, "calls": ["tsbase.dropna", "tsbase.sort_ts", "tsbase.reduce_duplicated_timestamps"]}, "dropna": {"doc": {"short_description": "Remove entries of ys or ts that bear NaNs", "args": {"ys": {"description": "A time series, NaNs allowed", "type_name": "array", "is_optional": false}, "ts": {"description": "The time axis of the time series, NaNs allowed", "type_name": "array", "is_optional": false}, "verbose": {"description": "If True, will print a warning message", "type_name": "bool", "is_optional": false}}, "returns": {"description": "The time series without nans", "type_name": "array", "is_generator": false, "return_name": "ys"}}, "args": ["ys", "ts", "verbose"], "returns": [["ys", "ts"]], "min_max_lineno": {"min_lineno": 52, "max_lineno": 87}, "calls": ["numpy.asarray", "numpy.asarray", "numpy.copy", "numpy.copy", "any", "print", "numpy.isnan", "numpy.isnan", "numpy.isnan", "numpy.isnan", "numpy.isnan"], "store_vars_calls": {"ys": "np.asarray", "ts": "np.asarray", "ys_tmp": "np.copy", "ts_tmp": "np.copy"}}, "sort_ts": {"doc": {"short_description": "Sort ts values in ascending order", "args": {"ys": {"description": "Dependent variable", "type_name": "array", "is_optional": false}, "ts": {"description": "Independent variable", "type_name": "array", "is_optional": false}, "verbose": {"description": "If True, will print a warning message", "type_name": "bool", "is_optional": false}}, "returns": {"description": "Dependent variable", "type_name": "array", "is_generator": false, "return_name": "ys"}}, "args": ["ys", "ts", "verbose"], "returns": [["ys", "ts"]], "min_max_lineno": {"min_lineno": 88, "max_lineno": 122}, "calls": ["numpy.asarray", "numpy.asarray", "numpy.median", "numpy.diff", "numpy.argsort", "print"], "store_vars_calls": {"ys": "np.asarray", "ts": "np.asarray", "dt": "np.median", "sort_ind": "np.argsort"}}, "reduce_duplicated_timestamps": {"doc": {"short_description": "Reduce duplicated timestamps in a timeseries by averaging the values", "args": {"ys": {"description": "Dependent variable", "type_name": "array", "is_optional": false}, "ts": {"description": "Independent variable", "type_name": "array", "is_optional": false}, "verbose": {"description": "If True, will print a warning message", "type_name": "bool", "is_optional": false}}, "returns": {"description": "Dependent variable", "type_name": "array", "is_generator": false, "return_name": "ys"}}, "args": ["ys", "ts", "verbose"], "returns": [["ys", "ts"]], "min_max_lineno": {"min_lineno": 123, "max_lineno": 167}, "calls": ["numpy.asarray", "numpy.asarray", "len", "len", "typing.OrderedDict", "zip", "typing.OrderedDict.items", "numpy.array", "numpy.array", "set", "np.array.append", "np.array.append", "print", "value[].append", "numpy.mean"], "store_vars_calls": {"ys": "np.array", "ts": "np.array", "value": "OrderedDict"}}, "is_evenly_spaced": {"doc": {"short_description": "Check if a time axis is evenly spaced, within a given tolerance", "args": {"ts": {"description": "the time axis of a time series", "type_name": "array", "is_optional": false}, "tol": {"description": "numerical tolerance for the relative difference", "type_name": "float64", "is_optional": false}}, "returns": {"description": "True - evenly spaced; False - unevenly spaced.", "type_name": "bool", "is_generator": false, "return_name": "check"}}, "args": ["ts", "tol"], "returns": [["check"]], "min_max_lineno": {"min_lineno": 168, "max_lineno": 195}, "calls": ["numpy.diff", "np.diff.mean", "all", "numpy.abs", "numpy.diff"], "store_vars_calls": {"dts": "np.diff", "dt_mean": "dts.mean", "check": "all"}}}, "is_test": true}