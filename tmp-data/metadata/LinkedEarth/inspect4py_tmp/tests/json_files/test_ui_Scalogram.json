{"file": {"path": "/Users/dakixr/Desktop/github/scc/tmp-data/metadata/LinkedEarth/Pyleoclim_util/pyleoclim/tests/test_ui_Scalogram.py", "fileNameBase": "test_ui_Scalogram", "extension": "py", "doc": {"long_description": "Naming rules:\n1. class: Test{filename}{Class}{method} with appropriate camel case\n2. function: test_{method}_t{test_id}\n\nNotes on how to test:\n0. Make sure [pytest](https://docs.pytest.org) has been installed: `pip install pytest`\n1. execute `pytest {directory_path}` in terminal to perform all tests in all testing files inside the specified directory\n2. execute `pytest {file_path}` in terminal to perform all tests in the specified file\n3. execute `pytest {file_path}::{TestClass}::{test_method}` in terminal to perform a specific test class/method inside the specified file\n4. after `pip install pytest-xdist`, one may execute \"pytest -n 4\" to test in parallel with number of workers specified by `-n`\n5. for more details, see https://docs.pytest.org/en/stable/usage.html", "short_description": "Tests for pyleoclim.core.ui.Scalogram", "full": "Tests for pyleoclim.core.ui.Scalogram\n\nNaming rules:\n1. class: Test{filename}{Class}{method} with appropriate camel case\n2. function: test_{method}_t{test_id}\n\nNotes on how to test:\n0. Make sure [pytest](https://docs.pytest.org) has been installed: `pip install pytest`\n1. execute `pytest {directory_path}` in terminal to perform all tests in all testing files inside the specified directory\n2. execute `pytest {file_path}` in terminal to perform all tests in the specified file\n3. execute `pytest {file_path}::{TestClass}::{test_method}` in terminal to perform a specific test class/method inside the specified file\n4. after `pip install pytest-xdist`, one may execute \"pytest -n 4\" to test in parallel with number of workers specified by `-n`\n5. for more details, see https://docs.pytest.org/en/stable/usage.html"}}, "dependencies": [{"import": "numpy", "alias": "np", "type": "external"}, {"import": "pandas", "alias": "pd", "type": "external"}, {"from_module": "numpy.testing", "import": "assert_array_equal", "type": "external"}, {"from_module": "pandas.testing", "import": "assert_frame_equal", "type": "external"}, {"import": "pytest", "type": "external"}, {"import": "pyleoclim", "alias": "pyleo", "type": "external"}, {"from_module": "pyleoclim.utils.tsmodel", "import": "ar1_sim", "type": "external"}, {"from_module": "pyleoclim.utils.tsmodel", "import": "colored_noise", "type": "external"}], "classes": {"TestUiScalogramSignifTest": {"doc": {"short_description": "Tests for Scalogram.signif_test()", "full": "Tests for Scalogram.signif_test()\n    "}, "min_max_lineno": {"min_lineno": 47, "max_lineno": 70}, "methods": {"test_signif_test_t0": {"doc": {"short_description": "Test scalogram.signif_test() with default parameters"}, "args": ["self", "wave_method"], "min_max_lineno": {"min_lineno": 51, "max_lineno": 60}, "calls": ["pytest.mark.parametrize", "test_ui_Scalogram.gen_colored_noise", "pyleoclim.Series", "pyleoclim.Series.wavelet", "pyleo.Series.wavelet.signif_test"], "store_vars_calls": {"ts": "pyleo.Series", "scal": "ts.wavelet", "scal_signif": "scal.signif_test"}}, "test_signif_test_t1": {"doc": {"short_description": "Test scalogram.signif_test() with default parameters"}, "args": ["self", "ar1_method"], "min_max_lineno": {"min_lineno": 61, "max_lineno": 70}, "calls": ["pytest.mark.parametrize", "test_ui_Scalogram.gen_colored_noise", "pyleoclim.Series", "pyleoclim.Series.wavelet", "pyleo.Series.wavelet.signif_test"], "store_vars_calls": {"ts": "pyleo.Series", "scal": "ts.wavelet", "scal_signif": "scal.signif_test"}}}}}, "functions": {"gen_normal": {"doc": {"short_description": "Generate random data with a Gaussian distribution"}, "args": ["loc", "scale", "nt"], "returns": [["t", "v"]], "min_max_lineno": {"min_lineno": 31, "max_lineno": 37}, "calls": ["numpy.arange", "numpy.random.normal"], "store_vars_calls": {"t": "np.arange", "v": "np.random.normal"}}, "gen_colored_noise": {"doc": {"short_description": "Generate colored noise"}, "args": ["alpha", "nt", "f0", "m", "seed"], "returns": [["t", "v"]], "min_max_lineno": {"min_lineno": 38, "max_lineno": 44}, "calls": ["numpy.arange", "pyleoclim.utils.tsmodel.colored_noise"], "store_vars_calls": {"t": "np.arange", "v": "colored_noise"}}}, "is_test": true}