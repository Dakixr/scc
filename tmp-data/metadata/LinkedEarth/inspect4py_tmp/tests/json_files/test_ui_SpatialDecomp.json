{"file": {"path": "/Users/dakixr/Desktop/github/scc/tmp-data/metadata/LinkedEarth/Pyleoclim_util/pyleoclim/tests/test_ui_SpatialDecomp.py", "fileNameBase": "test_ui_SpatialDecomp", "extension": "py", "doc": {"long_description": "Naming rules:\n1. class: Test{filename}{Class}{method} with appropriate camel case\n2. function: test_{method}_t{test_id}\n\nNotes on how to test:\n0. Make sure [pytest](https://docs.pytest.org) has been installed: `pip install pytest`\n1. execute `pytest {directory_path}` in terminal to perform all tests in all testing files inside the specified directory\n2. execute `pytest {file_path}` in terminal to perform all tests in the specified file\n3. execute `pytest {file_path}::{TestClass}::{test_method}` in terminal to perform a specific test class/method inside the specified file\n4. after `pip install pytest-xdist`, one may execute \"pytest -n 4\" to test in parallel with number of workers specified by `-n`\n5. for more details, see https://docs.pytest.org/en/stable/usage.html", "short_description": "Tests for pyleoclim.core.ui.SSARes", "full": "Tests for pyleoclim.core.ui.SSARes\n\nNaming rules:\n1. class: Test{filename}{Class}{method} with appropriate camel case\n2. function: test_{method}_t{test_id}\n\nNotes on how to test:\n0. Make sure [pytest](https://docs.pytest.org) has been installed: `pip install pytest`\n1. execute `pytest {directory_path}` in terminal to perform all tests in all testing files inside the specified directory\n2. execute `pytest {file_path}` in terminal to perform all tests in the specified file\n3. execute `pytest {file_path}::{TestClass}::{test_method}` in terminal to perform a specific test class/method inside the specified file\n4. after `pip install pytest-xdist`, one may execute \"pytest -n 4\" to test in parallel with number of workers specified by `-n`\n5. for more details, see https://docs.pytest.org/en/stable/usage.html"}}, "dependencies": [{"import": "pytest", "type": "external"}, {"import": "pyleoclim", "alias": "pyleo", "type": "external"}, {"import": "numpy", "alias": "np", "type": "external"}], "classes": {"TestUiSpatialDecompScreeplot": {"doc": {"short_description": "Tests for SpatialDecomp.screeplot()", "full": "Tests for SpatialDecomp.screeplot()\n    "}, "min_max_lineno": {"min_lineno": 25, "max_lineno": 46}, "methods": {"test_plot_t0": {"doc": {"short_description": "Test SpatialDecomp.screeplot() with default parameters"}, "args": ["self"], "min_max_lineno": {"min_lineno": 29, "max_lineno": 46}, "calls": ["pyleoclim.gen_ts().standardize", "numpy.arange", "range", "pyleoclim.MultipleSeries", "pyleoclim.MultipleSeries.pca", "pyleo.MultipleSeries.pca.screeplot", "numpy.random.randn", "mslist.append", "pyleoclim.gen_ts", "pyleoclim.Series"], "store_vars_calls": {"signal": "pyleo.gen_ts().standardize", "t": "np.arange", "ms": "pyleo.MultipleSeries", "res": "ms.pca"}}}}, "TestUipatialDecompModeplot": {"doc": {"short_description": "Tests for SSARes.modeplot()", "full": "Tests for SSARes.modeplot()\n    "}, "min_max_lineno": {"min_lineno": 48, "max_lineno": 95}, "methods": {"test_plot_t0": {"doc": {"short_description": "Test with synthetic data, non missing values, all allowable spectral methods", "returns": {"type_name": "None.", "is_generator": false}}, "args": ["self", "spec_method"], "min_max_lineno": {"min_lineno": 51, "max_lineno": 73}, "calls": ["pytest.mark.parametrize", "pyleoclim.gen_ts().standardize", "numpy.arange", "range", "pyleoclim.MultipleSeries", "pyleoclim.MultipleSeries.pca", "pyleo.MultipleSeries.pca.modeplot", "numpy.random.randn", "mslist.append", "pyleoclim.gen_ts", "pyleoclim.Series"], "store_vars_calls": {"signal": "pyleo.gen_ts().standardize", "t": "np.arange", "ms": "pyleo.MultipleSeries", "res": "ms.pca"}}, "test_plot_t1": {"doc": {"short_description": "Test with synthetic data, non missing values, modeplot()", "returns": {"type_name": "None.", "is_generator": false}}, "args": ["self"], "min_max_lineno": {"min_lineno": 75, "max_lineno": 95}, "calls": ["pyleoclim.gen_ts().standardize", "numpy.arange", "range", "pyleoclim.MultipleSeries", "pyleoclim.MultipleSeries.pca", "pyleo.MultipleSeries.pca.modeplot", "numpy.random.randn", "mslist.append", "pyleoclim.gen_ts", "pyleoclim.Series"], "store_vars_calls": {"signal": "pyleo.gen_ts().standardize", "t": "np.arange", "ms": "pyleo.MultipleSeries", "res": "ms.pca"}}}}}, "is_test": true}