{"file": {"path": "/Users/dakixr/Desktop/github/scc/tmp-data/metadata/LinkedEarth/Pyleoclim_util/pyleoclim/tests/test_ui_SSARes.py", "fileNameBase": "test_ui_SSARes", "extension": "py", "doc": {"long_description": "Naming rules:\n1. class: Test{filename}{Class}{method} with appropriate camel case\n2. function: test_{method}_t{test_id}\n\nNotes on how to test:\n0. Make sure [pytest](https://docs.pytest.org) has been installed: `pip install pytest`\n1. execute `pytest {directory_path}` in terminal to perform all tests in all testing files inside the specified directory\n2. execute `pytest {file_path}` in terminal to perform all tests in the specified file\n3. execute `pytest {file_path}::{TestClass}::{test_method}` in terminal to perform a specific test class/method inside the specified file\n4. after `pip install pytest-xdist`, one may execute \"pytest -n 4\" to test in parallel with number of workers specified by `-n`\n5. for more details, see https://docs.pytest.org/en/stable/usage.html", "short_description": "Tests for pyleoclim.core.ui.SSARes", "full": "Tests for pyleoclim.core.ui.SSARes\n\nNaming rules:\n1. class: Test{filename}{Class}{method} with appropriate camel case\n2. function: test_{method}_t{test_id}\n\nNotes on how to test:\n0. Make sure [pytest](https://docs.pytest.org) has been installed: `pip install pytest`\n1. execute `pytest {directory_path}` in terminal to perform all tests in all testing files inside the specified directory\n2. execute `pytest {file_path}` in terminal to perform all tests in the specified file\n3. execute `pytest {file_path}::{TestClass}::{test_method}` in terminal to perform a specific test class/method inside the specified file\n4. after `pip install pytest-xdist`, one may execute \"pytest -n 4\" to test in parallel with number of workers specified by `-n`\n5. for more details, see https://docs.pytest.org/en/stable/usage.html"}}, "dependencies": [{"import": "pytest", "type": "external"}, {"import": "pyleoclim", "alias": "pyleo", "type": "external"}, {"import": "numpy", "alias": "np", "type": "external"}], "classes": {"TestUiSSAResScreeplot": {"doc": {"short_description": "Tests for SSARes.screeplot()", "full": "Tests for SSARes.screeplot()\n    "}, "min_max_lineno": {"min_lineno": 24, "max_lineno": 48}, "methods": {"test_plot_t0": {"doc": {"long_description": "(default is already taken care of in TestUISeriesSsa)", "short_description": "Test SSARes.screeplot with non-default parameters"}, "args": ["self"], "min_max_lineno": {"min_lineno": 28, "max_lineno": 38}, "calls": ["numpy.arange", "pyleoclim.gen_ts", "pyleoclim.gen_ts.ssa", "pyleo.gen_ts.ssa.screeplot"], "store_vars_calls": {"t": "np.arange", "cn": "pyleo.gen_ts", "cn_ssa": "cn.ssa"}}, "test_plot_t1": {"doc": {"short_description": "Test SSARes.screeplot with MC-SSA "}, "args": ["self"], "min_max_lineno": {"min_lineno": 39, "max_lineno": 48}, "calls": ["numpy.arange", "pyleoclim.gen_ts", "pyleoclim.gen_ts.ssa", "pyleo.gen_ts.ssa.screeplot"], "store_vars_calls": {"t": "np.arange", "cn": "pyleo.gen_ts", "cn_ssa": "cn.ssa"}}}}, "TestUiSSAResModeplot": {"doc": {"short_description": "Tests for SSARes.modeplot()", "full": "Tests for SSARes.modeplot()\n    "}, "min_max_lineno": {"min_lineno": 50, "max_lineno": 73}, "methods": {"test_plot_t0": {"doc": {"short_description": "Test SSARes.modeplot with 3 spectral methods"}, "args": ["self", "spec_method"], "min_max_lineno": {"min_lineno": 53, "max_lineno": 63}, "calls": ["pytest.mark.parametrize", "numpy.arange", "pyleoclim.gen_ts", "pyleoclim.gen_ts.ssa", "pyleo.gen_ts.ssa.modeplot"], "store_vars_calls": {"t": "np.arange", "cn": "pyleo.gen_ts", "cn_ssa": "cn.ssa"}}, "test_plot_t1": {"doc": {"short_description": "Test SSARes.modeplot with nondefault mode index"}, "args": ["self"], "min_max_lineno": {"min_lineno": 64, "max_lineno": 73}, "calls": ["numpy.arange", "pyleoclim.gen_ts", "pyleoclim.gen_ts.ssa", "pyleo.gen_ts.ssa.modeplot"], "store_vars_calls": {"t": "np.arange", "cn": "pyleo.gen_ts", "cn_ssa": "cn.ssa"}}}}}, "is_test": true}