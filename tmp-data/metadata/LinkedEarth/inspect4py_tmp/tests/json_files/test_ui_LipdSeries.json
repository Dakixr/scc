{"file": {"path": "/Users/dakixr/Desktop/github/scc/tmp-data/metadata/LinkedEarth/Pyleoclim_util/pyleoclim/tests/test_ui_LipdSeries.py", "fileNameBase": "test_ui_LipdSeries", "extension": "py", "doc": {"long_description": "@author: deborahkhider\n\nTests for pyleoclim.core.ui.LipdSeries\n\nNaming rules:\n1. class: Test{filename}{Class}{method} with appropriate camel case\n2. function: test_{method}_t{test_id}\n\nNotes on how to test:\n0. Make sure [pytest](https://docs.pytest.org) has been installed: `pip install pytest`\n1. execute `pytest {directory_path}` in terminal to perform all tests in all testing files inside the specified directory\n2. execute `pytest {file_path}` in terminal to perform all tests in the specified file\n3. execute `pytest {file_path}::{TestClass}::{test_method}` in terminal to perform a specific test class/method inside the specified file", "short_description": "Created on Mon Feb  8 13:28:24 2021", "full": "Created on Mon Feb  8 13:28:24 2021\n\n@author: deborahkhider\n\nTests for pyleoclim.core.ui.LipdSeries\n\nNaming rules:\n1. class: Test{filename}{Class}{method} with appropriate camel case\n2. function: test_{method}_t{test_id}\n\nNotes on how to test:\n0. Make sure [pytest](https://docs.pytest.org) has been installed: `pip install pytest`\n1. execute `pytest {directory_path}` in terminal to perform all tests in all testing files inside the specified directory\n2. execute `pytest {file_path}` in terminal to perform all tests in the specified file\n3. execute `pytest {file_path}::{TestClass}::{test_method}` in terminal to perform a specific test class/method inside the specified file"}}, "dependencies": [{"import": "pytest", "type": "external"}, {"import": "pyleoclim", "alias": "pyleo", "type": "external"}, {"from_module": "urllib.request", "import": "urlopen", "type": "external"}, {"import": "json", "type": "external"}], "classes": {"TestUiLipdSeriesMap": {"doc": {"short_description": "test LipdSeries.map()", "full": "test LipdSeries.map()\n    "}, "min_max_lineno": {"min_lineno": 50, "max_lineno": 58}, "methods": {"test_map_t0": {"args": ["self"], "min_max_lineno": {"min_lineno": 54, "max_lineno": 58}, "calls": ["test_ui_LipdSeries.get_ts", "get_ts.map", "pyleoclim.closefig"], "store_vars_calls": {"ts": "get_ts"}}}}, "TestUiLipdSeriesgetMetadata": {"doc": {"short_description": "test LipdSeries.getMetadata", "full": "test LipdSeries.getMetadata\n    "}, "min_max_lineno": {"min_lineno": 59, "max_lineno": 66}, "methods": {"test_getMetadata_t0": {"args": ["self"], "min_max_lineno": {"min_lineno": 63, "max_lineno": 66}, "calls": ["test_ui_LipdSeries.get_ts", "get_ts.getMetadata"], "store_vars_calls": {"ts": "get_ts", "res": "ts.getMetadata"}}}}, "TestUiLipdSeriesDashboard": {"doc": {"short_description": "test LipdSeries.Dashboard", "full": "test LipdSeries.Dashboard\n    "}, "min_max_lineno": {"min_lineno": 67, "max_lineno": 75}, "methods": {"test_dashboard_t0": {"args": ["self"], "min_max_lineno": {"min_lineno": 71, "max_lineno": 75}, "calls": ["test_ui_LipdSeries.get_ts", "get_ts.dashboard", "pyleoclim.closefig"], "store_vars_calls": {"ts": "get_ts"}}}}, "TestUiLipdSeriesMapNearRecord": {"doc": {"long_description": "Requires a dictionary of LiPDs and selection", "short_description": "Test LipdSeries.MapNear Record", "full": "Test LipdSeries.MapNear Record\n\nRequires a dictionary of LiPDs and selection"}, "min_max_lineno": {"min_lineno": 76, "max_lineno": 99}, "methods": {"test_mapNearRecord_t0": {"args": ["self"], "min_max_lineno": {"min_lineno": 82, "max_lineno": 87}, "calls": ["test_ui_LipdSeries.importLiPD", "pyleoclim.Lipd", "pyleoclim.Lipd.to_LipdSeries", "pyleo.Lipd.to_LipdSeries.mapNearRecord"], "store_vars_calls": {"D": "importLiPD", "d": "pyleo.Lipd", "ts": "d.to_LipdSeries", "res": "ts.mapNearRecord"}}, "test_mapNearRecord_t1": {"args": ["self"], "min_max_lineno": {"min_lineno": 88, "max_lineno": 93}, "calls": ["test_ui_LipdSeries.importLiPD", "pyleoclim.Lipd", "pyleoclim.Lipd.to_LipdSeries", "pyleo.Lipd.to_LipdSeries.mapNearRecord"], "store_vars_calls": {"D": "importLiPD", "d": "pyleo.Lipd", "ts": "d.to_LipdSeries", "res": "ts.mapNearRecord"}}, "test_mapNearRecord_t2": {"args": ["self"], "min_max_lineno": {"min_lineno": 94, "max_lineno": 99}, "calls": ["test_ui_LipdSeries.importLiPD", "pyleoclim.Lipd", "pyleoclim.Lipd.to_LipdSeries", "pyleo.Lipd.to_LipdSeries.mapNearRecord"], "store_vars_calls": {"D": "importLiPD", "d": "pyleo.Lipd", "ts": "d.to_LipdSeries", "res": "ts.mapNearRecord"}}}}, "TestUiLipdSeriesChronEnsembleToPaleo": {"doc": {"short_description": "Test the ability to get the chron ensemble tables", "full": "Test the ability to get the chron ensemble tables\n    "}, "min_max_lineno": {"min_lineno": 100, "max_lineno": 111}, "methods": {"test_chronEnsembletoPaleo_t0": {"args": ["self"], "min_max_lineno": {"min_lineno": 104, "max_lineno": 111}, "calls": ["test_ui_LipdSeries.importEnsLiPD", "pyleoclim.Lipd", "pyleoclim.Lipd.to_LipdSeries", "pyleo.Lipd.to_LipdSeries.chronEnsembleToPaleo", "type"], "store_vars_calls": {"D": "importEnsLiPD", "d": "pyleo.Lipd", "ts": "d.to_LipdSeries", "ens": "ts.chronEnsembleToPaleo"}}}}, "TestUiLipdSeriesPlotAgeDepth": {"doc": {"short_description": "test LipdSeries.plot_age_depth", "full": "test LipdSeries.plot_age_depth\n    "}, "min_max_lineno": {"min_lineno": 113, "max_lineno": 131}, "methods": {"test_plot_age_depth_t0": {"args": ["self"], "min_max_lineno": {"min_lineno": 117, "max_lineno": 123}, "calls": ["test_ui_LipdSeries.importEnsLiPD", "pyleoclim.Lipd", "pyleoclim.Lipd.to_LipdSeries", "pyleo.Lipd.to_LipdSeries.plot_age_depth", "pyleoclim.closefig"], "store_vars_calls": {"D": "importEnsLiPD", "d": "pyleo.Lipd", "ts": "d.to_LipdSeries"}}, "test_plot_age_depth_t1": {"args": ["self", "traces"], "min_max_lineno": {"min_lineno": 124, "max_lineno": 131}, "calls": ["pytest.mark.parametrize", "test_ui_LipdSeries.importEnsLiPD", "pyleoclim.Lipd", "pyleoclim.Lipd.to_LipdSeries", "pyleo.Lipd.to_LipdSeries.plot_age_depth", "pyleoclim.closefig"], "store_vars_calls": {"D": "importEnsLiPD", "d": "pyleo.Lipd", "ts": "d.to_LipdSeries"}}}}}, "functions": {"importLiPD": {"returns": [["d"]], "min_max_lineno": {"min_lineno": 25, "max_lineno": 30}, "calls": ["urllib.request.urlopen", "json.loads", "urllib.request.urlopen.read"], "store_vars_calls": {"response": "urlopen", "d": "json.loads"}}, "importEnsLiPD": {"returns": [["d"]], "min_max_lineno": {"min_lineno": 31, "max_lineno": 36}, "calls": ["urllib.request.urlopen", "json.loads", "urllib.request.urlopen.read"], "store_vars_calls": {"response": "urlopen", "d": "json.loads"}}, "load_data": {"returns": [["d"]], "min_max_lineno": {"min_lineno": 37, "max_lineno": 44}, "calls": ["pyleoclim.Lipd", "pyleoclim.Lipd"], "store_vars_calls": {"d": "pyleo.Lipd"}}, "get_ts": {"returns": [["ts"]], "min_max_lineno": {"min_lineno": 45, "max_lineno": 49}, "calls": ["test_ui_LipdSeries.load_data", "load_data.to_LipdSeries"], "store_vars_calls": {"d": "load_data", "ts": "d.to_LipdSeries"}}}, "is_test": true}