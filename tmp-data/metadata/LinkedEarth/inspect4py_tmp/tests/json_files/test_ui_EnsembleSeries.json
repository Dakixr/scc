{"file": {"path": "/Users/dakixr/Desktop/github/scc/tmp-data/metadata/LinkedEarth/Pyleoclim_util/pyleoclim/tests/test_ui_EnsembleSeries.py", "fileNameBase": "test_ui_EnsembleSeries", "extension": "py", "doc": {"long_description": "Naming rules:\n1. class: Test{filename}{Class}{method} with appropriate camel case\n2. function: test_{method}_t{test_id}\n\nNotes on how to test:\n0. Make sure [pytest](https://docs.pytest.org) has been installed: `pip install pytest`\n1. execute `pytest {directory_path}` in terminal to perform all tests in all testing files inside the specified directory\n2. execute `pytest {file_path}` in terminal to perform all tests in the specified file\n3. execute `pytest {file_path}::{TestClass}::{test_method}` in terminal to perform a specific test class/method inside the specified file\n4. after `pip install pytest-xdist`, one may execute \"pytest -n 4\" to test in parallel with number of workers specified by `-n`\n5. for more details, see https://docs.pytest.org/en/stable/usage.html", "short_description": "Tests for pyleoclim.core.ui.EnsembleSeries", "full": "Tests for pyleoclim.core.ui.EnsembleSeries\n\nNaming rules:\n1. class: Test{filename}{Class}{method} with appropriate camel case\n2. function: test_{method}_t{test_id}\n\nNotes on how to test:\n0. Make sure [pytest](https://docs.pytest.org) has been installed: `pip install pytest`\n1. execute `pytest {directory_path}` in terminal to perform all tests in all testing files inside the specified directory\n2. execute `pytest {file_path}` in terminal to perform all tests in the specified file\n3. execute `pytest {file_path}::{TestClass}::{test_method}` in terminal to perform a specific test class/method inside the specified file\n4. after `pip install pytest-xdist`, one may execute \"pytest -n 4\" to test in parallel with number of workers specified by `-n`\n5. for more details, see https://docs.pytest.org/en/stable/usage.html"}}, "dependencies": [{"import": "numpy", "alias": "np", "type": "external"}, {"import": "pandas", "alias": "pd", "type": "external"}, {"from_module": "numpy.testing", "import": "assert_array_equal", "type": "external"}, {"from_module": "pandas.testing", "import": "assert_frame_equal", "type": "external"}, {"import": "pytest", "type": "external"}, {"import": "pyleoclim", "alias": "pyleo", "type": "external"}, {"from_module": "pyleoclim.utils.tsmodel", "import": "ar1_sim", "type": "external"}, {"from_module": "pyleoclim.utils.tsmodel", "import": "colored_noise", "type": "external"}, {"from_module": "pyleoclim.tests.examples", "import": "load_dataset", "type": "external"}], "classes": {"TestUIEnsembleSeriesCorrelation": {"min_max_lineno": {"min_lineno": 48, "max_lineno": 184}, "methods": {"test_correlation_t0": {"doc": {"short_description": "Test for EnsembleSeries.correlation() when the target is a Series"}, "args": ["self"], "min_max_lineno": {"min_lineno": 49, "max_lineno": 68}, "calls": ["test_ui_EnsembleSeries.gen_colored_noise", "test_ui_EnsembleSeries.gen_normal", "pyleoclim.Series", "pyleoclim.Series", "pyleoclim.Series", "pyleoclim.EnsembleSeries", "pyleoclim.EnsembleSeries.correlation"], "store_vars_calls": {"ts0": "pyleo.Series", "ts1": "pyleo.Series", "ts2": "pyleo.Series", "ts_ens": "pyleo.EnsembleSeries", "corr_res": "ts_ens.correlation"}}, "test_correlation_t1": {"doc": {"short_description": "Test for EnsembleSeries.correlation() when the target is an EnsembleSeries with same number of Series"}, "args": ["self"], "min_max_lineno": {"min_lineno": 70, "max_lineno": 94}, "calls": ["test_ui_EnsembleSeries.gen_colored_noise", "test_ui_EnsembleSeries.gen_normal", "pyleoclim.Series", "pyleoclim.Series", "pyleoclim.Series", "pyleoclim.Series", "pyleoclim.EnsembleSeries", "pyleoclim.EnsembleSeries", "pyleoclim.EnsembleSeries.correlation", "numpy.size", "numpy.size"], "store_vars_calls": {"ts0": "pyleo.Series", "ts1": "pyleo.Series", "ts2": "pyleo.Series", "ts3": "pyleo.Series", "ts_ens": "pyleo.EnsembleSeries", "ts_target": "pyleo.EnsembleSeries", "corr_res": "ts_ens.correlation"}}, "test_correlation_t2": {"doc": {"short_description": "Test for EnsembleSeries.correlation() when the target is an EnsembleSeries with fewer Series"}, "args": ["self"], "min_max_lineno": {"min_lineno": 96, "max_lineno": 121}, "calls": ["test_ui_EnsembleSeries.gen_colored_noise", "test_ui_EnsembleSeries.gen_normal", "pyleoclim.Series", "pyleoclim.Series", "pyleoclim.Series", "pyleoclim.Series", "pyleoclim.Series", "pyleoclim.EnsembleSeries", "pyleoclim.EnsembleSeries", "pyleoclim.EnsembleSeries.correlation", "numpy.size", "numpy.size"], "store_vars_calls": {"ts0": "pyleo.Series", "ts1": "pyleo.Series", "ts2": "pyleo.Series", "ts3": "pyleo.Series", "ts4": "pyleo.Series", "ts_ens": "pyleo.EnsembleSeries", "ts_target": "pyleo.EnsembleSeries", "corr_res": "ts_ens.correlation"}}, "test_correlation_t3": {"doc": {"short_description": "Test for EnsembleSeries.correlation() when the target is an EnsembleSeries with more Series"}, "args": ["self"], "min_max_lineno": {"min_lineno": 123, "max_lineno": 148}, "calls": ["test_ui_EnsembleSeries.gen_colored_noise", "test_ui_EnsembleSeries.gen_normal", "pyleoclim.Series", "pyleoclim.Series", "pyleoclim.Series", "pyleoclim.Series", "pyleoclim.Series", "pyleoclim.EnsembleSeries", "pyleoclim.EnsembleSeries", "pyleoclim.EnsembleSeries.correlation", "numpy.size", "numpy.size"], "store_vars_calls": {"ts0": "pyleo.Series", "ts1": "pyleo.Series", "ts2": "pyleo.Series", "ts3": "pyleo.Series", "ts4": "pyleo.Series", "ts_ens": "pyleo.EnsembleSeries", "ts_target": "pyleo.EnsembleSeries", "corr_res": "ts_ens.correlation"}}, "test_plot_envelope_t0": {"doc": {"short_description": "Test EnsembleSeries.plot_envelope() on a list of colored noise"}, "args": ["self"], "min_max_lineno": {"min_lineno": 149, "max_lineno": 166}, "calls": ["pyleoclim.gen_ts().standardize", "numpy.random.randn", "range", "pyleoclim.EnsembleSeries", "pyleoclim.EnsembleSeries.plot_envelope", "pyleoclim.Series", "series_list.append", "pyleoclim.gen_ts"], "store_vars_calls": {"signal": "pyleo.gen_ts().standardize", "noise": "np.random.randn", "ts_ens": "pyleo.EnsembleSeries", "ts": "pyleo.Series"}}, "test_plot_traces_t0": {"doc": {"short_description": "Test EnsembleSeries.plot_traces() on a list of colored noise"}, "args": ["self"], "min_max_lineno": {"min_lineno": 167, "max_lineno": 184}, "calls": ["pyleoclim.gen_ts().standardize", "numpy.random.randn", "range", "pyleoclim.EnsembleSeries", "pyleoclim.EnsembleSeries.plot_traces", "pyleoclim.Series", "series_list.append", "pyleoclim.gen_ts"], "store_vars_calls": {"signal": "pyleo.gen_ts().standardize", "noise": "np.random.randn", "ts_ens": "pyleo.EnsembleSeries", "ts": "pyleo.Series"}}}}}, "functions": {"gen_normal": {"doc": {"short_description": "Generate random data with a Gaussian distribution"}, "args": ["loc", "scale", "nt"], "returns": [["t", "v"]], "min_max_lineno": {"min_lineno": 32, "max_lineno": 38}, "calls": ["numpy.arange", "numpy.random.normal"], "store_vars_calls": {"t": "np.arange", "v": "np.random.normal"}}, "gen_colored_noise": {"doc": {"short_description": "Generate colored noise"}, "args": ["alpha", "nt", "f0", "m", "seed"], "returns": [["t", "v"]], "min_max_lineno": {"min_lineno": 39, "max_lineno": 45}, "calls": ["numpy.arange", "pyleoclim.utils.tsmodel.colored_noise"], "store_vars_calls": {"t": "np.arange", "v": "colored_noise"}}}, "is_test": true}