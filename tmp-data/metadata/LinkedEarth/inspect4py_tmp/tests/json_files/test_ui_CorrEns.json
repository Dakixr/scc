{"file": {"path": "/Users/dakixr/Desktop/github/scc/tmp-data/metadata/LinkedEarth/Pyleoclim_util/pyleoclim/tests/test_ui_CorrEns.py", "fileNameBase": "test_ui_CorrEns", "extension": "py", "doc": {"long_description": "Naming rules:\n1. class: Test{filename}{Class}{method} with appropriate camel case\n2. function: test_{method}_t{test_id}\n\nNotes on how to test:\n0. Make sure [pytest](https://docs.pytest.org) has been installed: `pip install pytest`\n1. execute `pytest {directory_path}` in terminal to perform all tests in all testing files inside the specified directory\n2. execute `pytest {file_path}` in terminal to perform all tests in the specified file\n3. execute `pytest {file_path}::{TestClass}::{test_method}` in terminal to perform a specific test class/method inside the specified file\n4. after `pip install pytest-xdist`, one may execute \"pytest -n 4\" to test in parallel with number of workers specified by `-n`\n5. for more details, see https://docs.pytest.org/en/stable/usage.html", "short_description": "Tests for pyleoclim.core.ui.CorrEns class", "full": "Tests for pyleoclim.core.ui.CorrEns class\n\nNaming rules:\n1. class: Test{filename}{Class}{method} with appropriate camel case\n2. function: test_{method}_t{test_id}\n\nNotes on how to test:\n0. Make sure [pytest](https://docs.pytest.org) has been installed: `pip install pytest`\n1. execute `pytest {directory_path}` in terminal to perform all tests in all testing files inside the specified directory\n2. execute `pytest {file_path}` in terminal to perform all tests in the specified file\n3. execute `pytest {file_path}::{TestClass}::{test_method}` in terminal to perform a specific test class/method inside the specified file\n4. after `pip install pytest-xdist`, one may execute \"pytest -n 4\" to test in parallel with number of workers specified by `-n`\n5. for more details, see https://docs.pytest.org/en/stable/usage.html"}}, "dependencies": [{"import": "numpy", "alias": "np", "type": "external"}, {"import": "pandas", "alias": "pd", "type": "external"}, {"import": "matplotlib", "alias": "plt", "type": "external"}, {"from_module": "numpy.testing", "import": "assert_array_equal", "type": "external"}, {"from_module": "pandas.testing", "import": "assert_frame_equal", "type": "external"}, {"import": "pytest", "type": "external"}, {"import": "pyleoclim", "alias": "pyleo", "type": "external"}], "classes": {"TestUiCorrEns": {"min_max_lineno": {"min_lineno": 28, "max_lineno": 56}, "methods": {"test_plot_t0": {"doc": {"long_description": "(qui peut le plus peut le moins)", "short_description": "Test CorrEns.plot() for multiple plots"}, "args": ["self"], "min_max_lineno": {"min_lineno": 29, "max_lineno": 56}, "calls": ["pyleoclim.gen_ts().standardize", "numpy.random.randn", "int", "range", "pyleoclim.EnsembleSeries", "pyleoclim.EnsembleSeries", "matplotlib.subplots", "pyleoclim.EnsembleSeries.correlation", "pyleo.EnsembleSeries.correlation.plot", "pyleoclim.EnsembleSeries.correlation", "pyleo.EnsembleSeries.correlation.plot", "pyleoclim.Series", "list1.append", "pyleoclim.Series", "list2.append", "pyleoclim.gen_ts"], "store_vars_calls": {"signal": "pyleo.gen_ts().standardize", "noise": "np.random.randn", "nhlf": "int", "ts_ens1": "pyleo.EnsembleSeries", "ts_ens2": "pyleo.EnsembleSeries", "corr1": "ts_ens1.correlation", "corr2": "ts_ens2.correlation", "ts1": "pyleo.Series", "ts2": "pyleo.Series"}}}}}, "is_test": true}