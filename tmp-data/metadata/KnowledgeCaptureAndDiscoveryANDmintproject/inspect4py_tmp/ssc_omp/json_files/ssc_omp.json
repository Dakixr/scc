{"file": {"path": "/Users/dakixr/Desktop/github/scc/tmp-data/metadata/KnowledgeCaptureAndDiscoveryANDmintproject/P4ML-UI/spider/spider/cluster/ssc_omp/ssc_omp.py", "fileNameBase": "ssc_omp", "extension": "py", "doc": {"long_description": "@author akash\nImplements the SSC using Orthogonal Matching Pursuit Algorithm", "short_description": "ssc_omp.py", "full": "ssc_omp.py\n@author akash\nImplements the SSC using Orthogonal Matching Pursuit Algorithm"}}, "dependencies": [{"import": "numpy", "alias": "np", "type": "external"}, {"import": "scipy", "alias": "sp", "type": "external"}, {"from_module": "scipy.sparse.linalg", "import": "svds", "type": "external"}, {"from_module": "scipy.sparse.linalg", "import": "eigs", "type": "external"}, {"from_module": "scipy.linalg", "import": "lstsq", "type": "external"}, {"import": "scipy", "alias": "sps", "type": "external"}, {"from_module": "sklearn.cluster", "import": "KMeans", "type": "external"}, {"from_module": "scipy.optimize", "import": "linear_sum_assignment", "type": "external"}, {"import": "stopit", "type": "external"}, {"from_module": "spider.clustering", "import": "ClusteringPrimitiveBase", "type": "external"}, {"from_module": "spider.clustering", "import": "TimeoutError", "type": "external"}], "classes": {"SSC_OMP": {"min_max_lineno": {"min_lineno": 24, "max_lineno": 166}, "methods": {"__init__": {"doc": {"short_description": "Constructor ssc_omp class", "args": {"n_clusters": {"description": "The number of clusters"}, "max_subspace_dim": {"description": "the maximum dimenstion of the subspace"}}}, "args": ["self", "n_clusters", "max_subspace_dim"], "min_max_lineno": {"min_lineno": 27, "max_lineno": 39}}, "_cNormalize": {"doc": {"short_description": "This method performs the column wise normalization of the input data", "args": {"data": {"description": "A dxN numpy array"}, "norm": {"description": "the desired norm value (This has to be in accordance with the accepted numpy\nnorm values"}}, "returns": {"description": "Returns the column wise normalised data", "is_generator": false}}, "args": ["data", "norm"], "min_max_lineno": {"min_lineno": 41, "max_lineno": 51}, "calls": ["numpy.linalg.norm"]}, "_OMPMatFunction": {"doc": {"long_description": "Chong You, Daniel Robinson, Rene Vidal,\n\"Scalable Sparse Subspace Clustering by Orthogonal Matching Pursuit\", CVPR 2016.\n\nIt performs the OMP algorithm on every column of X using all other columns as a\ndicitonary", "short_description": "This code implements the subspace clustering algorithm described in", "args": {"data": {"description": "A dxN numpy array"}, "K": {"description": "The maximum subspace dimension"}, "thres": {"description": "termination condition"}}, "returns": {"description": "the SSC-OMP representation of the data", "is_generator": false}}, "args": ["data", "K", "thres"], "returns": [["sparse_mat"]], "min_max_lineno": {"min_lineno": 52, "max_lineno": 110}, "calls": ["ssc_omp.SSC_OMP._cNormalize", "numpy.ones", "numpy.zeros", "numpy.copy", "range", "range", "scipy.coo_matrix", "scipy.coo_matrix", "sparse_mat.toarray.toarray.toarray", "numpy.arange().reshape", "numpy.ones", "numpy.ones", "numpy.ceil", "scipy.linalg.lstsq", "scipy.linalg.lstsq", "numpy.arange", "numpy.abs", "numpy.fill_diagonal", "numpy.argmax", "range", "numpy.any", "numpy.arange", "min", "numpy.matmul", "scipy.linalg.lstsq", "scipy.linalg.lstsq", "numpy.asscalar", "numpy.matmul", "numpy.sum", "numpy.asscalar"], "store_vars_calls": {"data_normalised": "SSC_OMP._cNormalize", "support_set": "np.ones", "values": "np.zeros", "residual": "np.copy", "sparse_mat": "sparse_mat.toarray", "block_size": "np.ceil", "mask": "np.arange", "iMat": "np.abs", "jMat": "np.argmax"}}, "_spectral_clustering": {"doc": {"short_description": "This method performs the spectral clustering on the affinity matrix W.", "args": {"W": {"description": "Affinity matrix"}, "n_clusters": {"description": "Desired number of clusters"}, "max_iter": {"description": "The maximum number of iterations of kMeans algorithm"}, "n_init": {"description": "The number of times kMeans algorithm should run"}}, "returns": {"description": "Returns the cluster assignments as per the spectral clustering algorithm", "is_generator": false}}, "args": ["W", "n_clusters", "max_iter", "n_init"], "returns": [["labels"]], "min_max_lineno": {"min_lineno": 111, "max_lineno": 132}, "calls": ["numpy.diag", "numpy.linalg.svd", "numpy.sqrt", "sklearn.cluster.KMeans().fit", "sklearn.cluster.KMeans().fit.labels_.reshape", "numpy.identity", "numpy.matmul", "numpy.sum", "numpy.sqrt", "numpy.matmul", "numpy.square", "sklearn.cluster.KMeans", "numpy.sum"], "store_vars_calls": {"dn": "np.diag", "normN": "np.sqrt", "l": "KMeans().fit", "labels": "l.labels_.reshape"}}, "produce": {"doc": {"long_description": "1) Gets the SSC-OMP representation\n  2) Uses the SSC-OMP representation to generate Affinity matrix\n  3) Use spectral clustering to assign labels", "short_description": "This method performs the following steps:", "args": {"inputs": {"description": "A NxD numpy array of input features"}, "timeout": {"description": "This parameter serves as a way for caller to guide the length of the process"}, "iterations": {"description": "This parameter serves as a way for caller to guide the length of the process"}}, "returns": {"description": "labels: A numpy array with label assignment for each data point", "is_generator": false}, "raises": {"0": {"description": "TimeoutError: if the time taken for ssc_omp fitting is more than the timeout parameter"}}}, "args": ["self", "inputs", "timeout", "iterations"], "returns": [["labels"]], "min_max_lineno": {"min_lineno": 133, "max_lineno": 166}, "calls": ["isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "stopit.ThreadingTimeout", "ssc_omp.SSC_OMP._OMPMatFunction", "numpy.fill_diagonal", "ssc_omp.SSC_OMP._spectral_clustering", "spider.clustering.TimeoutError", "numpy.abs", "numpy.abs"], "store_vars_calls": {"R": "SSC_OMP._OMPMatFunction", "labels": "SSC_OMP._spectral_clustering"}}}}}, "body": {"calls": ["NamedTuple"], "store_vars_calls": {"Params": "NamedTuple"}}, "is_test": false}