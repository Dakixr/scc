{"file": {"path": "/Users/dakixr/Desktop/github/scc/tmp-data/metadata/KnowledgeCaptureAndDiscoveryANDmintproject/P4ML-UI/spider/spider/featurization/audio_featurization/utils.py", "fileNameBase": "utils", "extension": "py", "doc": {"short_description": "Short-time audio featurization utilities from the PyAudioAnalysis library ", "full": "Short-time audio featurization utilities from the PyAudioAnalysis library "}}, "dependencies": [{"import": "numpy", "alias": "np", "type": "external"}, {"import": "os", "type": "external"}, {"from_module": "scipy.fftpack", "import": "fft", "type": "external"}, {"from_module": "scipy.fftpack.realtransforms", "import": "dct", "type": "external"}], "functions": {"stZCR": {"doc": {"short_description": "Computes zero crossing rate of frame"}, "args": ["frame"], "min_max_lineno": {"min_lineno": 14, "max_lineno": 19}, "calls": ["len", "numpy.sum", "numpy.float64", "numpy.float64", "numpy.abs", "numpy.diff", "numpy.sign"], "store_vars_calls": {"count": "len"}}, "stEnergy": {"doc": {"short_description": "Computes signal energy of frame"}, "args": ["frame"], "min_max_lineno": {"min_lineno": 21, "max_lineno": 24}, "calls": ["numpy.sum", "numpy.float64", "len"]}, "stEnergyEntropy": {"doc": {"short_description": "Computes entropy of energy"}, "args": ["frame", "numOfShortBlocks"], "returns": [["Entropy"]], "min_max_lineno": {"min_lineno": 26, "max_lineno": 42}, "calls": ["numpy.sum", "len", "int", "frame.reshape().copy", "numpy.floor", "numpy.sum", "numpy.sum", "frame.reshape", "numpy.log2"], "store_vars_calls": {"Eol": "np.sum", "L": "len", "subWinLength": "int", "subWindows": "frame.reshape().copy"}}, "stSpectralCentroidAndSpread": {"doc": {"short_description": "Computes spectral centroid of frame (given abs(FFT))"}, "args": ["X", "fs"], "returns": [["C", "S"]], "min_max_lineno": {"min_lineno": 46, "max_lineno": 66}, "calls": ["X.copy", "numpy.sum", "numpy.sqrt", "numpy.arange", "X.copy.max", "numpy.sum", "numpy.sum", "len", "len"], "store_vars_calls": {"Xt": "X.copy", "NUM": "np.sum", "S": "np.sqrt"}}, "stSpectralEntropy": {"doc": {"short_description": "Computes the spectral entropy"}, "args": ["X", "numOfShortBlocks"], "returns": [["En"]], "min_max_lineno": {"min_lineno": 68, "max_lineno": 82}, "calls": ["len", "numpy.sum", "int", "X.reshape().copy", "numpy.floor", "numpy.sum", "numpy.sum", "X.reshape", "numpy.log2"], "store_vars_calls": {"L": "len", "Eol": "np.sum", "subWinLength": "int", "subWindows": "X.reshape().copy"}}, "stSpectralFlux": {"doc": {"long_description": "ARGUMENTS:\n    X:        the abs(fft) of the current frame\n    Xpre:        the abs(fft) of the previous frame", "short_description": "Computes the spectral flux feature of the current frame"}, "args": ["X", "Xprev"], "returns": [["F"]], "min_max_lineno": {"min_lineno": 84, "max_lineno": 97}, "calls": ["numpy.sum", "numpy.sum", "numpy.sum"], "store_vars_calls": {"sumX": "np.sum", "sumPrevX": "np.sum", "F": "np.sum"}}, "stSpectralRollOff": {"doc": {"short_description": "Computes spectral roll-off"}, "args": ["X", "c", "fs"], "returns": [["mC"]], "min_max_lineno": {"min_lineno": 99, "max_lineno": 112}, "calls": ["numpy.sum", "len", "numpy.nonzero", "numpy.cumsum", "len", "numpy.float64", "float"], "store_vars_calls": {"totalEnergy": "np.sum", "fftLength": "len"}}, "stHarmonic": {"doc": {"short_description": "Computes harmonic ratio and pitch"}, "args": ["frame", "fs"], "returns": [["HR", "f0"]], "min_max_lineno": {"min_lineno": 114, "max_lineno": 160}, "calls": ["numpy.correlate", "numpy.nonzero", "numpy.zeros", "numpy.cumsum", "utils.stZCR", "numpy.round", "numpy.diff", "len", "len", "len", "len", "numpy.sign", "len", "len", "numpy.sqrt", "len", "numpy.zeros", "numpy.max", "numpy.argmax"], "store_vars_calls": {"R": "np.correlate", "Gamma": "np.zeros", "CSum": "np.cumsum", "ZCR": "stZCR", "HR": "np.max", "blag": "np.argmax"}}, "mfccInitFilterBanks": {"doc": {"long_description": "This function is taken from the scikits.talkbox library (MIT Licence):\nhttps://pypi.python.org/pypi/scikits.talkbox", "short_description": "Computes the triangular filterbank for MFCC computation (used in the stFeatureExtraction function before the stMFCC function call)"}, "args": ["fs", "nfft"], "returns": [["fbank", "freqs"]], "min_max_lineno": {"min_lineno": 162, "max_lineno": 205}, "calls": ["numpy.zeros", "numpy.zeros", "range", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.floor", "numpy.floor", "numpy.floor", "numpy.floor"], "store_vars_calls": {"freqs": "np.zeros", "fbank": "np.zeros", "lid": "np.arange", "rid": "np.arange"}}, "stMFCC": {"doc": {"long_description": "ARGUMENTS:\n    X:        fft magnitude abs(FFT)\n    fbank:    filter bank (see mfccInitFilterBanks)\nRETURN\n    ceps:     MFCCs (13 element vector)\nNote:    MFCC calculation is, in general, taken from the scikits.talkbox library (MIT Licence),\n#    with a small number of modifications to make it more compact and suitable for the pyAudioAnalysis Lib", "short_description": "Computes the MFCCs of a frame, given the fft mag"}, "args": ["X", "fbank", "nceps"], "returns": [["ceps"]], "min_max_lineno": {"min_lineno": 207, "max_lineno": 222}, "calls": ["numpy.log10", "scipy.fftpack.realtransforms.dct", "numpy.dot"], "store_vars_calls": {"mspec": "np.log10"}}, "stChromaFeaturesInit": {"doc": {"short_description": "This function initializes the chroma matrices used in the calculation of the chroma features"}, "args": ["nfft", "fs"], "returns": [["nChroma", "nFreqsPerChroma"]], "min_max_lineno": {"min_lineno": 224, "max_lineno": 241}, "calls": ["numpy.array", "numpy.round().astype", "numpy.zeros", "numpy.unique", "numpy.nonzero", "numpy.round", "range", "numpy.log2"], "store_vars_calls": {"freqs": "np.array", "nChroma": "np.round().astype", "nFreqsPerChroma": "np.zeros", "uChroma": "np.unique", "idx": "np.nonzero"}}, "stChromaFeatures": {"args": ["X", "fs", "nChroma", "nFreqsPerChroma"], "returns": [["chromaNames", "finalC"]], "min_max_lineno": {"min_lineno": 243, "max_lineno": 266}, "calls": ["numpy.zeros", "int", "numpy.zeros", "C2.reshape.reshape", "spec.sum", "nChroma.max", "numpy.zeros", "numpy.zeros", "int", "numpy.matrix", "numpy.ceil", "numpy.sum", "numpy.nonzero"], "store_vars_calls": {"finalC": "np.zeros", "newD": "int", "C2": "C2.reshape", "C": "np.zeros"}}, "audio_feature_extraction": {"doc": {"long_description": "This results to a sequence of feature vectors, stored in a np matrix.\nARGUMENTS\n    signal:       the input signal samples\n    Fs:           the sampling freq (in Hz)\n    Win:          the short-term window size (in samples)\n    Step:         the short-term window step (in samples)\nRETURNS\n    stFeatures:   a np array (numOfFeatures x numOfShortTermWindows)", "short_description": "This function implements the shor-term windowing process. For each short-term window a set of features is extracted."}, "args": ["signal", "Fs", "Win", "Step"], "returns": [["stFeatures"]], "min_max_lineno": {"min_lineno": 270, "max_lineno": 337}, "calls": ["int", "int", "numpy.double", "np.double.mean", "numpy.abs().max", "len", "int", "utils.mfccInitFilterBanks", "utils.stChromaFeaturesInit", "numpy.concatenate", "abs", "numpy.zeros", "utils.stZCR", "utils.stEnergy", "utils.stEnergyEntropy", "utils.stSpectralCentroidAndSpread", "utils.stSpectralEntropy", "utils.stSpectralFlux", "utils.stSpectralRollOff", "stMFCC().copy", "utils.stChromaFeatures", "chromaF.std", "np.concatenate.append", "abs.copy", "numpy.abs", "scipy.fftpack.fft", "len", "abs.copy", "utils.stMFCC"], "store_vars_calls": {"Win": "int", "Step": "int", "signal": "np.double", "DC": "signal.mean", "MAX": "np.abs().max", "N": "len", "nFFT": "int", "stFeatures": "np.concatenate", "X": "abs", "curFV": "np.zeros", "Xprev": "X.copy"}}}, "is_test": false}