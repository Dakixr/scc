{"file": {"path": "/Users/dakixr/Desktop/github/scc/tmp-data/metadata/KnowledgeCaptureAndDiscoveryANDmintproject/byod-cleaning-api/kbclean/recommendation/active.py", "fileNameBase": "active", "extension": "py"}, "dependencies": [{"import": "functools", "type": "external"}, {"import": "itertools", "type": "external"}, {"from_module": "abc", "import": "ABCMeta", "type": "external"}, {"from_module": "abc", "import": "abstractmethod", "type": "external"}, {"from_module": "collections", "import": "defaultdict", "type": "external"}, {"from_module": "kbclean.utils.data.readers", "import": "RowBasedValue", "type": "external"}, {"import": "nltk", "type": "external"}, {"import": "numpy", "alias": "np", "type": "external"}, {"import": "pandas", "alias": "pd", "type": "external"}, {"from_module": "kbclean.utils.data.helpers", "import": "str2regex", "type": "external"}, {"from_module": "kbclean.utils.features.attribute", "import": "xngrams", "type": "external"}, {"from_module": "kbclean.utils.search.query", "import": "ESQuery", "type": "external"}, {"from_module": "loguru", "import": "logger", "type": "external"}, {"from_module": "metal.label_model", "import": "LabelModel", "type": "external"}, {"from_module": "metal.end_model", "import": "EndModel", "type": "external"}], "classes": {"BestValuePicker": {"min_max_lineno": {"min_lineno": 89, "max_lineno": 105}, "methods": {"fit": {"args": ["self", "row_values"], "min_max_lineno": {"min_lineno": 90, "max_lineno": 93}}, "predict": {"args": ["self", "row_values", "scores"], "min_max_lineno": {"min_lineno": 94, "max_lineno": 97}}, "fit_predict": {"args": ["self", "row_values", "scores"], "min_max_lineno": {"min_lineno": 98, "max_lineno": 102}, "calls": ["active.BestValuePicker.fit", "active.BestValuePicker.predict"]}, "reverse_predict": {"args": ["row_values", "scores"], "min_max_lineno": {"min_lineno": 103, "max_lineno": 105}}}}, "MinValue": {"extend": ["BestValuePicker"], "min_max_lineno": {"min_lineno": 107, "max_lineno": 135}, "methods": {"__init__": {"args": ["self", "es_query", "func"], "min_max_lineno": {"min_lineno": 108, "max_lineno": 112}}, "call_func": {"args": ["self", "raw_df"], "min_max_lineno": {"min_lineno": 113, "max_lineno": 115}, "calls": ["raw_df.applymap", "active.MinValue.func"]}, "fit": {"args": ["self", "row_values"], "min_max_lineno": {"min_lineno": 116, "max_lineno": 121}, "calls": ["zip", "active.MinValue.func"]}, "predict": {"args": ["self", "row_values", "scores"], "min_max_lineno": {"min_lineno": 123, "max_lineno": 129}, "calls": ["list", "map", "numpy.argmin", "numpy.min", "numpy.mean"], "store_vars_calls": {"counts": "list"}}, "reverse_predict": {"args": ["self", "row_values", "scores"], "min_max_lineno": {"min_lineno": 131, "max_lineno": 135}, "calls": ["list", "map", "numpy.argsort", "int", "len"], "store_vars_calls": {"counts": "list"}}}}, "MaxProb": {"extend": ["BestValuePicker"], "min_max_lineno": {"min_lineno": 137, "max_lineno": 184}, "methods": {"__init__": {"args": ["self", "func"], "min_max_lineno": {"min_lineno": 138, "max_lineno": 142}, "calls": ["collections.defaultdict", "collections.defaultdict"], "store_vars_calls": {"self.bigram2prob": "defaultdict", "self.unigram2prob": "defaultdict"}}, "add_end": {"args": ["self", "value"], "returns": [["value"]], "min_max_lineno": {"min_lineno": 143, "max_lineno": 149}, "calls": ["list", "list", "active.MaxProb.func"]}, "fit": {"args": ["self", "values"], "min_max_lineno": {"min_lineno": 150, "max_lineno": 158}, "calls": ["active.MaxProb.add_end", "range", "len"], "store_vars_calls": {"value": "self.add_end"}}, "sentence_probability": {"args": ["self", "value"], "returns": [["prob"]], "min_max_lineno": {"min_lineno": 159, "max_lineno": 171}, "calls": ["active.MaxProb.add_end", "range", "len"], "store_vars_calls": {"value": "self.add_end"}}, "predict": {"args": ["self", "row_values", "scores"], "min_max_lineno": {"min_lineno": 172, "max_lineno": 178}, "calls": ["list", "map", "numpy.argmin", "numpy.min", "numpy.mean", "active.MaxProb.sentence_probability"], "store_vars_calls": {"counts": "list"}}, "reverse_predict": {"args": ["self", "row_values", "scores"], "min_max_lineno": {"min_lineno": 180, "max_lineno": 184}, "calls": ["list", "map", "numpy.argsort", "active.MaxProb.sentence_probability", "int", "len"], "store_vars_calls": {"counts": "list"}}}}, "MinCoValue": {"extend": ["BestValuePicker"], "min_max_lineno": {"min_lineno": 186, "max_lineno": 218}, "methods": {"__init__": {"args": ["self"], "min_max_lineno": {"min_lineno": 187, "max_lineno": 190}, "calls": ["collections.defaultdict", "collections.defaultdict", "collections.defaultdict"], "store_vars_calls": {"self.covalue2count": "defaultdict", "self.value2count": "defaultdict"}}, "fit": {"args": ["self", "row_values"], "min_max_lineno": {"min_lineno": 191, "max_lineno": 196}, "calls": ["row_value.row_dict.items"]}, "predict": {"args": ["self", "row_values", "scores"], "min_max_lineno": {"min_lineno": 197, "max_lineno": 207}, "calls": ["list", "map", "numpy.argmin", "numpy.min", "min", "list", "active.MinCoValue.covalue2count[].values"], "store_vars_calls": {"probs": "list"}}, "reverse_predict": {"args": ["self", "row_values", "scores"], "min_max_lineno": {"min_lineno": 208, "max_lineno": 218}, "calls": ["list", "map", "numpy.argsort", "int", "min", "list", "len", "active.MinCoValue.covalue2count[].values"], "store_vars_calls": {"probs": "list"}}}}, "MaxAmbiguous": {"extend": ["BestValuePicker"], "min_max_lineno": {"min_lineno": 220, "max_lineno": 238}, "methods": {"fit": {"args": ["self", "row_values"], "min_max_lineno": {"min_lineno": 221, "max_lineno": 223}}, "predict": {"args": ["self", "row_values", "scores"], "min_max_lineno": {"min_lineno": 224, "max_lineno": 230}, "calls": ["numpy.abs", "numpy.argmin", "numpy.min", "float", "numpy.asfarray"], "store_vars_calls": {"score_arr": "np.abs"}}, "reverse_predict": {"args": ["self", "row_values", "scores"], "min_max_lineno": {"min_lineno": 231, "max_lineno": 238}, "calls": ["numpy.abs", "numpy.argsort", "float", "numpy.asfarray", "int", "len"], "store_vars_calls": {"score_arr": "np.abs"}}}}, "ActiveLearner": {"min_max_lineno": {"min_lineno": 240, "max_lineno": 384}, "methods": {"__init__": {"args": ["self", "raw_df", "cleaned_df", "hparams"], "min_max_lineno": {"min_lineno": 241, "max_lineno": 289}, "calls": ["raw_df.to_dict", "cleaned_df.to_dict", "kbclean.utils.search.query.ESQuery.get_instance", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "kbclean.utils.data.readers.RowBasedValue", "kbclean.utils.data.readers.RowBasedValue", "active.MinValue", "active.MinValue", "active.MinValue", "active.MaxProb", "active.MaxProb", "active.ActiveLearner.raw_col2values.keys", "zip", "zip", "functools.partial", "active.ActiveLearner.raw_df[].values.tolist", "active.ActiveLearner.cleaned_df[].values.tolist"], "store_vars_calls": {"self.raw_records": "raw_df.to_dict", "self.cleaned_records": "cleaned_df.to_dict", "self.es_query": "ESQuery.get_instance", "self.col2examples": "defaultdict", "self.col2chosen_criteria": "defaultdict", "self.col2positive_criteria": "defaultdict"}}, "most_positives": {"args": ["self", "row_values", "scores"], "returns": [["row_values"]], "min_max_lineno": {"min_lineno": 290, "max_lineno": 309}, "calls": ["positive_lists.append", "final_indices.union.union.union", "set", "[].reverse_predict"], "store_vars_calls": {"final_indices": "final_indices.union"}}, "next": {"args": ["self", "i", "col", "score_df"], "returns": [["best_col"], ["best_col"], ["best_col"]], "min_max_lineno": {"min_lineno": 310, "max_lineno": 372}, "calls": ["float", "active.ActiveLearner.col2criteria[].items", "loguru.logger.debug", "len", "len", "[].tolist", "reversed", "active.ActiveLearner.col2chosen_criteria[].append", "criterion.fit_predict", "criterion.predict", "loguru.logger.debug", "active.ActiveLearner.raw_col2values[].pop", "active.ActiveLearner.cleaned_col2values[].pop", "active.ActiveLearner.col2positive_criteria[].append", "str", "numpy.where", "numpy.asarray"], "store_vars_calls": {"best_score": "float", "indices": "[].tolist"}}, "update": {"args": ["self", "i", "col", "scores"], "min_max_lineno": {"min_lineno": 373, "max_lineno": 384}, "calls": ["range", "active.ActiveLearner.next", "loguru.logger.debug", "active.ActiveLearner.col2examples[].append", "loguru.logger.debug"], "store_vars_calls": {"result": "self.next"}}}}, "MetalLeaner": {"extend": ["ActiveLearner"], "min_max_lineno": {"min_lineno": 387, "max_lineno": 454}, "methods": {"__init__": {"args": ["self"], "min_max_lineno": {"min_lineno": 388, "max_lineno": 391}, "calls": ["metal.label_model.LabelModel", "metal.end_model.EndModel"], "store_vars_calls": {"self.label_model": "LabelModel", "self.end_model": "EndModel"}}, "next": {"args": ["self", "i", "col", "score_df"], "returns": [["best_col"], ["best_col"], ["best_col"]], "min_max_lineno": {"min_lineno": 392, "max_lineno": 454}, "calls": ["float", "active.MetalLeaner.col2criteria[].items", "loguru.logger.debug", "len", "len", "[].tolist", "reversed", "active.MetalLeaner.col2chosen_criteria[].append", "criterion.fit_predict", "criterion.predict", "loguru.logger.debug", "active.MetalLeaner.raw_col2values[].pop", "active.MetalLeaner.cleaned_col2values[].pop", "active.MetalLeaner.col2positive_criteria[].append", "str", "numpy.where", "numpy.asarray"], "store_vars_calls": {"best_score": "float", "indices": "[].tolist"}}}}}, "functions": {"min_ngram_counts": {"args": ["es_query", "values"], "min_max_lineno": {"min_lineno": 19, "max_lineno": 36}, "calls": ["list", "es_query.get_char_ngram_counts", "itertools.chain.from_iterable", "min", "zip", "kbclean.utils.features.attribute.xngrams", "list", "kbclean.utils.features.attribute.xngrams", "list"], "store_vars_calls": {"trigrams": "list", "counts": "es_query.get_char_ngram_counts"}}, "min_sym_ngram_counts": {"args": ["es_query", "values"], "min_max_lineno": {"min_lineno": 39, "max_lineno": 60}, "calls": ["list", "es_query.get_char_ngram_counts", "kbclean.utils.data.helpers.str2regex", "itertools.chain.from_iterable", "min", "zip", "kbclean.utils.features.attribute.xngrams", "list", "kbclean.utils.features.attribute.xngrams", "list"], "store_vars_calls": {"trigrams": "list", "counts": "es_query.get_char_ngram_counts"}}, "min_tok_ngram_counts": {"args": ["es_query", "values"], "min_max_lineno": {"min_lineno": 63, "max_lineno": 86}, "calls": ["list", "es_query.get_tok_ngram_counts", "itertools.chain.from_iterable", "min", "zip", "kbclean.utils.features.attribute.xngrams", "nltk.wordpunct_tokenize", "kbclean.utils.features.attribute.xngrams", "nltk.wordpunct_tokenize"], "store_vars_calls": {"trigrams": "list", "counts": "es_query.get_tok_ngram_counts"}}}, "is_test": false}