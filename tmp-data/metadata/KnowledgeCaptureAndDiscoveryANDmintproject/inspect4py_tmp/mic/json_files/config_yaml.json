{"file": {"path": "/Users/dakixr/Desktop/github/scc/tmp-data/metadata/KnowledgeCaptureAndDiscoveryANDmintproject/mic/src/mic/config_yaml.py", "fileNameBase": "config_yaml", "extension": "py"}, "dependencies": [{"import": "re", "type": "external"}, {"import": "unicodedata", "type": "external"}, {"from_module": "pathlib", "import": "Path", "type": "external"}, {"from_module": "typing", "import": "List", "type": "external"}, {"import": "logging", "type": "external"}, {"import": "click", "type": "external"}, {"import": "yaml", "type": "external"}, {"from_module": "mic._utils", "import": "log_variable", "type": "external"}, {"from_module": "mic._utils", "import": "get_mic_logger", "type": "external"}], "functions": {"slugify": {"doc": {"long_description": "Remove characters that aren't alphanumerics, underscores, or hyphens.\nConvert to lowercase. Also strip leading and trailing whitespace.", "short_description": "Convert to ASCII if 'allow_unicode' is False. Convert spaces to hyphens."}, "args": ["value", "allow_unicode"], "min_max_lineno": {"min_lineno": 18, "max_lineno": 31}, "calls": ["str", "re.sub().strip", "re.sub", "unicodedata.normalize", "unicodedata.normalize().encode().decode", "re.sub", "unicodedata.normalize().encode", "unicodedata.normalize().encode().decode.lower", "unicodedata.normalize"], "store_vars_calls": {"value": "unicodedata.normalize().encode().decode"}}, "create_config_file_yaml": {"args": ["model_path", "name"], "returns": [["config_yaml_path"]], "min_max_lineno": {"min_lineno": 33, "max_lineno": 48}, "calls": ["click.secho", "config_yaml_path.exists", "config_yaml.write_step", "model_path.exists", "click.secho", "exit", "config_yaml.get_spec"], "store_vars_calls": {"spec": "get_spec"}}, "get_spec": {"args": ["config_yaml_path"], "returns": [["spec"]], "min_max_lineno": {"min_lineno": 50, "max_lineno": 53}, "calls": ["yaml.load", "config_yaml_path.open"], "store_vars_calls": {"spec": "yaml.load"}}, "get_key_spec": {"args": ["config_yaml_path", "key"], "min_max_lineno": {"min_lineno": 55, "max_lineno": 60}, "calls": ["yaml.load", "config_yaml_path.open"], "store_vars_calls": {"spec": "yaml.load"}}, "write_spec": {"args": ["config_yaml_path", "key", "value"], "min_max_lineno": {"min_lineno": 62, "max_lineno": 67}, "calls": ["yaml.load", "logging.debug", "config_yaml.write_to_yaml", "config_yaml_path.open", "str"], "store_vars_calls": {"spec": "yaml.load"}}, "write_step": {"args": ["config_yaml_path", "spec", "step"], "min_max_lineno": {"min_lineno": 69, "max_lineno": 72}, "calls": ["config_yaml.write_to_yaml"]}, "write_to_yaml": {"doc": {"long_description": "@param config_yaml_path: path\n@param spec: data for yaml", "short_description": "This function makes sure that the comments get saved when writing new data to the yaml file"}, "args": ["config_yaml_path", "spec"], "min_max_lineno": {"min_lineno": 74, "max_lineno": 94}, "calls": ["config_yaml_path.exists", "config_yaml.get_comment_list", "open", "yaml.dump", "config_yaml.add_comment_by_line"], "store_vars_calls": {"comments": "get_comment_list"}}, "get_comment_list": {"doc": {"long_description": "the yaml\n@param config_yaml_path: path to yaml\n@type config_yaml_path: Path\n@return: list", "short_description": "Return list of all the yaml values that have comments. This is needed becasue yaml.dump will erase any comments in"}, "args": ["config_yaml_path"], "returns": [["all_comments"]], "min_max_lineno": {"min_lineno": 96, "max_lineno": 127}, "calls": ["open", "line.split", "line.split", "line.split.pop", "all_comments.append"], "store_vars_calls": {"curr_comment": "line.split"}}, "add_comment_by_line": {"doc": {"long_description": "@param config_yaml_path: path\n@param line_number: line number comment is on\n@param insert_new_line: If the comment was on a line without a value. Added comment needs to insert on new line\n@param comment: comment to append\n@return:", "short_description": "Adds comment to yaml file from line number"}, "args": ["config_yaml_path", "line_number", "insert_new_line", "comment"], "min_max_lineno": {"min_lineno": 129, "max_lineno": 161}, "calls": ["open", "open", "file.writelines", "new_file.append", "new_file.append", "new_file.append", "new_file.append", "new_file.append", "line.replace"]}, "add_comment": {"doc": {"long_description": "the yaml file and looks for the value given, then appends a comment to the end\n@param config_yaml_path:\n@type config_yaml_path: Path\n@param value: name of field to append comment to\n@type value: str\n@param comment: comment to append\n@type comment: str", "short_description": "yaml does not natively support comments, so this workaround has to be implemented. This function reads through"}, "args": ["config_yaml_path", "value", "comment"], "min_max_lineno": {"min_lineno": 163, "max_lineno": 190}, "calls": ["open", "open", "file.writelines", "new_file.append", "new_file.append", "new_file.append"]}, "add_outputs": {"args": ["config_yaml_path", "outputs"], "min_max_lineno": {"min_lineno": 192, "max_lineno": 206}, "calls": ["yaml.load", "config_yaml_path.open", "config_yaml.slugify", "config_yaml.write_to_yaml", "config_yaml.add_comment", "click.secho", "str().replace", "str", "click.secho", "str"], "store_vars_calls": {"spec": "yaml.load", "name": "slugify"}}, "add_params_from_config": {"doc": {"long_description": "adds the var_name as parameter to yaml\n\n@param yaml_path: path to mic.yaml file\n@type yaml_path: Path\n@param config_path: path to user's config file\n@type config_path: Path", "short_description": "Add parameters to the mic.yaml file from the user's config file. Looks for ${var_name} in config file and"}, "args": ["yaml_path", "config_path"], "min_max_lineno": {"min_lineno": 207, "max_lineno": 269}, "calls": ["yaml.load", "yaml_path.open", "open", "f.readlines", "config_yaml.write_spec", "click.secho", "pathlib.Path", "config_yaml.add_comment", "config_yaml.add_comment", "var_list.append", "mic_yaml[].update", "click.secho", "logging.info", "line.find", "line.find"], "store_vars_calls": {"mic_yaml": "yaml.load", "file": "f.readlines"}}, "get_inputs_parameters": {"args": ["config_yaml_path"], "returns": [["inputs", "parameters", "outputs", "configs"]], "min_max_lineno": {"min_lineno": 270, "max_lineno": 276}, "calls": ["config_yaml.get_inputs", "config_yaml.get_parameters", "config_yaml.get_outputs_mic", "config_yaml.get_configs"], "store_vars_calls": {"inputs": "get_inputs", "parameters": "get_parameters", "outputs": "get_outputs_mic", "configs": "get_configs"}}, "get_inputs": {"args": ["config_yaml_path"], "returns": [["inputs"]], "min_max_lineno": {"min_lineno": 278, "max_lineno": 282}, "calls": ["yaml.load", "config_yaml_path.open"], "store_vars_calls": {"spec": "yaml.load"}}, "get_outputs_mic": {"args": ["config_yaml_path"], "returns": [["outputs"]], "min_max_lineno": {"min_lineno": 284, "max_lineno": 288}, "calls": ["yaml.load", "config_yaml_path.open"], "store_vars_calls": {"spec": "yaml.load"}}, "get_parameters": {"args": ["config_yaml_path"], "returns": [["parameters"]], "min_max_lineno": {"min_lineno": 290, "max_lineno": 294}, "calls": ["yaml.load", "config_yaml_path.open"], "store_vars_calls": {"spec": "yaml.load"}}, "get_configs": {"args": ["config_yaml_path"], "returns": [["configs"]], "min_max_lineno": {"min_lineno": 296, "max_lineno": 300}, "calls": ["yaml.load", "config_yaml_path.open"], "store_vars_calls": {"spec": "yaml.load"}}, "get_framework": {"args": ["config_yaml_path"], "returns": [["framework"]], "min_max_lineno": {"min_lineno": 301, "max_lineno": 305}, "calls": ["yaml.load", "config_yaml_path.open"], "store_vars_calls": {"spec": "yaml.load"}}, "get_code": {"args": ["config_yaml_path"], "returns": [["code"]], "min_max_lineno": {"min_lineno": 306, "max_lineno": 310}, "calls": ["yaml.load", "config_yaml_path.open"], "store_vars_calls": {"spec": "yaml.load"}}}, "body": {"calls": ["mic._utils.get_mic_logger"], "store_vars_calls": {"logging": "get_mic_logger"}}, "is_test": false}