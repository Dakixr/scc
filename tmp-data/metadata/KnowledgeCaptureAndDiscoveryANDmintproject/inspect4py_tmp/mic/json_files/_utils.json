{"file": {"path": "/Users/dakixr/Desktop/github/scc/tmp-data/metadata/KnowledgeCaptureAndDiscoveryANDmintproject/mic/src/mic/_utils.py", "fileNameBase": "_utils", "extension": "py"}, "dependencies": [{"import": "logging", "type": "external"}, {"import": "os", "type": "external"}, {"import": "platform", "type": "external"}, {"import": "re", "type": "external"}, {"from_module": "pathlib", "import": "Path", "type": "external"}, {"import": "click", "type": "external"}, {"import": "requests", "type": "external"}, {"import": "validators", "type": "external"}, {"from_module": "requests.auth", "import": "HTTPBasicAuth", "type": "external"}, {"import": "mic", "type": "external"}, {"from_module": "mic.constants", "import": "CONFIG_YAML_NAME", "type": "external"}, {"from_module": "mic.constants", "import": "DIRECTORIES_TO_IGNORE", "type": "external"}, {"from_module": "mic.constants", "import": "LOG_FILE", "type": "external"}, {"from_module": "mic.constants", "import": "MIC_DIR", "type": "external"}], "functions": {"obtain_id": {"args": ["url"], "min_max_lineno": {"min_lineno": 19, "max_lineno": 22}, "calls": ["validators.url", "url.split"]}, "first_line_new": {"args": ["resource", "i"], "min_max_lineno": {"min_lineno": 24, "max_lineno": 27}, "calls": ["click.echo", "click.echo"]}, "get_filepaths": {"doc": {"long_description": "tree by walking the tree either top-down or bottom-up. For each\ndirectory in the tree rooted at directory top (including top itself),\nit yields a 3-tuple (dirpath, dirnames, filenames).", "short_description": "This function will generate the file names in a directory"}, "args": ["directory"], "returns": [["file_paths"]], "min_max_lineno": {"min_lineno": 30, "max_lineno": 47}, "calls": ["os.walk", "os.path.join", "file_paths.append"], "store_vars_calls": {"filepath": "os.path.join"}}, "make_log_file": {"min_max_lineno": {"min_lineno": 48, "max_lineno": 63}, "calls": ["os.path.exists", "_utils.init_logger", "pathlib.Path", "os.path.exists", "os.mkdir", "os.path.exists", "click.secho", "pathlib.Path", "open", "pathlib.Path", "pathlib.Path"]}, "log_system_info": {"args": ["logger"], "min_max_lineno": {"min_lineno": 64, "max_lineno": 80}, "calls": ["logging.getLogger", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "platform.system", "logging.getLogger.warning", "platform.version", "platform.release", "platform.platform"], "store_vars_calls": {"log": "logging.getLogger"}}, "log_variable": {"doc": {"long_description": "descriptive name", "short_description": "Given a logger log a debug variable, logs variable's content and type. Optional: enter name field to give a", "returns": {"is_generator": false}}, "args": ["logger", "var", "name"], "min_max_lineno": {"min_lineno": 81, "max_lineno": 91}, "calls": ["logger.debug", "type"]}, "log_command": {"doc": {"long_description": "Ex: log_command(logging, \"start\", name=\"name\", image=\"image\")", "short_description": "List the current command, enter option variables of command as kwargs to display what the inputs are.", "returns": {"is_generator": false}}, "args": ["logger", "command_name"], "min_max_lineno": {"min_lineno": 92, "max_lineno": 110}, "calls": ["logger.info", "len", "kwargs.items", "logger.info", "logger.info", "type"]}, "get_mic_logger": {"min_max_lineno": {"min_lineno": 111, "max_lineno": 113}, "calls": ["logging.getLogger"]}, "init_logger": {"min_max_lineno": {"min_lineno": 115, "max_lineno": 132}, "calls": ["logging.getLogger", "os.path.exists", "logging.Formatter", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "logging.getLogger.setLevel", "logging.FileHandler", "os.path.exists", "logging.getLogger.removeHandler", "pathlib.Path", "logging.FileHandler", "logging.StreamHandler", "pathlib.Path"], "store_vars_calls": {"logger": "logging.getLogger", "formatter": "logging.Formatter", "handler": "logging.StreamHandler"}}, "get_latest_version": {"min_max_lineno": {"min_lineno": 133, "max_lineno": 138}, "calls": ["requests.get().json", "requests.get"]}, "check_mic_path": {"args": ["mic_dir"], "returns": [["mic_dir"], ["mic_file"]], "min_max_lineno": {"min_lineno": 140, "max_lineno": 151}, "calls": ["_utils.recursive_mic_search", "os.getcwd", "click.secho", "exit", "click.echo"], "store_vars_calls": {"mic_file": "recursive_mic_search"}}, "recursive_mic_search": {"doc": {"short_description": "Recursively search for mic.yaml (CONFIG_YAML_NAME) down from the current dir. Return path if fount else return None", "returns": {"type_name": "abs_path_to_mic", "is_generator": false}}, "args": ["curr_dir"], "returns": [["next"]], "min_max_lineno": {"min_lineno": 153, "max_lineno": 177}, "calls": ["os.listdir", "os.listdir", "os.path.join", "os.path.join", "os.path.isdir", "os.path.isdir", "_utils.recursive_mic_search", "os.path.abspath", "os.path.abspath", "os.path.join.split", "os.path.join"], "store_vars_calls": {"file": "os.path.join", "next": "recursive_mic_search"}}, "find_dir": {"args": ["name", "path"], "returns": [["root"]], "min_max_lineno": {"min_lineno": 178, "max_lineno": 182}, "calls": ["os.walk", "os.path.basename"]}, "parse": {"args": ["value"], "returns": [["value"]], "min_max_lineno": {"min_lineno": 183, "max_lineno": 188}, "calls": ["int"]}, "upload_code": {"doc": {"short_description": "Upload a file using HTTP and HTTP basic", "args": {"upload_file": {"description": "Path to the file", "type_name": "Path", "is_optional": false}}, "returns": {"description": "[description]", "type_name": "[Response]", "is_generator": false}, "raises": {"0": {"description": "Exit the cli if there a error", "type_name": "SystemExit"}}}, "args": ["upload_file"], "returns": [["r"]], "min_max_lineno": {"min_lineno": 190, "max_lineno": 223}, "calls": ["requests.put.raise_for_status", "open", "requests.put", "logging.error", "exit", "logging.error", "exit", "SystemExit", "requests.auth.HTTPBasicAuth"], "store_vars_calls": {"r": "requests.put"}}, "download": {"doc": {"short_description": "Download file using HTTP", "args": {"url": {"description": "Path to the file", "type_name": "str", "is_optional": false}}, "returns": {"description": "[description]", "type_name": "[Response]", "is_generator": false}, "raises": {"0": {"description": "Exit the cli if there a error", "type_name": "SystemExit"}}}, "args": ["url"], "returns": [["r"]], "min_max_lineno": {"min_lineno": 225, "max_lineno": 251}, "calls": ["requests.get", "requests.get.raise_for_status", "logging.error", "exit", "logging.error", "exit", "SystemExit"], "store_vars_calls": {"r": "requests.get"}}}, "is_test": false}