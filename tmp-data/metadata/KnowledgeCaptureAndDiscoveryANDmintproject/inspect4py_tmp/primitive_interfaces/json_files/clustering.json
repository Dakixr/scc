{"file": {"path": "/Users/dakixr/Desktop/github/scc/tmp-data/metadata/KnowledgeCaptureAndDiscoveryANDmintproject/P4ML-UI/primitive-interfaces/primitive_interfaces/clustering.py", "fileNameBase": "clustering", "extension": "py"}, "dependencies": [{"import": "abc", "type": "external"}, {"import": "typing", "type": "external"}, {"from_module": "d3m_metadata", "import": "types", "type": "external"}, {"from_module": "base", "import": "CallResult", "type": "internal"}, {"from_module": "base", "import": "PrimitiveBaseMeta", "type": "internal"}, {"from_module": "base", "import": "PrimitiveBase", "type": "internal"}, {"from_module": "base", "import": "ContinueFitMixin", "type": "internal"}, {"from_module": "base", "import": "SamplingCompositionalityMixin", "type": "internal"}, {"from_module": "base", "import": "ProbabilisticCompositionalityMixin", "type": "internal"}, {"from_module": "base", "import": "Scores", "type": "internal"}, {"from_module": "base", "import": "Gradients", "type": "internal"}, {"from_module": "base", "import": "GradientCompositionalityMixin", "type": "internal"}, {"from_module": "base", "import": "LossFunctionMixin", "type": "internal"}, {"from_module": "base", "import": "SingletonOutputMixin", "type": "internal"}, {"from_module": "unsupervised_learning", "import": "UnsupervisedLearnerPrimitiveBase", "type": "external"}], "classes": {"ClusteringPrimitiveBase": {"doc": {"short_description": "A base class for primitives implementing a clustering algorithm.", "full": "A base class for primitives implementing a clustering algorithm."}, "min_max_lineno": {"min_lineno": 14, "max_lineno": 22}, "methods": {"produce": {"doc": {"long_description": "A data structure that for each input sample tells to which cluster that sample was assigned to. So ``Outputs``\nshould have the same number of samples than ``Inputs``, and the value at each output sample should represent\na cluster. Consider representing it with just a simple numeric identifier.", "short_description": "``produce`` method should return a membership map.", "args": {"inputs": {"description": "The inputs of shape [num_inputs, ...].", "type_name": "Inputs", "is_optional": false}, "timeout": {"description": "A maximum time this primitive should take to produce outputs during this method call, in seconds.", "type_name": "float", "is_optional": false}, "iterations": {"description": "How many of internal iterations should the primitive do.", "type_name": "int", "is_optional": false}}, "returns": {"description": "The outputs of shape [num_inputs, 1] wrapped inside ``CallResult`` for a simple numeric\ncluster identifier.", "type_name": "CallResult[Outputs]", "is_generator": false}}, "args": ["self"], "min_max_lineno": {"min_lineno": 19, "max_lineno": 22}}}}, "ClusteringDistanceMatrixMixin": {"min_max_lineno": {"min_lineno": 45, "max_lineno": 49}, "methods": {"produce_distance_matrix": {"doc": {"long_description": "that the output is a distance matrix instead of a membership map.", "short_description": "Semantics of this call are the same as the call to a regular ``produce`` method, just", "args": {"inputs": {"description": "The inputs of shape [num_inputs, ...].", "type_name": "Inputs", "is_optional": false}, "timeout": {"description": "A maximum time this primitive should take to produce outputs during this method call, in seconds.", "type_name": "float", "is_optional": false}, "iterations": {"description": "How many of internal iterations should the primitive do.", "type_name": "int", "is_optional": false}}, "returns": {"description": "The distance matrix of shape [num_inputs, num_inputs, ...] wrapped inside ``CallResult``, where (i, j) element\nof the matrix represent a distance between i-th and j-th sample in the inputs.", "type_name": "CallResult[DistanceMatrixOutput]", "is_generator": false}}, "args": ["self"], "min_max_lineno": {"min_lineno": 46, "max_lineno": 49}}}}}, "body": {"calls": ["typing.TypeVar"], "store_vars_calls": {"DistanceMatrixOutput": "typing.TypeVar"}}, "is_test": false}