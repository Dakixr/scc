{"file": {"path": "/Users/dakixr/Desktop/github/scc/tmp-data/metadata/KnowledgeCaptureAndDiscoveryANDmintproject/topoflow36/topoflow/utils/nccs_files.py", "fileNameBase": "nccs_files", "extension": "py", "doc": {"long_description": "=== Set up some parameters ===\n\nDefine the shape of the data cube.\n>>> shape = (4, 5, 3)\n>>> res = (1., 100., 200.)\n\nSet the values of the data cube.\n>>> var = np.random.random (shape)\n\nWrite cubes at these times.\n>>> times = range (5)\n\nThis is the name of the variable that we will read/write.\n>>> var_name = 'grain_size'\n\n\n=== Write a cube ===\n\n>>> import nccs_files\n>>> f = nccs_files.nccs_file ()\n\nOpen the file for writing.\n>>> f.open_new_file ('test_file.nc', shape=shape, res=res,\n...                  dtype='float64',\n...                  var_name=var_name,\n...                  long_name=\"Sediment grain size\",\n...                  units_name=\"phe\",\n...                  comment=\"Cube of sediment grain size\")\nTrue\n\n\nThe name of the file may not be the same as what was specified in the call\nto open_new_file.  If the file already exists, a number will be appended to\nthe file name (before the extension).\n\n>>> file_name = f.file_name\n>>> print file_name # doctest: +ELLIPSIS\ntest_file....nc\n\nWrite the variable\n>>> f.add_cube (var, var_name)\n\nClose the file.\n>>> f.close_file ()\n\n=== Read a cube ===\n\n>>> import nccs_files\n>>> f = nccs_files.nccs_file ()\n>>> f.open_file (file_name)\nTrue\n\nRead variable from file and compare it to what we wrote.\n>>> var_from_file = f.get_cube (var_name, 0)\n>>> (var_from_file == var).all ()\nTrue\n>>> f.close_file ()\n\n=== Write a series of cubes ===\n\nOpen the file for writing.\n>>> f.open_new_file ('test_file.nc', shape=shape, res=res,\n...                  dtype='float64',\n...                  var_name=var_name,\n...                  long_name=\"Sediment grain size\",\n...                  units_name=\"phe\",\n...                  comment=\"Cube of sediment grain size\")\nTrue\n\n>>> file_name = f.file_name\n>>> print file_name # doctest: +ELLIPSIS\ntest_file....nc\n\nWrite the variable\n>>> for time in times:\n...   f.add_cube (var+time, var_name)\n\nClose the file.\n>>> f.close_file ()\n\n=== Read a series of cubes ===\n\n>>> import nccs_files\n>>> f = nccs_files.nccs_file ()\n>>> f.open_file (file_name)\nTrue\n\nRead variable from file and compare it to what we wrote.\n>>> values_match = True\n>>> for time in times:\n...   var_from_file = f.get_cube (var_name, time)\n...   values_match &= (var_from_file == var+time).all ()\n>>> values_match\nTrue\n>>> f.close_file ()", "short_description": "This module reads and writes a series of data cubes to a NetCDF file.", "full": "This module reads and writes a series of data cubes to a NetCDF file.\n\n\n=== Set up some parameters ===\n\nDefine the shape of the data cube.\n>>> shape = (4, 5, 3)\n>>> res = (1., 100., 200.)\n\nSet the values of the data cube.\n>>> var = np.random.random (shape)\n\nWrite cubes at these times.\n>>> times = range (5)\n\nThis is the name of the variable that we will read/write.\n>>> var_name = 'grain_size'\n\n\n=== Write a cube ===\n\n>>> import nccs_files\n>>> f = nccs_files.nccs_file ()\n\nOpen the file for writing.\n>>> f.open_new_file ('test_file.nc', shape=shape, res=res,\n...                  dtype='float64',\n...                  var_name=var_name,\n...                  long_name=\"Sediment grain size\",\n...                  units_name=\"phe\",\n...                  comment=\"Cube of sediment grain size\")\nTrue\n\n\nThe name of the file may not be the same as what was specified in the call\nto open_new_file.  If the file already exists, a number will be appended to\nthe file name (before the extension).\n\n>>> file_name = f.file_name\n>>> print file_name # doctest: +ELLIPSIS\ntest_file....nc\n\nWrite the variable\n>>> f.add_cube (var, var_name)\n\nClose the file.\n>>> f.close_file ()\n\n=== Read a cube ===\n\n>>> import nccs_files\n>>> f = nccs_files.nccs_file ()\n>>> f.open_file (file_name)\nTrue\n\nRead variable from file and compare it to what we wrote.\n>>> var_from_file = f.get_cube (var_name, 0)\n>>> (var_from_file == var).all ()\nTrue\n>>> f.close_file ()\n\n=== Write a series of cubes ===\n\nOpen the file for writing.\n>>> f.open_new_file ('test_file.nc', shape=shape, res=res,\n...                  dtype='float64',\n...                  var_name=var_name,\n...                  long_name=\"Sediment grain size\",\n...                  units_name=\"phe\",\n...                  comment=\"Cube of sediment grain size\")\nTrue\n\n>>> file_name = f.file_name\n>>> print file_name # doctest: +ELLIPSIS\ntest_file....nc\n\nWrite the variable\n>>> for time in times:\n...   f.add_cube (var+time, var_name)\n\nClose the file.\n>>> f.close_file ()\n\n=== Read a series of cubes ===\n\n>>> import nccs_files\n>>> f = nccs_files.nccs_file ()\n>>> f.open_file (file_name)\nTrue\n\nRead variable from file and compare it to what we wrote.\n>>> values_match = True\n>>> for time in times:\n...   var_from_file = f.get_cube (var_name, time)\n...   values_match &= (var_from_file == var+time).all ()\n>>> values_match\nTrue\n>>> f.close_file ()"}}, "dependencies": [{"import": "os", "type": "external"}, {"import": "sys", "type": "external"}, {"import": "time", "type": "external"}, {"import": "numpy", "alias": "np", "type": "external"}, {"import": "bov_files", "type": "internal"}, {"import": "file_utils", "type": "internal"}, {"import": "rti_files", "type": "internal"}, {"import": "time_utils", "type": "internal"}, {"import": "netCDF4", "alias": "nc", "type": "external"}], "classes": {"nccs_file": {"min_max_lineno": {"min_lineno": 160, "max_lineno": 599}, "methods": {"import_netCDF4": {"args": ["self"], "returns": [["netCDF4"]], "min_max_lineno": {"min_lineno": 165, "max_lineno": 183}}, "open_file": {"args": ["self", "file_name"], "min_max_lineno": {"min_lineno": 186, "max_lineno": 197}, "calls": ["netCDF4.Dataset"], "store_vars_calls": {"nccs_unit": "nc.Dataset"}}, "get_dtype_map": {"args": ["self"], "returns": [["dtype_map"]], "min_max_lineno": {"min_lineno": 200, "max_lineno": 231}}, "open_new_file": {"args": ["self", "file_name", "grid_info", "time_info", "z_values", "z_units", "var_name", "long_name", "units_name", "dtype", "time_units", "time_res", "comment", "MAKE_RTI", "MAKE_BOV"], "returns": [["OK"], ["OK"]], "min_max_lineno": {"min_lineno": 234, "max_lineno": 518}, "calls": ["file_utils.check_overwrite", "numpy.size", "time_utils.get_duration", "nccs_files.nccs_file.get_dtype_map", "netCDF4.Dataset.set_fill_off", "int", "int", "netCDF4.Dataset.createDimension", "netCDF4.Dataset.createDimension", "netCDF4.Dataset.createDimension", "netCDF4.Dataset.createDimension", "netCDF4.Dataset.createDimension", "numpy.linspace", "numpy.linspace", "numpy.float64", "netCDF4.Dataset.createVariable", "netCDF4.Dataset.createVariable", "netCDF4.Dataset.createVariable", "netCDF4.Dataset.createVariable", "netCDF4.Dataset.createVariable", "netCDF4.Dataset.createVariable", "str", "str", "time_utils.get_time_dtype", "svo_names.get_svo_name", "dtype.lower", "netCDF4.Dataset", "int", "tf_utils.TF_Version_Number", "datetime.date.today", "time.asctime"], "store_vars_calls": {"file_name": "file_utils.check_overwrite", "nz": "np.size", "duration": "time_utils.get_duration", "dtype_map": "self.get_dtype_map", "ncols": "int", "nrows": "int", "X_vector": "np.linspace", "Y_vector": "np.linspace", "Z_vector": "np.float64", "tvar": "nccs_unit.createVariable", "dtvar": "nccs_unit.createVariable", "Xvar": "nccs_unit.createVariable", "Yvar": "nccs_unit.createVariable", "Zvar": "nccs_unit.createVariable", "var": "nccs_unit.createVariable", "tf_version": "str", "date_created": "str", "time_dtype": "time_utils.get_time_dtype", "svo_name": "svo_names.get_svo_name", "nccs_unit": "nc.Dataset"}}, "add_cube": {"args": ["self", "grid", "var_name", "time", "time_index"], "min_max_lineno": {"min_lineno": 521, "max_lineno": 578}, "calls": ["time_utils.get_current_datetime", "str", "numpy.ndim", "grid2.astype", "grid.astype", "numpy.zeros"], "store_vars_calls": {"datetime": "time_utils.get_current_datetime"}}, "get_cube": {"args": ["self", "var_name", "time_index"], "min_max_lineno": {"min_lineno": 581, "max_lineno": 585}}, "close_file": {"args": ["self"], "min_max_lineno": {"min_lineno": 588, "max_lineno": 592}, "calls": ["nccs_files.nccs_file.nccs_unit.close"]}, "close": {"args": ["self"], "min_max_lineno": {"min_lineno": 595, "max_lineno": 599}, "calls": ["nccs_files.nccs_file.nccs_unit.close"]}}}}, "functions": {"save_nccs_cube": {"args": ["nccs_file_name", "rtg_file_name"], "min_max_lineno": {"min_lineno": 139, "max_lineno": 157}, "calls": ["nccs_files.nccs_file", "nccs_files.nccs_file.open_file", "nccs_files.nccs_file.get_cube", "nccs_files.nccs_file.close", "numpy.array", "print", "open", "np.array.tofile", "open.cube", "np.array.min", "np.array.max"], "store_vars_calls": {"nccs": "nccs_file", "OK": "nccs.open_file", "cube": "np.array", "rtg_unit": "open"}}}, "main_info": {"main_flag": 1, "type": "script"}, "is_test": false}