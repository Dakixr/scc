{"file": {"path": "/Users/dakixr/Desktop/github/scc/tmp-data/metadata/KnowledgeCaptureAndDiscoveryANDmintproject/MINT-GeoViz/examples/utils/utils.py", "fileNameBase": "utils", "extension": "py"}, "dependencies": [{"import": "os", "type": "external"}, {"import": "json", "type": "external"}, {"from_module": "IPython.display", "import": "JSON", "type": "external"}, {"from_module": "IPython.display", "import": "display", "type": "external"}, {"import": "datetime", "alias": "dt", "type": "external"}, {"from_module": "pathlib", "import": "Path", "type": "external"}, {"from_module": "pprint", "import": "pprint", "type": "external"}, {"import": "pdb", "type": "external"}, {"from_module": "geopy.geocoders", "import": "Nominatim", "type": "external"}], "functions": {"get_mro": {"args": ["myObj"], "min_max_lineno": {"min_lineno": 16, "max_lineno": 18}, "calls": ["myObj.__class__.mro"]}, "show_attrs": {"args": ["myObj"], "min_max_lineno": {"min_lineno": 19, "max_lineno": 24}, "calls": ["len", "hv.Table", "str", "pd.DataFrame", "dir", "att.startswith"], "store_vars_calls": {"n_atts": "len"}}, "nprint": {"min_max_lineno": {"min_lineno": 25, "max_lineno": 30}, "calls": ["print", "pprint.pprint"]}, "attr_print": {"args": ["myObj"], "min_max_lineno": {"min_lineno": 31, "max_lineno": 34}, "calls": ["pprint.pprint", "dir", "att.startswith"]}, "get_latlon": {"doc": {"short_description": "Given a string address, resolve its location in (lat, lon) degrees"}, "args": ["addr_str"], "min_max_lineno": {"min_lineno": 39, "max_lineno": 46}, "calls": ["geopy.geocoders.Nominatim", "geopy.geocoders.Nominatim.geocode"], "store_vars_calls": {"geolocator": "Nominatim", "loc": "geolocator.geocode"}}, "get_addr": {"doc": {"long_description": "Eg: get_addr_str(52.509669, 13.376294) -> \"Potsdamer Platz, Mitte, Berlin, 10117...\"", "short_description": "Given lat, lon in degrees, return a resolved address as a string."}, "args": ["lat", "lon"], "min_max_lineno": {"min_lineno": 47, "max_lineno": 55}, "calls": ["geopy.geocoders.Nominatim", "geopy.geocoders.Nominatim.reverse"], "store_vars_calls": {"geolocator": "Nominatim", "loc": "geolocator.reverse"}}, "to_datetime": {"doc": {"long_description": "to (python) dt.datetime object. \nThis is useful for making the xaxis of any time-series plots human-readable, \npossibly due to a bug in bokeh.", "short_description": "Operation to convert any non-python datetime object in a list of time objects"}, "args": ["tlist"], "returns": [["dt_list"], ["tlist"]], "min_max_lineno": {"min_lineno": 59, "max_lineno": 75}, "calls": ["all", "print", "list", "map", "t.to_pydatetime", "mro"], "store_vars_calls": {"dt_list": "list"}}, "dict2json": {"args": ["d"], "min_max_lineno": {"min_lineno": 79, "max_lineno": 81}, "calls": ["IPython.display.JSON"]}, "display_dict2json": {"args": ["d"], "min_max_lineno": {"min_lineno": 82, "max_lineno": 84}, "calls": ["IPython.display.display", "IPython.display.JSON"]}, "is_valid_url": {"args": ["path"], "min_max_lineno": {"min_lineno": 85, "max_lineno": 89}, "calls": ["requests.head"], "store_vars_calls": {"r": "requests.head"}}, "cols_with_null": {"doc": {"long_description": "Args:\n- df(pandas.DataFrame)\nReturns:\n- cols (list): list of strings, each of which correseponds to the column name\nwith any null values", "short_description": "Returns any columnnames with any null value"}, "args": ["df"], "returns": [["cols"]], "min_max_lineno": {"min_lineno": 94, "max_lineno": 106}, "calls": ["df[].isnull().values.any", "df[].isnull"]}, "select": {"doc": {"long_description": "Args: \n- selection (list): a list of column names (if axis=1) or row indices (if axis=0)\n- axis: 0 for row selection, 1 for column selection\n\nExample:\n```python\ndf = pd.DataFrame({'a': [1,2,3], 'b': [10,20,30]})\n\n# select certain columns, in a certain order\nnew_cols = ['b']\nprint(select(df, new_cols, axis=1))\n\n# Reorder columns\nnew_cols = ['b','a']\nprint(select(df, new_cols, axis=1)\n\n# Select a subset of rows\nr_sels = [0]\nprint(select(df, r_sels, axis=0)\n\n```", "short_description": "Returns a new dataframe with its axis reduced to the elements in `selection`"}, "args": ["df", "selection", "axis"], "min_max_lineno": {"min_lineno": 107, "max_lineno": 139}, "calls": ["ValueError", "df.index.isin"]}, "reorder_cols": {"doc": {"long_description": "Args:\n- df (pd.DataFrame)\n- new_cols (list): a list of new column names. Can be a subset of df.columns\n    in which case, only specified columns will be selected in the given order\nReturns:\n- pd.DataFrame: a new dataframe object with the columns selected", "short_description": "Returns a new dataframe with column orders switched to the new_cols"}, "args": ["df", "new_cols"], "min_max_lineno": {"min_lineno": 141, "max_lineno": 154}, "calls": ["set().issubset", "ValueError", "set", "set"]}, "relabel_elements": {"doc": {"long_description": "labels (str or iterable of strs)\nlength of hv elements in the overlay must equal to the length of labels", "short_description": "ndOverlay is indexed by integer"}, "args": ["ndoverlay", "labels"], "returns": [["relabeled"]], "min_max_lineno": {"min_lineno": 165, "max_lineno": 182}, "calls": ["isinstance", "cycle", "hv.NdOverlay", "isinstance", "ValueError", "len", "len", "ndoverlay[].relabel", "next", "range", "len"], "store_vars_calls": {"it": "cycle", "relabeled": "hv.NdOverlay"}}, "test_get_mro": {"min_max_lineno": {"min_lineno": 187, "max_lineno": 189}, "calls": ["print", "utils.get_mro"]}, "test_nprint": {"min_max_lineno": {"min_lineno": 190, "max_lineno": 195}, "calls": ["utils.nprint", "utils.nprint", "utils.nprint", "utils.nprint"]}, "test_dict2json": {"min_max_lineno": {"min_lineno": 196, "max_lineno": 202}, "calls": ["print", "print", "utils.dict2json"]}, "test_cols_with_null": {"min_max_lineno": {"min_lineno": 203, "max_lineno": 205}}, "test_is_valid_url": {"min_max_lineno": {"min_lineno": 206, "max_lineno": 210}, "calls": ["print", "print", "utils.is_valid_url"]}, "test_get_latlon": {"min_max_lineno": {"min_lineno": 211, "max_lineno": 215}, "calls": ["print", "print", "utils.get_latlon"]}, "test_get_addr": {"min_max_lineno": {"min_lineno": 216, "max_lineno": 220}, "calls": ["print", "print", "utils.get_addr"]}, "test_reorder_cols": {"min_max_lineno": {"min_lineno": 221, "max_lineno": 228}, "calls": ["pd.DataFrame", "utils.reorder_cols", "print", "IPython.display.display", "print", "IPython.display.display"], "store_vars_calls": {"df": "pd.DataFrame", "reordered": "reorder_cols"}}, "test_all": {"min_max_lineno": {"min_lineno": 229, "max_lineno": 237}, "calls": ["utils.test_get_mro", "utils.test_nprint", "utils.test_dict2json", "utils.test_cols_with_null", "utils.test_is_valid_url", "utils.test_get_latlon", "utils.test_get_addr"]}}, "main_info": {"main_flag": 1, "main_function": "utils.test_all", "type": "script"}, "is_test": false}