{"file": {"path": "/Users/dakixr/Desktop/github/scc/tmp-data/metadata/KnowledgeCaptureAndDiscoveryANDmintproject/MINT-GeoViz/examples/utils/geo_helpers.py", "fileNameBase": "geo_helpers", "extension": "py"}, "dependencies": [{"import": "os", "type": "external"}, {"import": "sys", "type": "external"}, {"import": "time", "type": "external"}, {"from_module": "copy", "import": "deepcopy", "type": "external"}, {"from_module": "pathlib", "import": "Path", "type": "external"}, {"from_module": "collections", "import": "Counter", "type": "external"}, {"import": "pdb", "type": "external"}, {"import": "numpy", "alias": "np", "type": "external"}, {"import": "matplotlib", "alias": "plt", "type": "external"}, {"import": "pandas", "alias": "pd", "type": "external"}, {"import": "geopandas", "alias": "gpd", "type": "external"}, {"import": "osmnx", "alias": "ox", "type": "external"}, {"import": "joblib", "type": "external"}, {"from_module": "shapely.ops", "import": "unary_union", "type": "external"}, {"from_module": "IPython.display", "import": "display", "type": "external"}], "functions": {"gseries2gdf": {"args": ["gseries"], "returns": [["gdf"]], "min_max_lineno": {"min_lineno": 23, "max_lineno": 29}, "calls": ["geopandas.GeoDataFrame", "gdf.rename().set_geometry.rename().set_geometry", "hasattr", "gdf.rename().set_geometry.rename"], "store_vars_calls": {"gdf": "gdf.rename().set_geometry"}}, "geom2gdf": {"doc": {"short_description": "A single geom object to gdf of length 1"}, "args": ["geom", "crs"], "min_max_lineno": {"min_lineno": 30, "max_lineno": 35}, "calls": ["geopandas.GeoSeries", "geo_helpers.gseries2gdf"], "store_vars_calls": {"gseries": "gpd.GeoSeries"}}, "df2gdf": {"doc": {"long_description": "- df (pandas.DataFrame): one column must be a list of shapely.geometry objects\n- geom_col (int or string): name of the column to be used as the GeoDataFrame's \n    `geometry` column\n- orig_crs: original crs\n    - eg: {'init': 'epsg:4326'} \n- target_crs (optional): if not None, project the gdf to this crs before returning\n\nReturns:\n- gdf (geopandas.GeoDataFrame)", "short_description": "Args:"}, "args": ["df", "geom_col", "orig_crs", "target_crs"], "returns": [["gdf"]], "min_max_lineno": {"min_lineno": 37, "max_lineno": 54}, "calls": ["geopandas.GeoDataFrame", "gdf.to_crs.to_crs"], "store_vars_calls": {"gdf": "gdf.to_crs"}}, "list2gdf": {"doc": {"long_description": "Args:\n- geoms (list of shapely.geometry objects)\n- orig_crs: a proper crs of the geometry list\n- target_crs: if not None, reproject the dataFrame to this crs\n    - if None, keep the orig_crs as the output dataFrame's crs\n\nReturns:\n- gdf (geopandas.DataFrame) whose 'geometry' column is set to the input list `geoms`", "short_description": "Create a geopandas DataFrame object from a list of shapely geometry objects"}, "args": ["geoms", "orig_crs", "target_crs"], "min_max_lineno": {"min_lineno": 55, "max_lineno": 74}, "calls": ["geo_helpers.df2gdf"]}, "to_geojson": {"args": ["df", "fname"], "min_max_lineno": {"min_lineno": 78, "max_lineno": 80}, "calls": ["df.to_file"]}, "createPointsAlongLine": {"doc": {"long_description": "- geom: LineString or MultiLineString\n- distance (float): distance between points to be sampled along the line(s)\n- pts (list:non-const): points will be added to this list\n- addStart (bool, default=True): True to add the", "short_description": "Args:"}, "args": ["geom", "distance", "pts", "addStart"], "min_max_lineno": {"min_lineno": 84, "max_lineno": 113}, "calls": ["isinstance", "isinstance", "print", "pdb.set_trace", "ValueError", "isinstance", "type", "geo_helpers.createPointsAlongLine", "type", "pts.append", "geom.interpolate", "pts.append", "Point"], "store_vars_calls": {"pt": "geom.interpolate"}}, "createPointsOnRow": {"doc": {"long_description": "- row (namedTuple) with Index=True\n- distance (float): distance between each sample points along the line\n- new_points (list): non-const. This is the new point (row) collector", "short_description": "Args:"}, "args": ["row", "distance", "new_points", "debug"], "min_max_lineno": {"min_lineno": 114, "max_lineno": 139}, "calls": ["geo_helpers.createPointsAlongLine", "new_points.append", "print", "print", "print", "print", "len"]}, "createPointsOnDf": {"doc": {"long_description": "sample points at the interval of `distance` and return a geopandas \nDataFrame of all the sampled points.\nThe sampled points will keep its parent road's information in its column:\n    -'road_index', 'road_id' and 'road_type' from its parent road\n    -'geometry': Point in the same UTM crs as the input `gdf`\nArgs:\n- gdf (geopandas.DataFrame): road data consisting of LineString or MultiLineString\n    objects in a proper UTM crs\n- distance (float): distance between sampled points along each line in meters\n- debug (boolean): \n\nReturns:\n- df_points (geopandas.DataFrame): sampled points dataframe in the same CRS as the input\n    - colnames: `road_index`, `road_id`, `road_type`, `geometry`", "short_description": "Given a geopandas DataFrame of LineString and MultiLineString data, "}, "args": ["gdf", "distance", "debug"], "returns": [["df_points"]], "min_max_lineno": {"min_lineno": 140, "max_lineno": 168}, "calls": ["gdf.itertuples", "geopandas.GeoDataFrame", "geo_helpers.createPointsOnRow", "phead", "print", "len"], "store_vars_calls": {"df_points": "gpd.GeoDataFrame"}}, "create_bbox_from_bounds": {"doc": {"long_description": "- bounds (list): (minx, miny, maxx, maxy)\nReturns:\n- Polygon (shapely.geometry)", "short_description": "Args:"}, "args": ["bounds"], "min_max_lineno": {"min_lineno": 173, "max_lineno": 187}, "calls": ["Polygon"]}, "bounds2poly": {"doc": {"long_description": "- bounds (tuple of floats): (xmin, ymin, xmax, ymax)\n\nReturns\n- poly (shapely.geometry.Polygon): a polygon representing the bounds", "short_description": "Args:"}, "args": ["bounds"], "min_max_lineno": {"min_lineno": 188, "max_lineno": 202}, "calls": ["Polygon"]}, "filter_gdf_by_geom_types": {"args": ["gdf", "geom_types"], "min_max_lineno": {"min_lineno": 206, "max_lineno": 209}, "calls": ["gdf.geom_type.isin"], "store_vars_calls": {"flag": "gdf.geom_type.isin"}}, "filter_empty_geoms": {"args": ["gdf", "inplace"], "min_max_lineno": {"min_lineno": 210, "max_lineno": 213}, "calls": ["copy.deepcopy"]}, "filter_gdf_to_polys_within_bounds": {"doc": {"long_description": "- gdf (geopandas.DataFrame)\n- bounds (tuple or rasterio.bounds object): encodes (xmin, ymin, xmax, ymax)\n\nReturns:\n- a list of Polygons within the bounds", "short_description": "Args:"}, "args": ["gdf", "bounds"], "min_max_lineno": {"min_lineno": 214, "max_lineno": 228}, "calls": ["geo_helpers.bounds2poly", "gdf.intersection", "print", "gs_filtered.to_list", "len"], "store_vars_calls": {"roi": "bounds2poly", "gdf_int": "gdf.intersection"}}, "filter_gdf_to_gs_within_bounds": {"doc": {"long_description": "surrounded by the `bounds` will be returned as a geopandas.GeoSeries object.\nNote that the returned GeoSeries object has a single column, ie. does not preserve\nany columns in the input gdf. \n\nIf you want to have the original gdf structure preserved, with its `geometry` column\nis modified to a shapely object of its intersection with the bounds, use `crop_gdf_to_bounds`\n\n\nArgs:\n- gdf (geopandas.DataFrame)\n- bounds (tuple or rasterio.bounds object): encodes (xmin, ymin, xmax, ymax)\n\nReturns:\n- Filtered gdf", "short_description": "Any geometry in each row of `gdf` that has a non-empty intersection with the area"}, "args": ["gdf", "bounds", "verbose"], "returns": [["gdf_filtered"]], "min_max_lineno": {"min_lineno": 229, "max_lineno": 255}, "calls": ["geo_helpers.bounds2poly", "print", "gdf.intersection", "len", "len", "print"], "store_vars_calls": {"roi": "bounds2poly"}}, "crop_gdf_to_bounds": {"args": ["gdf", "bounds", "inplace", "remove_empty"], "returns": [["gdf_copy"]], "min_max_lineno": {"min_lineno": 256, "max_lineno": 269}, "calls": ["geo_helpers.bounds2poly", "gdf.intersection", "copy.deepcopy", "geo_helpers.filter_empty_geoms"], "store_vars_calls": {"roi": "bounds2poly", "cropped": "gdf.intersection", "gdf_copy": "filter_empty_geoms"}}, "crop_gdf_to_": {"args": ["gdf", "bounds", "inplace", "remove_empty"], "returns": [["gdf_copy"]], "min_max_lineno": {"min_lineno": 270, "max_lineno": 283}, "calls": ["geo_helpers.bounds2poly", "gdf.intersection", "copy.deepcopy", "geo_helpers.filter_empty_geoms"], "store_vars_calls": {"roi": "bounds2poly", "cropped": "gdf.intersection", "gdf_copy": "filter_empty_geoms"}}, "get_polys_at_lonlat": {"args": ["gdf", "lon", "lat"], "returns": [["gdf_selected"]], "min_max_lineno": {"min_lineno": 284, "max_lineno": 289}, "calls": ["Point", "print", "gdf.intersects", "len"], "store_vars_calls": {"p": "Point"}}, "test_gseries2gdf": {"min_max_lineno": {"min_lineno": 297, "max_lineno": 299}}, "test_list2gdf": {"min_max_lineno": {"min_lineno": 300, "max_lineno": 307}, "calls": ["geo_helpers.list2gdf", "print", "print", "print", "Point", "Point", "Point", "list2gdf.head"], "store_vars_calls": {"gdf": "list2gdf"}}, "test_df2gdf": {"min_max_lineno": {"min_lineno": 308, "max_lineno": 310}}, "test_create_bbox_from_bounds": {"min_max_lineno": {"min_lineno": 311, "max_lineno": 320}, "calls": ["geo_helpers.create_bbox_from_bounds", "IPython.display.display"], "store_vars_calls": {"bbox": "create_bbox_from_bounds"}}, "run_tests": {"min_max_lineno": {"min_lineno": 321, "max_lineno": 327}, "calls": ["test_gsereis2gdf", "geo_helpers.test_list2gdf", "geo_helpers.test_df2gdf", "geo_helpers.test_create_bbox_from_bounds"]}}, "main_info": {"main_flag": 1, "main_function": "geo_helpers.test_list2gdf", "type": "script"}, "is_test": false}