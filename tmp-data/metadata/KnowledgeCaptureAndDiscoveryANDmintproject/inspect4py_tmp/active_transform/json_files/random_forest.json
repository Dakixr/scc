{"file": {"path": "/Users/dakixr/Desktop/github/scc/tmp-data/metadata/KnowledgeCaptureAndDiscoveryANDmintproject/byod-cleaning-api/kbclean/detection/active_transform/random_forest.py", "fileNameBase": "random_forest", "extension": "py"}, "dependencies": [{"from_module": "kbclean.detection.features.embedding", "import": "CharAvgFastText", "type": "external"}, {"from_module": "kbclean.detection.features.embedding", "import": "CharFastText", "type": "external"}, {"from_module": "kbclean.detection.features.embedding", "import": "WordAvgFastText", "type": "external"}, {"from_module": "kbclean.detection.features.statistics", "import": "StatsExtractor", "type": "external"}, {"from_module": "kbclean.detection.features.base", "import": "ConcatExtractor", "type": "external"}, {"from_module": "typing", "import": "List", "type": "external"}, {"import": "numpy", "alias": "np", "type": "external"}, {"import": "pandas", "alias": "pd", "type": "external"}, {"from_module": "kbclean.detection.base", "import": "ActiveDetector", "type": "external"}, {"from_module": "kbclean.utils.data.readers", "import": "RowBasedValue", "type": "external"}, {"from_module": "sklearn.ensemble", "import": "RandomForestClassifier", "type": "external"}, {"from_module": "imblearn.over_sampling", "import": "SMOTE", "type": "external"}], "classes": {"RandomForestDetector": {"extend": ["ActiveDetector"], "min_max_lineno": {"min_lineno": 18, "max_lineno": 104}, "methods": {"__init__": {"args": ["self", "hparams"], "min_max_lineno": {"min_lineno": 19, "max_lineno": 28}, "calls": ["sklearn.ensemble.RandomForestClassifier", "kbclean.detection.features.base.ConcatExtractor", "kbclean.detection.features.embedding.CharAvgFastText", "kbclean.detection.features.embedding.WordAvgFastText", "kbclean.detection.features.statistics.StatsExtractor"], "store_vars_calls": {"self.model": "RandomForestClassifier", "self.feature_extractor": "ConcatExtractor"}}, "extract_features": {"args": ["self", "data", "labels", "retrain"], "returns": [["label_data"]], "min_max_lineno": {"min_lineno": 31, "max_lineno": 46}, "calls": ["numpy.concatenate", "random_forest.RandomForestDetector.feature_extractor.fit_transform", "random_forest.RandomForestDetector.feature_extractor[].n_features", "random_forest.RandomForestDetector.feature_extractor.transform", "feature.cpu().detach().numpy", "numpy.asarray", "numpy.concatenate", "feature.cpu().detach", "feature.cpu"], "store_vars_calls": {"features": "self.feature_extractor.transform", "self.hparams.model.feature_dim": "self.feature_extractor[].n_features", "label_data": "np.asarray"}}, "reset": {"args": ["self"], "min_max_lineno": {"min_lineno": 47, "max_lineno": 49}, "calls": ["sklearn.ensemble.RandomForestClassifier"], "store_vars_calls": {"self.model": "RandomForestClassifier"}}, "eval_idetect": {"args": ["self", "raw_df", "cleaned_df", "k"], "min_max_lineno": {"min_lineno": 50, "max_lineno": 52}}, "idetect_values": {"args": ["self", "ec_str_pairs", "row_values", "scores", "active_learner"], "min_max_lineno": {"min_lineno": 53, "max_lineno": 76}, "calls": ["active_learner.most_positives", "random_forest.RandomForestDetector.extract_features", "imblearn.over_sampling.SMOTE().fit_resample", "random_forest.RandomForestDetector.model.fit", "random_forest.RandomForestDetector.extract_features", "random_forest.RandomForestDetector.model.predict_proba", "imblearn.over_sampling.SMOTE", "range", "len"], "store_vars_calls": {"positives": "active_learner.most_positives", "features": "self.extract_features", "pred": "self.model.predict_proba"}}, "idetect": {"args": ["self", "df", "score_df", "recommender"], "returns": [["result_df"]], "min_max_lineno": {"min_lineno": 77, "max_lineno": 104}, "calls": ["df.copy", "df.to_dict", "df[].values.tolist", "kbclean.utils.data.readers.RowBasedValue", "score_df[].values.tolist", "all", "pandas.Series", "random_forest.RandomForestDetector.idetect_values", "pandas.Series", "zip", "range", "len"], "store_vars_calls": {"result_df": "df.copy", "records": "df.to_dict", "values": "df[].values.tolist", "scores": "score_df[].values.tolist", "outliers": "self.idetect_values"}}}}}, "is_test": false}