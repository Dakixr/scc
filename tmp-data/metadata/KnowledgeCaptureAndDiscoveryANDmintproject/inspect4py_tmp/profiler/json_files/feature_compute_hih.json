{"file": {"path": "/Users/dakixr/Desktop/github/scc/tmp-data/metadata/KnowledgeCaptureAndDiscoveryANDmintproject/P4ML-UI/dsbox-profiling/dsbox/datapreprocessing/profiler/feature_compute_hih.py", "fileNameBase": "feature_compute_hih", "extension": "py"}, "dependencies": [{"import": "pandas", "alias": "pd", "type": "external"}, {"import": "numpy", "alias": "np", "type": "external"}, {"import": "dsbox", "alias": "hf", "type": "external"}, {"from_module": "collections", "import": "OrderedDict", "type": "external"}, {"from_module": "collections", "import": "defaultdict", "type": "external"}, {"from_module": "collections", "import": "Counter", "type": "external"}, {"from_module": "builtins", "import": "filter", "type": "external"}], "functions": {"ordered_dict2": {"args": ["column", "k"], "min_max_lineno": {"min_lineno": 9, "max_lineno": 13}, "calls": ["numpy.unique", "dict", "collections.OrderedDict", "zip", "collections.Counter().most_common", "collections.Counter"], "store_vars_calls": {"d": "dict"}}, "ordered_dict": {"args": ["column", "k"], "min_max_lineno": {"min_lineno": 14, "max_lineno": 18}, "calls": ["column.value_counts().head().to_dict", "collections.OrderedDict", "sorted", "column.value_counts().head", "column.value_counts().head().to_dict.items", "column.value_counts"], "store_vars_calls": {"d": "column.value_counts().head().to_dict"}}, "tryConvert": {"doc": {"long_description": "note: type of NaN cell is float", "short_description": "convert a cell, if possible, to its supposed type(int, float, string)"}, "args": ["cell"], "returns": [["cell"]], "min_max_lineno": {"min_lineno": 19, "max_lineno": 31}, "calls": ["int", "float"]}, "numerical_stats": {"doc": {"short_description": "calculates numerical statistics"}, "args": ["column", "num_nonblank", "sigma"], "returns": [["idict"]], "min_max_lineno": {"min_lineno": 32, "max_lineno": 57}, "calls": ["column.describe", "int", "outlier.count", "column[].count", "column[].count", "column[].count", "column[].count", "column[].count", "numpy.abs"], "store_vars_calls": {"stats": "column.describe"}}, "compute_numerics": {"doc": {"long_description": "# of integers/ decimal(float only)/ nonblank values in the column\nstatistics of int/decimal/numerics", "short_description": "computes numerical features of the column:"}, "args": ["column", "feature"], "min_max_lineno": {"min_lineno": 58, "max_lineno": 89}, "calls": ["column.count", "feature_compute_hih.numerical_stats", "column.count", "feature_compute_hih.numerical_stats", "column.apply", "column.apply.dropna", "pandas.Series", "pandas.Series", "column.count", "feature_compute_hih.tryConvert", "pd.Series.count", "feature_compute_hih.numerical_stats", "pd.Series.count", "feature_compute_hih.numerical_stats", "pandas.concat", "feature_compute_hih.numerical_stats", "type", "type", "type", "type"], "store_vars_calls": {"col": "column.apply", "col_nonblank": "col.dropna", "col_int": "pd.Series", "col_float": "pd.Series", "col_num": "pd.concat"}}, "compute_common_numeric_tokens": {"doc": {"long_description": "tokens are integer or floats\ne.g. \"123\", \"12.3\"", "short_description": "compute top k frequent numerical tokens and their counts."}, "args": ["column", "feature", "k"], "min_max_lineno": {"min_lineno": 90, "max_lineno": 100}, "calls": ["numpy.array", "column.str.split().unstack().dropna", "list", "feature_compute_hih.ordered_dict2", "builtins.filter", "column.str.split().unstack", "dsbox.is_Decimal_Number", "column.str.split"], "store_vars_calls": {"token": "np.array"}}, "compute_common_alphanumeric_tokens": {"doc": {"long_description": "tokens only contain alphabets and/or numbers, decimals with points not included", "short_description": "compute top k frequent alphanumerical tokens and their counts."}, "args": ["column", "feature", "k"], "min_max_lineno": {"min_lineno": 101, "max_lineno": 110}, "calls": ["numpy.array", "column.str.split().unstack().dropna", "list", "feature_compute_hih.ordered_dict2", "builtins.filter", "column.str.split().unstack", "x.isalnum", "column.str.split"], "store_vars_calls": {"token": "np.array"}}, "compute_common_values": {"doc": {"short_description": "compute top k frequent cell values and their counts."}, "args": ["column", "feature", "k"], "min_max_lineno": {"min_lineno": 111, "max_lineno": 117}, "calls": ["column.count", "feature_compute_hih.ordered_dict"]}, "compute_common_tokens": {"doc": {"long_description": "currently: tokens separated by white space\nat the same time, count on tokens which contain number(s)\ne.g. \"$100\", \"60F\", \"123-456-7890\"\nnote: delimiter = \" \"", "short_description": "compute top k frequent tokens and their counts."}, "args": ["column", "feature", "k"], "min_max_lineno": {"min_lineno": 118, "max_lineno": 134}, "calls": ["column.str.split().unstack().dropna", "feature_compute_hih.ordered_dict2", "sum", "column.str.split().unstack", "any", "float", "column.str.split", "char.isdigit"], "store_vars_calls": {"cnt": "sum"}}, "compute_common_tokens_by_puncs": {"doc": {"long_description": "'!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~'", "short_description": "tokens seperated by all string.punctuation characters:"}, "args": ["column", "feature", "k"], "min_max_lineno": {"min_lineno": 135, "max_lineno": 153}, "calls": ["numpy.array", "column.dropna", "feature_compute_hih.ordered_dict2", "sum", "numpy.unique", "float", "any", "float", "char.isdigit", "word.isalnum"], "store_vars_calls": {"token": "np.array", "cnt": "sum"}}, "compute_numeric_density": {"doc": {"short_description": "compute overall density of numeric characters in the column."}, "args": ["column", "feature"], "min_max_lineno": {"min_lineno": 154, "max_lineno": 163}, "calls": ["column.dropna", "numpy.array", "np.array.sum", "float", "sum", "len", "char.isdigit"], "store_vars_calls": {"density": "np.array", "digit_total": "density.sum"}}, "compute_contain_numeric_values": {"doc": {"short_description": "caculate # and ratio of cells in the column which contains numbers."}, "args": ["column", "feature"], "min_max_lineno": {"min_lineno": 164, "max_lineno": 174}, "calls": ["column.dropna().apply().sum", "any", "column.dropna().apply", "float", "column.count", "char.isdigit", "column.dropna"], "store_vars_calls": {"cnt": "column.dropna().apply().sum"}}}, "is_test": false}