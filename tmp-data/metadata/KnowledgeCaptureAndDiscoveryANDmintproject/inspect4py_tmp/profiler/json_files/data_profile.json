{"file": {"path": "/Users/dakixr/Desktop/github/scc/tmp-data/metadata/KnowledgeCaptureAndDiscoveryANDmintproject/P4ML-UI/dsbox-profiling/dsbox/datapreprocessing/profiler/data_profile.py", "fileNameBase": "data_profile", "extension": "py"}, "dependencies": [{"import": "pandas", "alias": "pd", "type": "external"}, {"import": "json", "type": "external"}, {"import": "sys", "type": "external"}, {"import": "time", "type": "external"}, {"import": "numpy", "alias": "np", "type": "external"}, {"import": "dsbox", "alias": "fc_lfh", "type": "external"}, {"import": "dsbox", "alias": "fc_hih", "type": "external"}, {"from_module": "collections", "import": "defaultdict", "type": "external"}], "classes": {"Profiler": {"doc": {"long_description": "Parameters:\n----------\npunctuation_outlier_weight: a integer\n    the coefficient used in outlier detection for punctuation. default is 3 \n\nnumerical_outlier_weight\n\ntoken_delimiter: a string\n    delimiter that used to seperate tokens, default is blank space \" \".\n\ndetect_language: boolean\n    true: do detect language; false: not detect language\n\ntopk: a integer\n\n\nverbose: boolean\n    control the verbose \n\nAttributes:\n----------", "short_description": "data profiler moduel. Now only supports csv data.", "full": "data profiler moduel. Now only supports csv data.\n\nParameters:\n----------\npunctuation_outlier_weight: a integer\n    the coefficient used in outlier detection for punctuation. default is 3 \n\nnumerical_outlier_weight\n\ntoken_delimiter: a string\n    delimiter that used to seperate tokens, default is blank space \" \".\n\ndetect_language: boolean\n    true: do detect language; false: not detect language\n\ntopk: a integer\n\n\nverbose: boolean\n    control the verbose \n\nAttributes:\n----------"}, "extend": ["object"], "min_max_lineno": {"min_lineno": 13, "max_lineno": 160}, "methods": {"__init__": {"args": ["self", "punctuation_outlier_weight", "numerical_outlier_weight", "token_delimiter", "detect_language", "topk", "verbose"], "min_max_lineno": {"min_lineno": 41, "max_lineno": 50}}, "profile_data": {"doc": {"short_description": "Main function to profile the data.", "args": {"data_path": {"type_name": "file or pandas DataFrame that needs to be profiled", "is_optional": false}}}, "args": ["self", "data_path"], "returns": [["result"]], "min_max_lineno": {"min_lineno": 54, "max_lineno": 160}, "calls": ["list", "isinstance", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv.corr", "pandas.read_csv.corr", "pandas.read_csv.corr", "pandas.read_csv.corr", "print", "print", "print", "collections.defaultdict", "print", "pandas.read_csv.head", "list", "list", "pandas.isnull().sum", "col.astype().fillna().astype.astype().fillna().astype.count", "str", "col.astype().fillna().astype.astype().fillna().astype.nunique", "dsbox.compute_common_values", "dsbox.compute_common_values", "collections.defaultdict", "float", "col.astype().fillna().astype.astype().fillna().astype.dropna().astype", "dsbox.compute_numerics", "dsbox.compute_numerics", "dsbox.compute_common_values", "dsbox.compute_common_values", "pandas.isnull", "col.astype().fillna().astype.astype().fillna().astype.dropna().astype", "dsbox.compute_numerics", "dsbox.compute_numerics", "dsbox.compute_common_values", "dsbox.compute_common_values", "col.astype().fillna().astype.astype().fillna().astype.dropna", "col.astype().fillna().astype.astype().fillna().astype.dropna().astype", "col.astype().fillna().astype.astype().fillna().astype.dropna", "dsbox.compute_missing_space", "dsbox.compute_missing_space", "dsbox.compute_filename", "dsbox.compute_filename", "dsbox.compute_length_distinct", "dsbox.compute_length_distinct", "dsbox.compute_punctuation", "dsbox.compute_punctuation", "dsbox.compute_numerics", "dsbox.compute_numerics", "dsbox.compute_common_numeric_tokens", "dsbox.compute_common_numeric_tokens", "dsbox.compute_common_alphanumeric_tokens", "dsbox.compute_common_alphanumeric_tokens", "dsbox.compute_common_values", "dsbox.compute_common_values", "dsbox.compute_common_tokens", "dsbox.compute_common_tokens", "dsbox.compute_numeric_density", "dsbox.compute_numeric_density", "dsbox.compute_contain_numeric_values", "dsbox.compute_contain_numeric_values", "dsbox.compute_common_tokens_by_puncs", "dsbox.compute_common_tokens_by_puncs", "col.astype().fillna().astype.astype().fillna().astype.dropna", "col.astype().fillna().astype.astype().fillna().astype.astype().fillna().astype", "dsbox.compute_lang", "dsbox.compute_lang", "col.astype().fillna().astype.astype().fillna().astype.astype().fillna", "col.astype().fillna().astype.astype().fillna().astype.astype"], "store_vars_calls": {"corr_columns": "list", "data": "pd.read_csv", "data_for_corr": "pd.read_csv", "corr_pearson": "data.corr", "corr_spearman": "data.corr", "each_res": "defaultdict", "ndistinct": "col.nunique", "col": "col.astype().fillna().astype"}}}}, "MyEncoder": {"extend": ["json.JSONEncoder"], "min_max_lineno": {"min_lineno": 161, "max_lineno": 171}, "methods": {"default": {"args": ["self", "obj"], "min_max_lineno": {"min_lineno": 162, "max_lineno": 171}, "calls": ["isinstance", "int", "isinstance", "float", "isinstance", "obj.tolist", "super().default"]}}}}, "main_info": {"main_flag": 1, "main_function": "data_profile.Profiler", "type": "script"}, "is_test": false}