{"file": {"path": "/Users/dakixr/Desktop/github/scc/tmp-data/metadata/KnowledgeCaptureAndDiscoveryANDmintproject/byod-cleaning-api/kbclean/detection/addons/highway.py", "fileNameBase": "highway", "extension": "py"}, "dependencies": [{"import": "torch", "alias": "F", "type": "external"}, {"from_module": "torch", "import": "nn", "type": "external"}], "classes": {"Highway": {"extend": ["nn.Module"], "min_max_lineno": {"min_lineno": 5, "max_lineno": 39}, "methods": {"__init__": {"args": ["self", "size", "num_layers", "f"], "min_max_lineno": {"min_lineno": 6, "max_lineno": 20}, "calls": ["torch.nn.Module.__init__", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "range", "range", "range"], "store_vars_calls": {"self.nonlinear": "nn.ModuleList", "self.linear": "nn.ModuleList", "self.gate": "nn.ModuleList"}}, "forward": {"doc": {"args": {"x": {"description": "tensor with shape of [batch_size, size]"}}, "returns": {"description": "tensor with shape of [batch_size, size]\napplies \u03c3(x) \u2a00 (f(G(x))) + (1 - \u03c3(x)) \u2a00 (Q(x)) transformation | G and Q is affine transformation,\nf is non-linear transformation, \u03c3(x) is affine transformation with sigmoid non-linearition\nand \u2a00 is element-wise multiplication", "is_generator": false}}, "args": ["self", "x"], "returns": [["x"]], "min_max_lineno": {"min_lineno": 21, "max_lineno": 39}, "calls": ["range", "torch.sigmoid", "highway.Highway.f"], "store_vars_calls": {"gate": "F.sigmoid", "nonlinear": "self.f"}}}}}, "is_test": false}