{"file": {"path": "/Users/dakixr/Desktop/github/scc/tmp-data/metadata/KnowledgeCaptureAndDiscoveryANDmintproject/byod-cleaning-api/kbclean/transformation/noisy_channel.py", "fileNameBase": "noisy_channel", "extension": "py"}, "dependencies": [{"import": "itertools", "type": "external"}, {"import": "random", "type": "external"}, {"from_module": "collections", "import": "Counter", "type": "external"}, {"from_module": "difflib", "import": "SequenceMatcher", "type": "external"}, {"from_module": "operator", "import": "pos", "type": "external"}, {"from_module": "typing", "import": "List", "type": "external"}, {"from_module": "typing", "import": "Tuple", "type": "external"}, {"import": "numpy", "alias": "np", "type": "external"}, {"import": "regex", "alias": "re", "type": "external"}, {"from_module": "kbclean.utils.data.readers", "import": "RowBasedValue", "type": "external"}, {"from_module": "kbclean.utils.features.attribute", "import": "xngrams", "type": "external"}, {"from_module": "loguru", "import": "logger", "type": "external"}], "classes": {"CharTransform": {"min_max_lineno": {"min_lineno": 19, "max_lineno": 48}, "methods": {"__init__": {"args": ["self", "before_str", "after_str"], "min_max_lineno": {"min_lineno": 20, "max_lineno": 23}}, "transform": {"args": ["self", "str_value"], "min_max_lineno": {"min_lineno": 24, "max_lineno": 36}, "calls": ["str_value.replace", "random.randrange", "len"], "store_vars_calls": {"sample_position": "random.randrange"}}, "__eq__": {"args": ["self", "o"], "min_max_lineno": {"min_lineno": 37, "max_lineno": 39}}, "__hash__": {"args": ["self"], "min_max_lineno": {"min_lineno": 40, "max_lineno": 42}, "calls": ["hash"]}, "validate": {"args": ["self", "str_value"], "min_max_lineno": {"min_lineno": 43, "max_lineno": 45}}, "__repr__": {"args": ["self"], "min_max_lineno": {"min_lineno": 46, "max_lineno": 48}}}}, "WordTransform": {"min_max_lineno": {"min_lineno": 50, "max_lineno": 82}, "methods": {"__init__": {"args": ["self", "before_str", "after_str"], "min_max_lineno": {"min_lineno": 51, "max_lineno": 54}}, "transform": {"args": ["self", "str_value"], "min_max_lineno": {"min_lineno": 55, "max_lineno": 70}, "calls": ["str_value.replace", "random.randrange", "len", "m.span", "len", "len", "regex.finditer"], "store_vars_calls": {"idx": "random.randrange"}}, "__eq__": {"args": ["self", "o"], "min_max_lineno": {"min_lineno": 71, "max_lineno": 73}}, "__hash__": {"args": ["self"], "min_max_lineno": {"min_lineno": 74, "max_lineno": 76}, "calls": ["hash"]}, "validate": {"args": ["self", "str_value"], "min_max_lineno": {"min_lineno": 77, "max_lineno": 79}}, "__repr__": {"args": ["self"], "min_max_lineno": {"min_lineno": 80, "max_lineno": 82}}}}, "CharNoisyChannel": {"min_max_lineno": {"min_lineno": 84, "max_lineno": 173}, "methods": {"__init__": {"args": ["self"], "min_max_lineno": {"min_lineno": 85, "max_lineno": 87}}, "longest_common_substring": {"args": ["self", "str1", "str2"], "min_max_lineno": {"min_lineno": 88, "max_lineno": 97}, "calls": ["difflib.SequenceMatcher", "difflib.SequenceMatcher.find_longest_match", "len", "len"], "store_vars_calls": {"seqMatch": "SequenceMatcher", "match": "seqMatch.find_longest_match"}}, "similarity": {"args": ["self", "str1", "str2"], "min_max_lineno": {"min_lineno": 98, "max_lineno": 109}, "calls": ["collections.Counter", "collections.Counter", "sum", "list", "list", "c.values", "len", "len"], "store_vars_calls": {"counter1": "Counter", "counter2": "Counter", "n": "sum"}}, "learn_transformation": {"args": ["self", "error_str", "cleaned_str"], "returns": [["valid_trans"]], "min_max_lineno": {"min_lineno": 110, "max_lineno": 145}, "calls": ["noisy_channel.CharNoisyChannel.longest_common_substring", "list", "noisy_channel.CharTransform", "valid_trans.extend", "valid_trans.extend", "set", "noisy_channel.CharNoisyChannel.similarity", "noisy_channel.CharNoisyChannel.similarity", "noisy_channel.CharNoisyChannel.similarity", "noisy_channel.CharNoisyChannel.similarity", "valid_trans.append", "valid_trans.append", "noisy_channel.CharNoisyChannel.learn_transformation", "noisy_channel.CharNoisyChannel.learn_transformation", "valid_trans.extend", "valid_trans.extend", "noisy_channel.CharTransform", "noisy_channel.CharTransform", "noisy_channel.CharNoisyChannel.similarity", "noisy_channel.CharNoisyChannel.similarity", "noisy_channel.CharNoisyChannel.similarity", "noisy_channel.CharNoisyChannel.similarity", "valid_trans.append", "valid_trans.append", "noisy_channel.CharNoisyChannel.learn_transformation", "noisy_channel.CharNoisyChannel.learn_transformation", "noisy_channel.CharTransform", "noisy_channel.CharTransform"], "store_vars_calls": {"l": "self.longest_common_substring"}}, "fit": {"args": ["self", "string_pairs"], "min_max_lineno": {"min_lineno": 146, "max_lineno": 159}, "calls": ["collections.Counter", "sum", "transforms.extend", "collections.Counter.values", "noisy_channel.CharNoisyChannel.learn_transformation", "collections.Counter.items"], "store_vars_calls": {"counter": "Counter", "sum_counter": "sum"}}, "get_exceptions": {"args": ["self"], "min_max_lineno": {"min_lineno": 160, "max_lineno": 173}, "calls": ["list", "collections.Counter", "collections.Counter", "list", "itertools.chain.from_iterable", "itertools.chain.from_iterable", "set", "noisy_channel.CharNoisyChannel.rule2prob.keys", "list", "list", "kbclean.utils.features.attribute.xngrams", "collections.Counter.keys", "collections.Counter.keys"], "store_vars_calls": {"rule_values": "list", "one_grams": "Counter", "two_ngrams": "Counter"}}}}, "WordNoisyChannel": {"extend": ["CharNoisyChannel"], "min_max_lineno": {"min_lineno": 175, "max_lineno": 220}, "methods": {"learn_transformation": {"args": ["self", "error_str", "cleaned_str"], "min_max_lineno": {"min_lineno": 176, "max_lineno": 184}, "calls": ["noisy_channel.wskeep_tokenize", "noisy_channel.wskeep_tokenize", "noisy_channel.WordNoisyChannel.learn_transformation_tokens"], "store_vars_calls": {"error_tokens": "wskeep_tokenize", "cleaned_tokens": "wskeep_tokenize"}}, "learn_transformation_tokens": {"args": ["self", "error_tokens", "cleaned_tokens"], "returns": [["valid_trans"]], "min_max_lineno": {"min_lineno": 185, "max_lineno": 220}, "calls": ["noisy_channel.WordNoisyChannel.longest_common_substring", "list", "noisy_channel.WordTransform", "valid_trans.extend", "valid_trans.extend", "set", "noisy_channel.WordNoisyChannel.similarity", "noisy_channel.WordNoisyChannel.similarity", "noisy_channel.WordNoisyChannel.similarity", "noisy_channel.WordNoisyChannel.similarity", "valid_trans.append", "valid_trans.append", "noisy_channel.WordNoisyChannel.learn_transformation_tokens", "noisy_channel.WordNoisyChannel.learn_transformation_tokens", "valid_trans.extend", "valid_trans.extend", "noisy_channel.WordTransform", "noisy_channel.WordTransform", "noisy_channel.WordNoisyChannel.similarity", "noisy_channel.WordNoisyChannel.similarity", "noisy_channel.WordNoisyChannel.similarity", "noisy_channel.WordNoisyChannel.similarity", "valid_trans.append", "valid_trans.append", "noisy_channel.WordNoisyChannel.learn_transformation_tokens", "noisy_channel.WordNoisyChannel.learn_transformation_tokens", "noisy_channel.WordTransform", "noisy_channel.WordTransform"], "store_vars_calls": {"l": "self.longest_common_substring"}}}}, "NCGenerator": {"min_max_lineno": {"min_lineno": 222, "max_lineno": 359}, "methods": {"__init__": {"args": ["self", "active_learner"], "min_max_lineno": {"min_lineno": 223, "max_lineno": 228}, "calls": ["noisy_channel.WordNoisyChannel", "noisy_channel.CharNoisyChannel"], "store_vars_calls": {"self.word_channel": "WordNoisyChannel", "self.char_channel": "CharNoisyChannel"}}, "_check_exceptions": {"args": ["self", "str1", "exceptions"], "returns": [["exception"]], "min_max_lineno": {"min_lineno": 229, "max_lineno": 234}}, "_get_suspicious_chars": {"args": ["self", "channel"], "min_max_lineno": {"min_lineno": 235, "max_lineno": 239}, "calls": ["channel.rule2prob.keys"]}, "_generate_transformed_data": {"args": ["self", "channel", "row_values"], "returns": [["examples"]], "min_max_lineno": {"min_lineno": 240, "max_lineno": 268}, "calls": ["random.choice", "channel.rule2prob.items", "len", "len", "len", "rule.validate", "rule.transform", "examples.append", "rules.append", "probs.append", "random.choices", "kbclean.utils.data.readers.RowBasedValue"], "store_vars_calls": {"transformed_value": "rule.transform"}}, "_filter_normal_values": {"args": ["self", "channel", "row_values", "neg_row_values"], "min_max_lineno": {"min_lineno": 269, "max_lineno": 292}, "calls": ["noisy_channel.NCGenerator._get_suspicious_chars", "set", "loguru.logger.debug", "row_values.remove", "len", "all_remove_values.extend", "removed_values.append", "len"], "store_vars_calls": {"suspicious_chars": "self._get_suspicious_chars"}}, "fit_transform_channel": {"args": ["self", "channel", "ec_pairs", "row_values", "scores"], "returns": [["data", "labels"]], "min_max_lineno": {"min_lineno": 293, "max_lineno": 350}, "calls": ["loguru.logger.debug", "noisy_channel.NCGenerator.active_learner.most_positives", "channel.fit", "loguru.logger.debug", "loguru.logger.debug", "loguru.logger.debug", "loguru.logger.debug", "noisy_channel.NCGenerator._generate_transformed_data", "noisy_channel.NCGenerator._filter_normal_values", "len", "pos_row_values.extend", "len", "len", "neg_row_values.extend", "str", "str", "str", "str", "random.choices", "random.choices", "set", "list", "list", "len", "set", "len", "set", "range", "range", "len", "len", "len", "len", "len"], "store_vars_calls": {"row_values": "self.active_learner.most_positives"}}, "fit_transform": {"args": ["self", "ec_pairs", "row_values", "scores"], "min_max_lineno": {"min_lineno": 351, "max_lineno": 359}, "calls": ["noisy_channel.NCGenerator.fit_transform_channel", "noisy_channel.NCGenerator.fit_transform_channel"]}}}, "SameNCGenerator": {"extend": ["NCGenerator"], "min_max_lineno": {"min_lineno": 361, "max_lineno": 416}, "methods": {"fit_transform_channel": {"args": ["self", "channel", "ec_pairs", "row_values", "scores"], "returns": [["data", "labels"]], "min_max_lineno": {"min_lineno": 362, "max_lineno": 416}, "calls": ["print", "loguru.logger.debug", "noisy_channel.SameNCGenerator.active_learner.most_positives", "channel.fit", "loguru.logger.debug", "loguru.logger.debug", "loguru.logger.debug", "loguru.logger.debug", "list", "noisy_channel.SameNCGenerator._generate_transformed_data", "len", "len", "neg_row_values.extend", "itertools.product", "str", "str", "str", "str", "random.choices", "random.choices", "random.choices", "set", "range", "len", "list", "len", "list", "len", "set", "set", "len", "len"], "store_vars_calls": {"row_values": "self.active_learner.most_positives"}}}}, "CombinedNCGenerator": {"extend": ["NCGenerator"], "min_max_lineno": {"min_lineno": 418, "max_lineno": 427}, "methods": {"__init__": {"args": ["self", "active_learner"], "min_max_lineno": {"min_lineno": 419, "max_lineno": 422}, "calls": ["noisy_channel.NCGenerator", "noisy_channel.SameNCGenerator"], "store_vars_calls": {"self.op_generator": "NCGenerator", "self.same_generator": "SameNCGenerator"}}, "fit_transform": {"args": ["self", "ec_pairs", "row_values", "scores"], "min_max_lineno": {"min_lineno": 423, "max_lineno": 427}, "calls": ["noisy_channel.CombinedNCGenerator.op_generator.fit_transform", "noisy_channel.CombinedNCGenerator.same_generator.fit_transform"]}}}}, "functions": {"wskeep_tokenize": {"args": ["s"], "min_max_lineno": {"min_lineno": 15, "max_lineno": 17}, "calls": ["regex.split"]}}, "is_test": false}