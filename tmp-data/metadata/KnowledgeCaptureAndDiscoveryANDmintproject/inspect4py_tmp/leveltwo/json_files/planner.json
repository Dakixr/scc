{"file": {"path": "/Users/dakixr/Desktop/github/scc/tmp-data/metadata/KnowledgeCaptureAndDiscoveryANDmintproject/P4ML-UI/dsbox-ta2/python/dsbox/planner/leveltwo/planner.py", "fileNameBase": "planner", "extension": "py"}, "dependencies": [{"from_module": "dsbox.planner.common.library", "import": "PrimitiveLibrary", "type": "external"}, {"from_module": "dsbox.planner.common.pipeline", "import": "Pipeline", "type": "external"}, {"from_module": "dsbox.planner.common.pipeline", "import": "PipelineExecutionResult", "type": "external"}, {"from_module": "dsbox.schema.data_profile", "import": "DataProfile", "type": "external"}, {"from_module": "dsbox.profiler.data.data_profiler", "import": "DataProfiler", "type": "external"}, {"import": "os", "type": "external"}, {"import": "sys", "type": "external"}, {"import": "copy", "type": "external"}, {"import": "time", "type": "external"}, {"import": "itertools", "type": "external"}, {"import": "traceback", "type": "external"}, {"import": "numpy", "alias": "np", "type": "external"}, {"import": "pandas", "alias": "pd", "type": "external"}], "classes": {"LevelTwoPlanner": {"doc": {"long_description": "The function \"expand_pipeline\" is used to expand a Level 1 Pipeline (which\ncontains modeling and possibly featurization steps) into a \"Level 2 pipeline\"\nthat can be executed by making sure that the provided data satisfies preconditions\nof steps. This is done by inserting \"Glue\" or \"PreProcessing\" primitives into\nthe pipeline.\n\nThe function \"patch_and_execute_pipeline\" is used to execute a Level 2 Pipeline\nand while executing ensure that the intermediate data that is produced does indeed\nmatch the data profile that was expected in the \"expand_pipeline\" function. If it\ndoes not match, then some more \"glue\" components are patched in to ensure compliance\nwith primitive preconditions. The result of this function is a list of\n(patched_pipeline, metric_value) tuples. The metric_value is the value of the type of\nmetric that is passed to the function. Examples are \"accuracy\", \"f1_macro\", etc.", "short_description": "The Level-2 DSBox Planner.", "full": "The Level-2 DSBox Planner.\n\nThe function \"expand_pipeline\" is used to expand a Level 1 Pipeline (which\ncontains modeling and possibly featurization steps) into a \"Level 2 pipeline\"\nthat can be executed by making sure that the provided data satisfies preconditions\nof steps. This is done by inserting \"Glue\" or \"PreProcessing\" primitives into\nthe pipeline.\n\nThe function \"patch_and_execute_pipeline\" is used to execute a Level 2 Pipeline\nand while executing ensure that the intermediate data that is produced does indeed\nmatch the data profile that was expected in the \"expand_pipeline\" function. If it\ndoes not match, then some more \"glue\" components are patched in to ensure compliance\nwith primitive preconditions. The result of this function is a list of\n(patched_pipeline, metric_value) tuples. The metric_value is the value of the type of\nmetric that is passed to the function. Examples are \"accuracy\", \"f1_macro\", etc."}, "extend": ["object"], "min_max_lineno": {"min_lineno": 19, "max_lineno": 368}, "methods": {"__init__": {"args": ["self", "libdir", "helper"], "min_max_lineno": {"min_lineno": 38, "max_lineno": 43}, "calls": ["dsbox.planner.common.library.PrimitiveLibrary"], "store_vars_calls": {"self.glues": "PrimitiveLibrary"}}, "expand_pipeline": {"args": ["self", "pipeline", "profile", "mod_profile", "start_index"], "returns": [["npipes"]], "min_max_lineno": {"min_lineno": 57, "max_lineno": 110}, "calls": ["planner.LevelTwoPlanner._get_pipeline_issues", "range", "pipeline.length", "planner.LevelTwoPlanner.expand_pipeline", "pipeline.length", "pipeline.getPrimitiveAt", "planner.LevelTwoPlanner._remove_duplicate_pipelines", "len", "planner.LevelTwoPlanner._create_subpipelines", "len", "pipelines.append", "npipelines.append", "len", "pipeline.clone", "pipeline.clone.replaceSubpipelineAt", "planner.LevelTwoPlanner._predict_profile", "planner.LevelTwoPlanner.expand_pipeline", "pipeline.clone", "planner.LevelTwoPlanner._remove_redundant_processing_primitives", "pipeline.length", "pipelines.append", "subpipe.length", "pipelines.append", "npipe.clone"], "store_vars_calls": {"issues": "self._get_pipeline_issues", "npipes": "self.expand_pipeline", "primitive": "pipeline.getPrimitiveAt", "subpipes": "self._create_subpipelines", "l2_pipeline": "pipeline.clone", "cprofile": "self._predict_profile"}}, "patch_and_execute_pipeline": {"args": ["self", "pipeline", "df", "df_lbl"], "returns": [["exec_pipeline"]], "min_max_lineno": {"min_lineno": 122, "max_lineno": 193}, "calls": ["print", "sys.stdout.flush", "pipeline.clone", "planner.LevelTwoPlanner.execution_cache.get", "planner.LevelTwoPlanner.primitive_cache.get", "print", "sys.stdout.flush", "dsbox.schema.data_profile.DataProfile", "planner.LevelTwoPlanner.helper.featurise", "sys.stderr.write", "traceback.print_exc", "copy.copy", "planner.LevelTwoPlanner.helper.cross_validation_score", "dsbox.planner.common.pipeline.PipelineExecutionResult", "planner.LevelTwoPlanner.helper.execute_primitive", "copy.copy", "len"], "store_vars_calls": {"exec_pipeline": "pipeline.clone", "df": "self.helper.execute_primitive", "cur_profile": "DataProfile", "exec_pipeline.planner_result": "PipelineExecutionResult"}}, "_remove_redundant_processing_primitives": {"args": ["self", "pipeline", "profile"], "returns": [["curpipe"]], "min_max_lineno": {"min_lineno": 194, "max_lineno": 220}, "calls": ["copy.copy", "copy.copy.length", "copy.copy.primitives.pop", "planner.LevelTwoPlanner._get_pipeline_issues", "len"], "store_vars_calls": {"curpipe": "copy.copy", "prim": "curpipe.primitives.pop", "issues": "self._get_pipeline_issues"}}, "_remove_duplicate_pipelines": {"args": ["self", "pipelines"], "returns": [["pipes"]], "min_max_lineno": {"min_lineno": 221, "max_lineno": 233}, "calls": ["set", "str", "pipes.append", "pipes.append"], "store_vars_calls": {"pipeset": "set", "hash": "str"}}, "_get_pipeline_issues": {"args": ["self", "pipeline", "profile"], "returns": [["unmet_requirements"]], "min_max_lineno": {"min_lineno": 234, "max_lineno": 249}, "calls": ["planner.LevelTwoPlanner._get_predicted_data_profiles", "planner.LevelTwoPlanner._get_pipeline_requirements", "range", "pipeline.length", "prim_prec.keys", "unmet_requirements.append", "profile.profile.get"], "store_vars_calls": {"profiles": "self._get_predicted_data_profiles", "requirements": "self._get_pipeline_requirements"}}, "_get_predicted_data_profiles": {"args": ["self", "pipeline", "profile"], "returns": [["profiles"]], "min_max_lineno": {"min_lineno": 250, "max_lineno": 261}, "calls": ["copy.deepcopy", "range", "pipeline.getPrimitiveAt", "copy.deepcopy", "pipeline.getPrimitiveAt.effects.keys", "profiles.append", "pipeline.length"], "store_vars_calls": {"curprofile": "copy.deepcopy", "primitive": "pipeline.getPrimitiveAt", "nprofile": "copy.deepcopy"}}, "_get_pipeline_requirements": {"args": ["self", "pipeline"], "returns": [["requirements"]], "min_max_lineno": {"min_lineno": 262, "max_lineno": 282}, "calls": ["range", "pipeline.length", "pipeline.getPrimitiveAt", "pipeline.getPrimitiveAt.preconditions.keys", "requirements.append", "range", "pipeline.getPrimitiveAt", "pipeline.getPrimitiveAt.effects.keys", "pipeline.getPrimitiveAt.preconditions.get"], "store_vars_calls": {"primitive": "pipeline.getPrimitiveAt", "last_prim": "pipeline.getPrimitiveAt"}}, "_create_subpipelines": {"args": ["self", "primitive", "prim_requirements"], "returns": [["mainlst"]], "min_max_lineno": {"min_lineno": 283, "max_lineno": 319}, "calls": ["list", "itertools.permutations", "dsbox.planner.common.pipeline.Pipeline", "planner.LevelTwoPlanner.glues.getPrimitivesByEffect", "len", "dsbox.planner.common.pipeline.Pipeline.insertPrimitiveAt", "len", "pipe.clone", "pipe.clone.insertPrimitiveAt", "newlst.append"], "store_vars_calls": {"requirement_permutations": "list", "xpipe": "Pipeline", "glues": "self.glues.getPrimitivesByEffect", "cpipe": "pipe.clone"}}, "_create_subpipelines_new": {"args": ["self", "primitive", "prim_requirements"], "returns": [["mainlst"]], "min_max_lineno": {"min_lineno": 320, "max_lineno": 360}, "calls": ["list", "itertools.permutations", "dsbox.planner.common.pipeline.Pipeline", "planner.LevelTwoPlanner.primitive_detail.getPrimitivesByEffect", "len", "dsbox.planner.common.pipeline.Pipeline.insertPrimitiveAt", "len", "pipe.clone", "pipe.clone.insertPrimitiveAt", "newlst.append"], "store_vars_calls": {"requirement_permutations": "list", "xpipe": "Pipeline", "primitive_detail": "self.primitive_detail.getPrimitivesByEffect", "cpipe": "pipe.clone"}}, "_predict_profile": {"args": ["self", "pipeline", "profile"], "returns": [["curprofile"]], "min_max_lineno": {"min_lineno": 361, "max_lineno": 368}, "calls": ["copy.deepcopy", "primitive.effects.keys"], "store_vars_calls": {"curprofile": "copy.deepcopy"}}}}}, "is_test": false}