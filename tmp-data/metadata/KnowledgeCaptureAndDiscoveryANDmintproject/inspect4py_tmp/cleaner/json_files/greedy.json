{"file": {"path": "/Users/dakixr/Desktop/github/scc/tmp-data/metadata/KnowledgeCaptureAndDiscoveryANDmintproject/P4ML-UI/dsbox-cleaning/dsbox/datapreprocessing/cleaner/greedy.py", "fileNameBase": "greedy", "extension": "py"}, "dependencies": [{"import": "numpy", "alias": "np", "type": "external"}, {"import": "pandas", "alias": "pd", "type": "external"}, {"import": "missing_value_pred", "alias": "mvp", "type": "internal"}, {"from_module": "primitive_interfaces.supervised_learning", "import": "SupervisedLearnerPrimitiveBase", "type": "external"}, {"from_module": "primitive_interfaces.base", "import": "CallMetadata", "type": "external"}, {"from_module": "typing", "import": "NamedTuple", "type": "external"}, {"from_module": "typing", "import": "Sequence", "type": "external"}, {"import": "stopit", "type": "external"}, {"import": "math", "type": "external"}], "classes": {"GreedyImputation": {"doc": {"long_description": "Parameters:\n----------\nverbose: Integer\n    Control the verbosity\n\nAttributes:\n----------\nimputation_strategies: list of string,\n    each is a standalone simple imputation method\n\nbest_imputation: dict. key: column name; value: trained imputation method (parameters)\n        which is one of the imputation_strategies\n\nmodel: a sklearn machine learning class\n    The machine learning model that will be used to evaluate the imputation strategies\n\nscorer: a sklearn metrics class\n    The metrics that will be used", "short_description": "Impute the missing value by greedy search of the combinations of standalone simple imputation method.", "full": "Impute the missing value by greedy search of the combinations of standalone simple imputation method.\n\nParameters:\n----------\nverbose: Integer\n    Control the verbosity\n\nAttributes:\n----------\nimputation_strategies: list of string,\n    each is a standalone simple imputation method\n\nbest_imputation: dict. key: column name; value: trained imputation method (parameters)\n        which is one of the imputation_strategies\n\nmodel: a sklearn machine learning class\n    The machine learning model that will be used to evaluate the imputation strategies\n\nscorer: a sklearn metrics class\n    The metrics that will be used"}, "min_max_lineno": {"min_lineno": 19, "max_lineno": 357}, "methods": {"__init__": {"args": ["self", "verbose"], "min_max_lineno": {"min_lineno": 44, "max_lineno": 52}}, "set_params": {"args": ["self"], "min_max_lineno": {"min_lineno": 54, "max_lineno": 58}, "calls": ["len"]}, "get_params": {"args": ["self"], "min_max_lineno": {"min_lineno": 59, "max_lineno": 64}, "calls": ["Params", "Params", "dict"]}, "get_call_metadata": {"args": ["self"], "min_max_lineno": {"min_lineno": 66, "max_lineno": 68}, "calls": ["primitive_interfaces.base.CallMetadata"]}, "set_training_data": {"doc": {"short_description": "Sets training data of this primitive.", "args": {"inputs": {"description": "The inputs.", "type_name": "Sequence[Input]", "is_optional": false}, "outputs": {"description": "The outputs.", "type_name": "Sequence[Output]", "is_optional": false}}}, "args": ["self"], "min_max_lineno": {"min_lineno": 70, "max_lineno": 84}}, "fit": {"doc": {"long_description": "-> greedySearch\n\nfor the method that not trainable, do nothing:\n-> interatively regression\n-> other\n\nParameters:\n----------\ndata: pandas dataframe\nlabel: pandas series, used for the trainable methods", "short_description": "train imputation parameters. Now support:"}, "args": ["self"], "min_max_lineno": {"min_lineno": 87, "max_lineno": 138}, "calls": ["stopit.ThreadingTimeout", "isinstance", "greedy.GreedyImputation.set_model_scorer", "greedy.GreedyImputation.__imputationGreedySearch", "greedy.GreedyImputation.train_x.copy", "greedy.GreedyImputation.train_y.copy", "greedy.GreedyImputation.train_x[].copy", "greedy.GreedyImputation.train_y[].copy", "print", "print"], "store_vars_calls": {"self.best_imputation": "self.__imputationGreedySearch", "data": "self.train_x[].copy", "label": "self.train_y[].copy"}}, "produce": {"doc": {"long_description": "to complete the data, based on the learned parameters, support:\n-> greedy search\n\nalso support the untrainable methods:\n-> iteratively regression\n-> other\n\nParameters:\n----------\ndata: pandas dataframe\nlabel: pandas series, used for the evaluation of imputation\n\nTODO:\n----------\n1. add evaluation part for __simpleImpute()", "short_description": "precond: run fit() before"}, "args": ["self"], "min_max_lineno": {"min_lineno": 140, "max_lineno": 197}, "calls": ["isinstance", "inputs[].copy.keys", "ValueError", "inputs.copy", "inputs[].copy", "stopit.ThreadingTimeout", "greedy.GreedyImputation.__simpleImpute", "pandas.DataFrame", "print", "print"], "store_vars_calls": {"keys": "data.keys", "data": "inputs[].copy", "data_clean": "self.__simpleImpute"}}, "set_model_scorer": {"doc": {"long_description": "also possible to mannually set", "short_description": "figure out what model and scorer should be used for given dataset (label)"}, "args": ["self", "model", "scorer"], "min_max_lineno": {"min_lineno": 201, "max_lineno": 223}, "calls": ["greedy.GreedyImputation.__isCat_95in10", "LogisticRegression", "make_scorer", "SVR", "make_scorer"], "store_vars_calls": {"is_classification": "self.__isCat_95in10", "self.model": "SVR", "self.scorer": "make_scorer"}}, "__imputationGreedySearch": {"doc": {"short_description": "running greedy search for imputation combinations"}, "args": ["self", "data", "label"], "returns": [["best_imputation"]], "min_max_lineno": {"min_lineno": 227, "max_lineno": 282}, "calls": ["missing_value_pred.df2np.keys", "missing_value_pred.df2np", "float", "range", "len", "len", "float", "len", "range", "print", "print", "len", "len", "range", "print", "len", "missing_value_pred.imputeData", "greedy.GreedyImputation.__evaluation", "min", "print"], "store_vars_calls": {"col_names": "data.keys", "data": "mvp.df2np", "min_score": "min", "data_clean": "mvp.imputeData", "score": "self.__evaluation"}}, "__isCat_95in10": {"doc": {"long_description": "hardcoded rule for identifying (integer/string) categorical column", "short_description": "copied from dsbox.datapreprocessing.cleaner.encoder:"}, "args": ["self", "label"], "min_max_lineno": {"min_lineno": 284, "max_lineno": 291}, "calls": ["label.keys", "col.value_counts().head().sum", "float", "col.count", "col.value_counts().head", "col.value_counts"]}, "__simpleImpute": {"doc": {"long_description": "Parameters:\n----------\ndata: pandas dataframe\nstrategies_dict: dict. maps: col_name -> imputation_method\n    imputation strategies combination", "short_description": "impute the data using given strategies"}, "args": ["self", "data", "strategies_dict", "verbose"], "returns": [["data_clean"]], "min_max_lineno": {"min_lineno": 292, "max_lineno": 322}, "calls": ["missing_value_pred.df2np.keys", "missing_value_pred.df2np", "range", "print", "missing_value_pred.imputeData", "len", "strategies_dict.keys", "strategies.append", "strategies.append"], "store_vars_calls": {"col_names": "data.keys", "data": "mvp.df2np", "data_clean": "mvp.imputeData"}}, "__evaluation": {"doc": {"long_description": "Parameters:\n----------\ndata_clean: the clean dataset, missing values imputed already\nlabel: the label for data_clean", "short_description": "using defined model and scorer to evaluation the cleaned dataset"}, "args": ["self", "data_clean", "label"], "returns": [["score"]], "min_max_lineno": {"min_lineno": 323, "max_lineno": 357}, "calls": ["numpy.isnan().any", "numpy.isnan().any", "sum", "greedy.GreedyImputation.model.fit", "greedy.GreedyImputation.scorer", "train_test_split", "print", "print", "print", "train_test_split", "numpy.isnan", "numpy.isnan", "print"], "store_vars_calls": {"mask_train": "np.isnan().any", "mask_test": "np.isnan().any", "num_removed_test": "sum", "model": "self.model.fit", "score": "self.scorer"}}}}}, "body": {"calls": ["typing.NamedTuple"], "store_vars_calls": {"Params": "NamedTuple"}}, "is_test": false}