{"file": {"path": "/Users/dakixr/Desktop/github/scc/tmp-data/metadata/KnowledgeCaptureAndDiscoveryANDmintproject/P4ML-UI/dsbox-cleaning/dsbox/datapreprocessing/cleaner/knn.py", "fileNameBase": "knn", "extension": "py"}, "dependencies": [{"import": "numpy", "alias": "np", "type": "external"}, {"import": "pandas", "alias": "pd", "type": "external"}, {"from_module": "fancyimpute", "import": "KNN", "alias": "knn", "type": "external"}, {"import": "missing_value_pred", "alias": "mvp", "type": "internal"}, {"from_module": "primitive_interfaces.transformer", "import": "TransformerPrimitiveBase", "type": "external"}, {"from_module": "primitive_interfaces.base", "import": "CallMetadata", "type": "external"}, {"from_module": "typing", "import": "NamedTuple", "type": "external"}, {"from_module": "typing", "import": "Sequence", "type": "external"}, {"import": "stopit", "type": "external"}, {"import": "math", "type": "external"}], "classes": {"KNNImputation": {"doc": {"long_description": "This class is a wrapper from fancyimpute-knn\n\nParameters:\n----------\nk: the number of nearest neighbors\n\nverbose: Integer\n    Control the verbosity", "short_description": "Impute the missing value using k nearest neighbors (weighted average). ", "full": "Impute the missing value using k nearest neighbors (weighted average). \nThis class is a wrapper from fancyimpute-knn\n\nParameters:\n----------\nk: the number of nearest neighbors\n\nverbose: Integer\n    Control the verbosity"}, "min_max_lineno": {"min_lineno": 16, "max_lineno": 108}, "methods": {"__init__": {"args": ["self", "verbose"], "min_max_lineno": {"min_lineno": 30, "max_lineno": 37}}, "get_call_metadata": {"args": ["self"], "min_max_lineno": {"min_lineno": 39, "max_lineno": 41}, "calls": ["primitive_interfaces.base.CallMetadata"]}, "produce": {"doc": {"long_description": "to complete the data, based on the learned parameters, support:\n-> greedy search\n\nalso support the untrainable methods:\n-> iteratively regression\n-> other\n\nParameters:\n----------\ndata: pandas dataframe\nlabel: pandas series, used for the evaluation of imputation\n\nTODO:\n----------\n1. add evaluation part for __simpleImpute()", "short_description": "precond: run fit() before"}, "args": ["self"], "min_max_lineno": {"min_lineno": 43, "max_lineno": 98}, "calls": ["isinstance", "inputs[].copy.keys", "ValueError", "inputs.copy", "inputs[].copy", "stopit.ThreadingTimeout", "fancyimpute.KNN.KNNImputation.__knn", "pandas.DataFrame", "print"], "store_vars_calls": {"keys": "data.keys", "data": "inputs[].copy", "data_clean": "self.__knn"}}, "__knn": {"doc": {"short_description": "wrap fancyimpute-knn"}, "args": ["self", "test_data"], "returns": [["complete_data"]], "min_max_lineno": {"min_lineno": 101, "max_lineno": 108}, "calls": ["missing_value_pred.df2np", "fancyimpute.KNN.complete", "fancyimpute.KNN"], "store_vars_calls": {"test_data": "mvp.df2np", "complete_data": "knn().complete"}}}}}, "is_test": false}