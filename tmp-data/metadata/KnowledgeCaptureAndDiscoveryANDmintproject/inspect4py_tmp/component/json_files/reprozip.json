{"file": {"path": "/Users/dakixr/Desktop/github/scc/tmp-data/metadata/KnowledgeCaptureAndDiscoveryANDmintproject/mic/src/mic/component/reprozip.py", "fileNameBase": "reprozip", "extension": "py"}, "dependencies": [{"import": "re", "type": "external"}, {"from_module": "pathlib", "import": "Path", "type": "external"}, {"from_module": "typing", "import": "List", "type": "external"}, {"import": "logging", "type": "external"}, {"import": "click", "type": "external"}, {"from_module": "mic.config_yaml", "import": "slugify", "type": "external"}, {"import": "shlex", "type": "external"}, {"from_module": "mic._utils", "import": "get_mic_logger", "type": "external"}, {"import": "os", "type": "external"}], "functions": {"relative": {"args": ["files", "user_execution_directory"], "returns": [["response"]], "min_max_lineno": {"min_lineno": 16, "max_lineno": 27}, "calls": ["pathlib.Path().relative_to", "mic.config_yaml.slugify", "str().replace", "str", "str().replace", "pathlib.Path", "str", "str"], "store_vars_calls": {"path": "Path().relative_to", "name": "slugify"}}, "get_inputs_outputs_reprozip": {"args": ["spec", "user_execution_directory", "aggregrate"], "min_max_lineno": {"min_lineno": 29, "max_lineno": 53}, "calls": ["list", "set", "isinstance", "isinstance", "pathlib.Path", "pathlib.Path().relative_to", "inputs.append", "isinstance", "pathlib.Path", "pathlib.Path().relative_to", "inputs.append", "inputs.append", "isinstance", "inputs.append", "pathlib.Path", "str", "pathlib.Path", "str", "isinstance", "inputs.append", "str", "pathlib.Path().relative_to", "pathlib.Path"]}, "get_outputs_reprozip": {"args": ["spec", "user_execution_directory", "aggregrate"], "min_max_lineno": {"min_lineno": 55, "max_lineno": 74}, "calls": ["list", "set", "isinstance", "pathlib.Path", "pathlib.Path().relative_to", "isinstance", "outputs.append", "outputs.append", "outputs.append", "pathlib.Path", "str", "str", "pathlib.Path().relative_to", "pathlib.Path"]}, "get_parameters_reprozip": {"args": ["spec", "reprozip_spec"], "returns": [["spec"]], "min_max_lineno": {"min_lineno": 76, "max_lineno": 153}, "calls": ["line.find", "shlex.split", "quoted_run.append", "quoted_run.append", "click.secho", "click.secho", "logging.info", "map", "len", "i.find", "spec[].update", "click.echo", "logging.debug", "len", "float", "int", "str", "i.find", "os.path.exists", "i.replace", "spec[].keys", "i.replace", "spec[].keys"], "store_vars_calls": {"start_pos": "line.find", "invocation_split": "shlex.split"}}, "generate_pre_runner": {"args": ["spec", "user_execution_directory"], "returns": [["code"]], "min_max_lineno": {"min_lineno": 154, "max_lineno": 179}, "calls": ["code_items.items", "inputs_items.items", "logging.debug", "paths.append", "paths.append", "click.secho", "logging.error", "logging.error", "click.secho", "pathlib.Path", "pathlib.Path", "isinstance", "repr", "len", "str"], "store_vars_calls": {"items": "inputs_items.items"}}, "generate_runner": {"args": ["spec", "user_execution_directory", "mic_inputs", "mic_outputs", "mic_parameters"], "returns": [["code"]], "min_max_lineno": {"min_lineno": 181, "max_lineno": 203}, "calls": ["logging.debug", "reprozip.format_code", "str", "map", "pathlib.Path().relative_to", "repr", "quoted_run.append", "quoted_run.append", "pathlib.Path"], "store_vars_calls": {"code_line": "format_code", "dir_": "str"}}, "format_code": {"doc": {"long_description": "Ex:\n./my_script.py -i inp.txt -p 4 -o out.txt\nBecomes:\n./my_script.py -i ${inp_txt} -p ${param_1} -o ${out_txt}\nNote: this works by checking if a input/output on the command like matches an i/o from the yaml", "short_description": "Replaces any reference to inputs and outputs with the variable name of the yaml reference", "returns": {"is_generator": false}}, "args": ["code", "mic_inputs", "mic_outputs", "mic_parameters"], "min_max_lineno": {"min_lineno": 205, "max_lineno": 263}, "calls": ["shlex.split", "new_code.append", "str", "item.lower", "new_code.append", "[].lower", "logging.warning", "click.secho", "known_bad_keys.append", "new_code.append", "new_code.append", "click.secho", "logging.warning", "known_bad_keys.append"], "store_vars_calls": {"code": "shlex.split"}}, "find_code_files": {"args": ["spec", "inputs", "config_files", "user_execution_directory"], "min_max_lineno": {"min_lineno": 265, "max_lineno": 288}, "calls": ["list", "set", "code_files.append", "isinstance", "run[].split", "pathlib.Path", "str", "pathlib.Path.is_file", "reprozip.is_executable", "str", "code_files.append", "click.echo", "logging.debug", "pathlib.Path().relative_to", "pathlib.Path"], "store_vars_calls": {"files_path": "Path"}}, "is_executable": {"args": ["file_path"], "min_max_lineno": {"min_lineno": 290, "max_lineno": 298}, "calls": ["print", "os.path.splitext", "ext.lower"]}, "extract_parameters_from_command": {"args": ["command_line"], "min_max_lineno": {"min_lineno": 300, "max_lineno": 305}, "calls": ["re.finditer", "enumerate", "print", "match.group"], "store_vars_calls": {"matches": "re.finditer"}}}, "body": {"calls": ["mic._utils.get_mic_logger", "pathlib.Path"], "store_vars_calls": {"logging": "get_mic_logger", "default_path": "Path"}}, "is_test": false}