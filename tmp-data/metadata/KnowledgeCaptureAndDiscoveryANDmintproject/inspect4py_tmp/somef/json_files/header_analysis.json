{"file": {"path": "/Users/dakixr/Desktop/github/scc/tmp-data/metadata/KnowledgeCaptureAndDiscoveryANDmintproject/somef/src/somef/header_analysis.py", "fileNameBase": "header_analysis", "extension": "py"}, "dependencies": [{"import": "re", "type": "external"}, {"import": "string", "type": "external"}, {"import": "numpy", "alias": "np", "type": "external"}, {"import": "pandas", "alias": "pd", "type": "external"}, {"from_module": "textblob", "import": "Word", "type": "external"}, {"import": "parser_somef", "type": "internal"}], "functions": {"extract_bash_code": {"doc": {"short_description": "Function to detect code blocks"}, "args": ["text"], "returns": [["output"]], "min_max_lineno": {"min_lineno": 82, "max_lineno": 91}, "calls": ["text.split", "len", "enumerate", "output.append"], "store_vars_calls": {"splitted": "text.split"}}, "extract_header_content": {"doc": {"short_description": "Function designed to extract headers and contents of text and place it in a dataframe"}, "args": ["text"], "returns": [["df", "none_header_content"]], "min_max_lineno": {"min_lineno": 93, "max_lineno": 110}, "calls": ["print", "parser_somef.extract_headers", "parser_somef.extract_headers.keys", "parser_somef.extract_content_per_header", "parser_somef.extract_headers_parents", "pandas.DataFrame", "zip", "df[].replace", "df.append.dropna", "df.append.append", "header.append"], "store_vars_calls": {"headers": "parser_somef.extract_headers", "parent_headers": "parser_somef.extract_headers_parents", "df": "df.append"}}, "find_sim": {"doc": {"short_description": "Function that returns the max probability between a word and subgroup", "args": {"wordlist": {"type_name": "word group", "is_optional": false}, "wd": {"type_name": "input word", "is_optional": false}}, "returns": {"type_name": "Maximum probability between word and a category", "is_generator": false}}, "args": ["wordlist", "wd"], "min_max_lineno": {"min_lineno": 112, "max_lineno": 132}, "calls": ["len", "max", "wd.path_similarity", "sim_value.append", "wd.path_similarity"]}, "match_group": {"doc": {"short_description": "Function designed to match a word with a subgroup"}, "args": ["word_syn", "group", "threshold"], "returns": [["maxgroup"]], "min_max_lineno": {"min_lineno": 134, "max_lineno": 149}, "calls": ["dict", "group.items", "header_analysis.find_sim"], "store_vars_calls": {"simvalues": "dict", "path_sim": "find_sim"}}, "label_header": {"doc": {"short_description": "Function designed to label a header with a subgroup"}, "args": ["header"], "returns": [["label"]], "min_max_lineno": {"min_lineno": 151, "max_lineno": 164}, "calls": ["header.translate", "header.translate.strip().split", "str.maketrans", "header.translate.strip", "textblob.Word", "len", "header_analysis.match_group", "label.append"], "store_vars_calls": {"header_clean": "header.translate", "sentence": "header_clean.strip().split", "bestgroup": "match_group"}}, "label_parent_headers": {"doc": {"short_description": "label the header with a subgroup"}, "args": ["parentHeaders"], "returns": [["label"]], "min_max_lineno": {"min_lineno": 166, "max_lineno": 182}, "calls": ["header.translate", "header.translate.strip().split", "str.maketrans", "header.translate.strip", "textblob.Word", "len", "header_analysis.match_group", "label.append"], "store_vars_calls": {"header_clean": "header.translate", "sentence": "header_clean.strip().split", "bestgroup": "match_group"}}, "clean_html": {"doc": {"short_description": "Cleaner function"}, "args": ["text"], "returns": [["cleantext"]], "min_max_lineno": {"min_lineno": 184, "max_lineno": 189}, "calls": ["re.compile", "re.sub"], "store_vars_calls": {"cleanr": "re.compile", "cleantext": "re.sub"}}, "extract_categories_using_headers": {"doc": {"short_description": "Main function to extract categories using headers"}, "args": ["text"], "returns": [["group_json", "str_list"]], "min_max_lineno": {"min_lineno": 191, "max_lineno": 252}, "calls": ["header_analysis.extract_header_content", "print", "data[].apply", "data[].apply", "data.drop().join.drop", "data.drop().join.apply().stack().reset_index", "data.drop().join.drop().join", "group.rename", "group.rename", "group.rename", "group.groupby().apply().to_dict", "group.groupby().apply().to_dict.keys", "print", "data.drop().join.loc[].values.squeeze().tolist", "group.groupby().apply().to_dict.keys", "print", "len", "len", "range", "type", "data.loc[].values.squeeze().tolist.append", "header_analysis.label_header", "header_analysis.label_parent_headers", "data.drop().join.apply().stack", "data.drop().join.drop", "pandas.notna", "group.groupby().apply", "len", "data.drop().join.loc[].values.squeeze", "new_elements.append", "len", "len", "data.drop().join.apply", "group.groupby", "x.to_dict", "pandas.Series", "data[].isna"], "store_vars_calls": {"data": "data.drop().join", "groups": "data.apply().stack().reset_index", "group_json": "group.groupby().apply().to_dict", "str_list": "data.loc[].values.squeeze().tolist"}}}, "body": {"calls": ["dict", "dict.update", "dict.update", "dict.update", "dict.update", "dict.update", "dict.update", "dict.update", "dict.update", "dict.update", "dict.update", "dict.update", "dict.update", "dict.update", "dict.update"], "store_vars_calls": {"group": "dict"}}, "is_test": false}