{"file": {"path": "/Users/dakixr/Desktop/github/scc/tmp-data/metadata/KnowledgeCaptureAndDiscoveryANDmintproject/somef/src/somef/regular_expressions.py", "fileNameBase": "regular_expressions", "extension": "py"}, "dependencies": [{"import": "os", "type": "external"}, {"import": "re", "type": "external"}, {"import": "markdown", "type": "external"}, {"import": "requests", "type": "external"}, {"import": "validators", "type": "external"}, {"from_module": "urllib.parse", "import": "urlparse", "type": "external"}], "functions": {"extract_title": {"doc": {"short_description": "Regexp to extract title (first header) from a repository"}, "args": ["unfiltered_text"], "returns": [["output"]], "min_max_lineno": {"min_lineno": 9, "max_lineno": 25}, "calls": ["markdown.markdown", "markdown.markdown.split", "len", "line.startswith", "line.startswith", "re.sub"], "store_vars_calls": {"html_text": "markdown.markdown", "splitted": "html_text.split", "limit": "len", "output": "re.sub"}}, "extract_title_old": {"doc": {"short_description": "Function to extract a title based on the first header in the readme file", "returns": {"type_name": "Full title of the repo (if found)", "is_generator": false}}, "args": ["unfiltered_text"], "returns": [["title"]], "min_max_lineno": {"min_lineno": 27, "max_lineno": 54}, "calls": ["re.findall", "len", "[].strip", "[].strip", "re.findall", "title[].strip", "len", "re.split", "re.split"], "store_vars_calls": {"underline_header": "re.findall", "title": "title[].strip"}}, "extract_readthedocs": {"doc": {"short_description": "Function to extract readthedocs links from text", "returns": {"type_name": "Links to the readthedocs documentation", "is_generator": false}}, "args": ["readme_text"], "min_max_lineno": {"min_lineno": 56, "max_lineno": 73}, "calls": ["re.findall", "print", "list", "dict.fromkeys"], "store_vars_calls": {"readthedocs_links": "re.findall"}}, "extract_support_channels": {"doc": {"short_description": "Function to extract Gitter Chat, Reddit and Discord links from text", "returns": {"type_name": "Link to the Gitter Chat", "is_generator": false}}, "args": ["readme_text"], "returns": [["results"]], "min_max_lineno": {"min_lineno": 75, "max_lineno": 108}, "calls": ["readme_text.find", "readme_text.find", "readme_text.find", "readme_text.find", "readme_text.find", "results.append", "readme_text.find", "results.append", "readme_text.find", "results.append"], "store_vars_calls": {"index_gitter_chat": "readme_text.find", "init": "readme_text.find", "end": "readme_text.find"}}, "extract_repo_status": {"doc": {"short_description": "Extracts the repostatus.org badge from a given text"}, "args": ["unfiltered_text"], "returns": [["repo_status"]], "min_max_lineno": {"min_lineno": 110, "max_lineno": 119}, "calls": ["unfiltered_text.find", "unfiltered_text.find", "repo_status.replace.replace"], "store_vars_calls": {"init": "unfiltered_text.find", "end": "unfiltered_text.find", "repo_status": "repo_status.replace"}}, "extract_arxiv_links": {"doc": {"short_description": "Extracts arxiv links from a given text"}, "args": ["unfiltered_text"], "returns": [["results"]], "min_max_lineno": {"min_lineno": 121, "max_lineno": 136}, "calls": ["m.start", "m.start", "unfiltered_text.find", "results.append", "unfiltered_text.find", "results.append", "re.finditer", "re.finditer", "link.replace"], "store_vars_calls": {"end": "unfiltered_text.find"}}, "extract_wiki_links": {"doc": {"short_description": "Extracts wiki links from a given text"}, "args": ["unfiltered_text", "repo_url"], "min_max_lineno": {"min_lineno": 138, "max_lineno": 166}, "calls": ["re.findall", "list", "validators.url", "validators.url", "repo_url.endswith", "requests.get", "dict.fromkeys", "link.endswith", "output.append", "output.append", "unfiltered_text.find", "unfiltered_text[].find", "unfiltered_text[].rindex", "unfiltered_text[].find", "output.append", "len"], "store_vars_calls": {"links": "re.findall", "wiki": "requests.get"}}, "extract_logo": {"doc": {"short_description": "Extracts logos from a given text"}, "args": ["unfiltered_text", "repo_url"], "returns": [["logo"]], "min_max_lineno": {"min_lineno": 169, "max_lineno": 205}, "calls": ["unfiltered_text.lower().find", "print", "unfiltered_text.find", "unfiltered_text.find", "unfiltered_text.lower", "_.start", "len", "logo.startswith", "repo_url.replace.find", "repo_url.replace.replace", "re.finditer", "unfiltered_text.find", "unfiltered_text.find", "repo_url.replace.find", "repo_url.replace.replace", "repo_url.replace.endswith", "repo_url.replace.endswith", "img.find"], "store_vars_calls": {"index_logo": "unfiltered_text.lower().find", "init": "unfiltered_text.find", "end": "unfiltered_text.find", "repo_url": "repo_url.replace"}}, "extract_images": {"doc": {"short_description": "Extracts logos from a given text"}, "args": ["unfiltered_text", "repo_url", "local_repo"], "returns": [["logo", "images"]], "min_max_lineno": {"min_lineno": 207, "max_lineno": 276}, "calls": ["markdown.markdown", "re.findall", "urllib.parse.urlparse", "urllib.parse.urlparse.path.split", "_.start", "markdown.markdown.find", "markdown.markdown.find", "re.finditer", "img.find", "img.find", "img.find", "img.find", "img.rindex", "images.append", "img.find", "img.find", "img.find", "img.find", "img.rindex", "img.find", "regular_expressions.rename_github_image", "regular_expressions.rename_github_image", "img.find", "img.rindex", "regular_expressions.rename_github_image", "img.upper().find", "regular_expressions.rename_github_image", "images.append", "regular_expressions.rename_github_image", "img.rindex", "image_name.find", "image_name.upper().find", "regular_expressions.rename_github_image", "images.append", "regular_expressions.rename_github_image", "regular_expressions.get_alt_text_md", "get_alt_text_md().upper", "img.upper().find", "regular_expressions.rename_github_image", "images.append", "regular_expressions.get_alt_text_img", "get_alt_text_img().upper", "regular_expressions.rename_github_image", "img.upper", "regular_expressions.rename_github_image", "image_name.upper", "regular_expressions.get_alt_text_md", "img.upper", "regular_expressions.get_alt_text_img"], "store_vars_calls": {"html_text": "markdown.markdown", "img_md": "re.findall", "url": "urlparse", "path_components": "url.path.split", "init": "html_text.find", "end": "html_text.find", "start": "img.rindex", "logo": "rename_github_image"}}, "extract_images_old": {"doc": {"short_description": "Extracts images from a given text"}, "args": ["unfiltered_text", "repo_url"], "returns": [["logo", "images"]], "min_max_lineno": {"min_lineno": 279, "max_lineno": 328}, "calls": ["markdown.markdown", "_.start", "len", "print", "urllib.parse.urlparse", "urllib.parse.urlparse.path.split", "re.finditer", "markdown.markdown.find", "markdown.markdown.find", "image.rindex", "img.find", "images.append", "image.find", "images.remove", "repo_url.replace.replace", "repo_url.replace.replace", "img.startswith", "repo_url.replace.find", "repo_url.replace.replace", "repo_url.replace.endswith", "img.startswith", "repo_url.replace.find", "repo_url.replace.replace", "repo_url.replace.endswith"], "store_vars_calls": {"html_text": "markdown.markdown", "url": "urlparse", "path_components": "url.path.split", "init": "html_text.find", "end": "html_text.find", "start": "image.rindex", "repo_url": "repo_url.replace"}}, "extract_support": {"doc": {"short_description": "Extracts support channels (reddit, discord, gitter) from a given text"}, "args": ["unfiltered_text"], "returns": [["results"]], "min_max_lineno": {"min_lineno": 330, "max_lineno": 346}, "calls": ["unfiltered_text.find", "unfiltered_text.find", "unfiltered_text.find", "results.append", "unfiltered_text.find", "results.append"], "store_vars_calls": {"init": "unfiltered_text.find", "end": "unfiltered_text.find"}}, "extract_package_distributions": {"doc": {"short_description": "Extracts package distributions from a given text"}, "args": ["unfiltered_text"], "returns": [["output"]], "min_max_lineno": {"min_lineno": 348, "max_lineno": 359}, "calls": ["unfiltered_text.find", "unfiltered_text.find", "unfiltered_text.find", "requests.get"], "store_vars_calls": {"index_package_distribution": "unfiltered_text.find", "init": "unfiltered_text.find", "end": "unfiltered_text.find"}}, "extract_colab_links": {"doc": {"short_description": "Method designed to find colab notebooks in readmes", "args": {"text": {"type_name": "markdown text where the links to colab will be searched.", "is_optional": false}}, "returns": {"type_name": "A list of colab links found in the text passed as a parameter.", "is_generator": false}}, "args": ["text"], "returns": [["output"]], "min_max_lineno": {"min_lineno": 361, "max_lineno": 379}, "calls": ["re.findall", "link_url.startswith", "output.append"], "store_vars_calls": {"links": "re.findall"}}, "remove_html_tags": {"args": ["text"], "returns": [["clean_text"]], "min_max_lineno": {"min_lineno": 381, "max_lineno": 385}, "calls": ["re.compile", "re.sub"], "store_vars_calls": {"regex": "re.compile", "clean_text": "re.sub"}}, "remove_links_images": {"doc": {"short_description": "Removes links from images in a given text"}, "args": ["text"], "min_max_lineno": {"min_lineno": 386, "max_lineno": 412}, "calls": ["re.findall", "re.findall", "text.replace.strip", "text.replace.find", "text.replace.find", "text[].rindex", "text[].index", "text.replace.replace", "text[].rindex", "text[].index", "text.replace.replace"], "store_vars_calls": {"images": "re.findall", "links": "re.findall", "pos": "text.find", "init": "text[].rindex", "end": "text[].index", "text": "text.replace"}}, "extract_bibtex": {"doc": {"long_description": "Returns list of bibtex citations", "short_description": "Function takes readme text as input (cleaned from markdown notation) and runs a regex expression on top of it."}, "args": ["readme_text"], "returns": [["citations"]], "min_max_lineno": {"min_lineno": 414, "max_lineno": 422}, "calls": ["re.findall"], "store_vars_calls": {"citations": "re.findall"}}, "extract_dois": {"doc": {"short_description": "Function that takes the text of a readme file and searches if there are any DOIs badges.", "returns": {"type_name": "DOIs/identifiers associated with this software component", "is_generator": false}}, "args": ["readme_text"], "returns": [["dois"]], "min_max_lineno": {"min_lineno": 424, "max_lineno": 441}, "calls": ["re.findall", "print"], "store_vars_calls": {"dois": "re.findall"}}, "extract_binder_links": {"doc": {"long_description": "There could be multiple binder links for one reprository", "short_description": "Function that does a regex to extract binder links used as reference in the readme.", "returns": {"type_name": "Links with binder notebooks/scripts that are ready to be executed.", "is_generator": false}}, "args": ["readme_text"], "min_max_lineno": {"min_lineno": 443, "max_lineno": 462}, "calls": ["re.findall", "print", "regular_expressions.extract_colab_links", "list", "dict.fromkeys"], "store_vars_calls": {"binder_links": "re.findall", "collabs": "extract_colab_links"}}, "rename_github_image": {"doc": {"short_description": "Renames GitHub image links so they can be accessed raw"}, "args": ["img", "repo_url", "local_repo"], "returns": [["img"]], "min_max_lineno": {"min_lineno": 464, "max_lineno": 479}, "calls": ["img.startswith", "repo_url.replace.replace", "repo_url.replace.find", "repo_url.replace.replace", "repo_url.replace.endswith"], "store_vars_calls": {"repo_url": "repo_url.replace"}}, "get_alt_text_md": {"args": ["text", "image"], "min_max_lineno": {"min_lineno": 481, "max_lineno": 485}, "calls": ["text.find", "text[].rindex"]}, "get_alt_text_img": {"doc": {"short_description": "Processing alt names for images"}, "args": ["html_text", "index"], "returns": [["output"]], "min_max_lineno": {"min_lineno": 487, "max_lineno": 497}, "calls": ["html_text.find", "html_text.find", "texto.index", "texto.find"], "store_vars_calls": {"end": "texto.index"}}, "get_alt_text_html": {"doc": {"short_description": "Processing alt names for images in html"}, "args": ["text", "image"], "min_max_lineno": {"min_lineno": 499, "max_lineno": 508}, "calls": ["text.find", "text[].rindex", "text[].find", "text.find", "text.find"], "store_vars_calls": {"stop": "text.find", "start": "text[].rindex"}}}, "is_test": false}