{"file": {"path": "/Users/dakixr/Desktop/github/scc/tmp-data/metadata/KnowledgeCaptureAndDiscoveryANDmintproject/somef/src/somef/process_repository.py", "fileNameBase": "process_repository", "extension": "py"}, "dependencies": [{"import": "base64", "type": "external"}, {"import": "urllib", "type": "external"}, {"import": "os", "type": "external"}, {"import": "tempfile", "type": "external"}, {"import": "re", "type": "external"}, {"import": "zipfile", "type": "external"}, {"import": "time", "type": "external"}, {"import": "requests", "type": "external"}, {"import": "sys", "type": "external"}, {"from_module": "datetime", "import": "datetime", "type": "external"}, {"from_module": "urllib.parse", "import": "urlparse", "type": "external"}, {"import": "markdown_utils", "type": "internal"}, {"import": "extract_ontologies", "type": "internal"}, {"import": "constants", "type": "internal"}], "classes": {"GithubUrlError": {"extend": ["Exception"], "min_max_lineno": {"min_lineno": 568, "max_lineno": 571}}}, "functions": {"rate_limit_get": {"doc": {"short_description": "Function to obtain how many requests we have pending with the GitHub API"}, "returns": [["response", "date"]], "min_max_lineno": {"min_lineno": 17, "max_lineno": 42}, "calls": ["requests.get", "int", "datetime.datetime.fromtimestamp", "print", "response.json.json", "print", "time.sleep", "str"], "store_vars_calls": {"response": "response.json", "epochtime": "int", "date_reset": "datetime.fromtimestamp"}}, "load_gitlab_repository_metadata": {"doc": {"long_description": "Information kept from the repository is written in keep_keys.", "short_description": "Function uses the repository_url provided to load required information from gitlab.", "args": {"repository_url": {"type_name": "URL of the Gitlab repository to analyze", "is_optional": false}, "header": {"type_name": "headers of the repository", "is_optional": false}, "readme_only": {"type_name": "flag to indicate whether to process the full repo or just the readme", "is_optional": false}}, "returns": {"type_name": "Readme text and required metadata", "is_generator": false}}, "args": ["repository_url", "header", "readme_only"], "returns": [["text", "filtered_resp"], ["text"], ["output"]], "min_max_lineno": {"min_lineno": 44, "max_lineno": 283}, "calls": ["print", "urllib.parse.urlparse", "urllib.parse.urlparse.path.split", "process_repository.get_project_id", "print", "requests.get", "requests.get.json", "print", "print", "print", "len", "print", "len", "len", "details.json.keys", "print", "requests.get", "print", "repo_zip.decode", "crosswalk_table.items", "requests.get", "topics_resp.keys", "print", "print", "list", "readme_info.keys", "print", "process_repository.get_readme_content", "tempfile.TemporaryDirectory", "print", "requests.get", "os.path.join", "os.path.join", "os.listdir", "os.path.join", "process_repository.process_repository_files", "isinstance", "print", "print", "details.json.keys", "print", "print", "print", "print", "requests.get", "print", "get_path"], "store_vars_calls": {"url": "urlparse", "path_components": "url.path.split", "project_id": "get_project_id", "details": "requests.get", "project_details": "details.json", "repo_download": "requests.get", "text": "get_readme_content", "license_text_resp": "requests.get", "repo_zip_file": "os.path.join", "repo_extract_dir": "os.path.join", "repo_folders": "os.listdir", "repo_dir": "os.path.join", "value": "get_path", "readme": "base64.b64decode().decode"}, "functions": {"do_crosswalk": {"args": ["data", "crosswalk_table"], "returns": [["output"]], "min_max_lineno": {"min_lineno": 136, "max_lineno": 157}, "calls": ["crosswalk_table.items", "process_repository.load_gitlab_repository_metadata.do_crosswalk.get_path"], "store_vars_calls": {"value": "get_path"}, "functions": {"get_path": {"args": ["obj", "path"], "min_max_lineno": {"min_lineno": 137, "max_lineno": 148}, "calls": ["isinstance", "isinstance", "len", "get_path"]}}}}}, "load_github_repository_metadata": {"doc": {"long_description": "Information kept from the repository is written in keep_keys.", "short_description": "Function uses the repository_url provided to load required information from Github.", "returns": {"type_name": "Returns the readme text and required metadata", "is_generator": false}}, "args": ["repository_url", "header", "ignore_github_metadata", "readme_only"], "returns": [["text", "filtered_resp"], ["text"], ["output"]], "min_max_lineno": {"min_lineno": 285, "max_lineno": 535}, "calls": ["print", "urllib.parse.urlparse", "urllib.parse.urlparse.path.split", "print", "print", "repository_url.rfind", "process_repository.load_gitlab_repository_metadata", "print", "len", "print", "len", "process_repository.rate_limit_get", "print", "requests.get", "repo_zip.decode", "crosswalk_table.items", "process_repository.load_gitlab_repository_metadata.do_crosswalk"], "store_vars_calls": {"url": "urlparse", "path_components": "url.path.split", "repo_download": "requests.get", "text": "repo_zip.decode", "filtered_resp": "do_crosswalk", "license_text_resp": "requests.get", "repo_zip_file": "os.path.join", "repo_extract_dir": "os.path.join", "repo_folders": "os.listdir", "repo_dir": "os.path.join", "value": "get_path", "issue_tracker": "issue_tracker.replace"}, "functions": {"do_crosswalk": {"args": ["data", "crosswalk_table"], "returns": [["output"]], "min_max_lineno": {"min_lineno": 374, "max_lineno": 395}, "calls": ["crosswalk_table.items", "process_repository.load_gitlab_repository_metadata.do_crosswalk.get_path"], "store_vars_calls": {"value": "get_path"}, "functions": {"get_path": {"args": ["obj", "path"], "min_max_lineno": {"min_lineno": 375, "max_lineno": 386}, "calls": ["isinstance", "isinstance", "len", "get_path"]}}}}}, "load_local_repository_metadata": {"doc": {"short_description": "Function to apply somef to a local repository (already downloaded)"}, "args": ["local_repo"], "returns": [["text", "filtered_resp"]], "min_max_lineno": {"min_lineno": 537, "max_lineno": 544}, "calls": ["os.path.abspath", "process_repository.process_repository_files", "print"], "store_vars_calls": {"repo_dir": "os.path.abspath"}}, "get_project_id": {"doc": {"short_description": "Function to download a repository, given its URL"}, "args": ["repository_url"], "returns": [["project_id"]], "min_max_lineno": {"min_lineno": 546, "max_lineno": 565}, "calls": ["print", "requests.get", "str", "str.find", "requests.get.content.decode", "len", "str.find", "str.find"], "store_vars_calls": {"response": "requests.get", "response_str": "str", "init": "response_str.find", "end_bracket": "response_str.find", "comma": "response_str.find"}}, "get_readme_content": {"doc": {"short_description": "Function to retrieve the content of a readme file given its URL (github)"}, "args": ["readme_url"], "returns": [["readme_text"]], "min_max_lineno": {"min_lineno": 573, "max_lineno": 579}, "calls": ["readme_url.replace.replace", "requests.get", "requests.get.content.decode"], "store_vars_calls": {"readme_url": "readme_url.replace", "readme": "requests.get", "readme_text": "readme.content.decode"}}, "convert_to_raw_user_content_github": {"doc": {"short_description": "Converts GitHub paths into raw.githubuser content URLs, accessible by users"}, "args": ["partial", "owner", "repo_name", "repo_ref"], "min_max_lineno": {"min_lineno": 581, "max_lineno": 591}, "calls": ["re.sub.startswith", "re.sub.startswith", "re.sub.replace", "re.sub.replace", "re.sub.find", "re.sub", "urllib.parse.quote"], "store_vars_calls": {"partial": "re.sub"}}, "convert_to_raw_user_content_gitlab": {"doc": {"short_description": "Converts GitLab paths into raw.githubuser content URLs, accessible by users"}, "args": ["partial", "owner", "repo_name", "repo_ref"], "min_max_lineno": {"min_lineno": 593, "max_lineno": 600}, "calls": ["partial.replace.startswith", "partial.replace.startswith", "partial.replace.replace", "partial.replace.replace", "urllib.parse.quote"], "store_vars_calls": {"partial": "partial.replace"}}, "process_repository_files": {"doc": {"long_description": "ontologies.", "short_description": "Method that given a folder, it recognizes whether there are notebooks, dockerfiles, docs, script files or", "args": {"repo_dir": {"type_name": "path to the dir to analyze", "is_optional": false}, "filtered_resp": {"type_name": "JSON object to be completed by this method", "is_optional": false}, "repo_type": {"type_name": "GITHUB, GITLAB or LOCAL", "is_optional": false}, "owner": {"type_name": "owner of the repo (only for github/gitlab repos)", "is_optional": false}, "repo_name": {"type_name": "repository name (only for github/gitlab repos)", "is_optional": false}, "repo_ref": {"type_name": "branch (only for github/gitlab repos)", "is_optional": false}}, "returns": {"type_name": "A JSON object (filtered_resp) with the findings and the text of the readme", "is_generator": false}}, "args": ["repo_dir", "filtered_resp", "repo_type", "owner", "repo_name", "repo_ref"], "returns": [["text", "filtered_resp"]], "min_max_lineno": {"min_lineno": 602, "max_lineno": 814}, "calls": ["os.walk", "os.path.relpath", "len", "len", "len", "len", "len", "os.path.join", "filename.lower().endswith", "filename.endswith", "filename.upper", "filename.endswith", "filename.endswith", "filename.endswith", "filename.endswith", "extract_ontologies.is_file_ontology", "dir_name.lower", "os.listdir", "filename.lower", "dockerfiles.append", "filename.lower", "notebooks.append", "filename.upper", "filename.upper", "filename.upper", "filename.upper", "filename.upper", "filename.upper", "process_repository.convert_to_raw_user_content_github", "filename.upper", "filename.upper", "filename.upper", "filename.upper", "filename.upper", "filename.upper", "filename.upper", "script_files.append", "os.path.join", "ontologies.append", "os.path.join", "process_repository.convert_to_raw_user_content_github", "dockerfiles.append", "dockerfiles.append", "process_repository.convert_to_raw_user_content_github", "notebooks.append", "notebooks.append", "open", "data_file.read", "markdown_utils.unmark", "process_repository.convert_to_raw_user_content_gitlab", "os.path.join", "open", "data_file.read", "markdown_utils.unmark", "open", "data_file.read", "markdown_utils.unmark", "open", "data_file.read", "markdown_utils.unmark", "open", "data_file.read", "markdown_utils.unmark", "process_repository.convert_to_raw_user_content_github", "script_files.append", "script_files.append", "process_repository.convert_to_raw_user_content_github", "os.path.relpath.find", "os.path.relpath.replace", "os.path.join", "os.path.join", "name.lower().endswith", "name.lower().endswith", "name.lower().endswith", "name.lower().endswith", "process_repository.convert_to_raw_user_content_gitlab", "os.path.join", "process_repository.convert_to_raw_user_content_gitlab", "os.path.join", "open", "data_file.read", "data_file.read.decode", "print", "os.path.join", "process_repository.convert_to_raw_user_content_github", "os.path.join", "process_repository.convert_to_raw_user_content_github", "os.path.join", "process_repository.convert_to_raw_user_content_github", "os.path.join", "process_repository.convert_to_raw_user_content_github", "os.path.join", "process_repository.convert_to_raw_user_content_github", "process_repository.convert_to_raw_user_content_gitlab", "os.path.join", "process_repository.convert_to_raw_user_content_gitlab", "os.path.join", "docs.append", "os.path.join", "process_repository.convert_to_raw_user_content_github", "process_repository.convert_to_raw_user_content_gitlab", "os.path.join", "process_repository.convert_to_raw_user_content_gitlab", "os.path.join", "process_repository.convert_to_raw_user_content_gitlab", "os.path.join", "process_repository.convert_to_raw_user_content_gitlab", "os.path.join", "process_repository.convert_to_raw_user_content_gitlab", "os.path.join", "name.lower", "name.lower", "name.lower", "name.lower", "docs.append", "docs.append", "os.path.join", "urllib.parse.quote", "urllib.parse.quote", "constants.RepositoryType.GITLAB", "constants.RepositoryType.GITHUB", "constants.RepositoryType.LOCAL"], "store_vars_calls": {"repo_relative_path": "os.path.relpath", "file_path": "os.path.join", "uri": "extract_ontologies.is_file_ontology", "names": "os.listdir", "file_text": "data_file.read", "file_url": "os.path.join", "new_repo_relative_path": "repo_relative_path.replace", "docs_path": "os.path.join", "data_file_text": "data_file.read", "text": "data_file_text.decode"}}}, "is_test": false}