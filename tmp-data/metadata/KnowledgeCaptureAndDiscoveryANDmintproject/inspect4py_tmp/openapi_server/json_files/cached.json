{"file": {"path": "/Users/dakixr/Desktop/github/scc/tmp-data/metadata/KnowledgeCaptureAndDiscoveryANDmintproject/model-catalog-api/server/openapi_server/cached.py", "fileNameBase": "cached", "extension": "py"}, "dependencies": [{"import": "copy", "type": "external"}, {"import": "hashlib", "type": "external"}, {"from_module": "logging", "import": "getLogger", "type": "external"}, {"import": "pathlib", "type": "external"}, {"import": "pickle", "type": "external"}, {"from_module": "connexion.spec", "import": "Specification", "type": "external"}, {"from_module": "connexion.json_schema", "import": "resolve_refs", "type": "external"}], "classes": {"CachedSpecification": {"doc": {"long_description": "Building and loading our OpenAPI specification is very slow, by caching\nthe result we can drastically reduce the reload time of the application.\nThe cache is invalidated when the yaml file changes.", "short_description": "Cache the built API specification.", "full": "Cache the built API specification.\n\nBuilding and loading our OpenAPI specification is very slow, by caching\nthe result we can drastically reduce the reload time of the application.\nThe cache is invalidated when the yaml file changes."}, "extend": ["Specification"], "min_max_lineno": {"min_lineno": 12, "max_lineno": 71}, "methods": {"__init__": {"args": ["self", "raw_spec"], "min_max_lineno": {"min_lineno": 20, "max_lineno": 26}, "calls": ["copy.deepcopy", "cached.CachedSpecification._set_defaults", "connexion.json_schema.resolve_refs"], "store_vars_calls": {"self._raw_spec": "copy.deepcopy", "self._spec": "resolve_refs"}}, "from_file": {"args": ["cls", "spec", "arguments"], "returns": [["rv"]], "min_max_lineno": {"min_lineno": 27, "max_lineno": 54}, "calls": ["cls.md5", "cls._real_from_file", "str", "open", "pickle.load", "logger.warning", "open", "pickle.dump", "logger.info", "logger.warning", "logger.info"], "store_vars_calls": {"md5_hash": "cls.md5", "rv": "cls._real_from_file", "cache": "pickle.load"}}, "_real_from_file": {"doc": {"short_description": "Takes in a path to a YAML file, and returns a Specification"}, "args": ["cls", "spec", "arguments"], "min_max_lineno": {"min_lineno": 55, "max_lineno": 63}, "calls": ["pathlib.Path", "cls._load_spec_from_file", "cls.from_dict"], "store_vars_calls": {"specification_path": "pathlib.Path", "spec": "cls._load_spec_from_file"}}, "md5": {"args": ["cls", "file"], "min_max_lineno": {"min_lineno": 64, "max_lineno": 71}, "calls": ["hashlib.md5", "hashlib.md5.hexdigest", "open", "iter", "hashlib.md5.update", "f.read"], "store_vars_calls": {"hash_md5": "hashlib.md5"}}}}}, "body": {"calls": ["logging.getLogger"], "store_vars_calls": {"logger": "getLogger"}}, "is_test": false}