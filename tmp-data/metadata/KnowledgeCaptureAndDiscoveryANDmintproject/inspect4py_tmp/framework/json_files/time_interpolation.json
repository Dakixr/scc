{"file": {"path": "/Users/dakixr/Desktop/github/scc/tmp-data/metadata/KnowledgeCaptureAndDiscoveryANDmintproject/topoflow36/topoflow/framework/time_interpolation.py", "fileNameBase": "time_interpolation", "extension": "py"}, "dependencies": [{"import": "numpy", "alias": "np", "type": "external"}], "classes": {"time_interp_data": {"min_max_lineno": {"min_lineno": 25, "max_lineno": 134}, "methods": {"__init__": {"args": ["self", "v1", "t1", "long_var_name"], "min_max_lineno": {"min_lineno": 36, "max_lineno": 53}, "calls": ["v1.copy", "t1.copy"], "store_vars_calls": {"self.v1": "v1.copy", "self.t1": "t1.copy"}}, "update": {"args": ["self", "v2", "t2"], "min_max_lineno": {"min_lineno": 63, "max_lineno": 134}, "calls": ["time_interpolation.time_interp_data.t2.copy", "numpy.abs", "numpy.abs.min", "time_interpolation.time_interp_data.v2.copy", "v2.copy", "numpy.float64", "time_interpolation.time_interp_data.v2.copy", "v2.copy"], "store_vars_calls": {"self.t1": "self.t2.copy", "dv": "np.abs", "dv_min": "dv.min", "self.a": "np.float64", "self.v1": "self.v2.copy", "self.v2": "v2.copy"}}}}, "time_interpolator": {"min_max_lineno": {"min_lineno": 147, "max_lineno": 705}, "methods": {"__init__": {"args": ["self", "comp_set", "comp_names", "vars_provided", "method"], "min_max_lineno": {"min_lineno": 159, "max_lineno": 185}, "calls": ["method.title"], "store_vars_calls": {"self.interpolation_method": "method.title"}}, "initialize": {"args": ["self", "SILENT"], "min_max_lineno": {"min_lineno": 188, "max_lineno": 289}, "calls": ["print", "print", "dict", "bmi.update", "bmi.get_time_units", "bmi.get_current_time", "time_interpolation.time_interpolator.convert_time_units", "bmi.update", "bmi.get_current_time", "time_interpolation.time_interpolator.convert_time_units", "bmi.get_values", "time_interpolation.time_interp_data", "bmi.get_values", "time_interpolation.time_interpolator.time_interp_vars[].update"], "store_vars_calls": {"self.time_interp_vars": "dict", "comp_time_units": "bmi.get_time_units", "t1": "self.convert_time_units", "t2": "self.convert_time_units", "v1": "bmi.get_values", "data": "time_interp_data", "v2": "bmi.get_values"}}, "update": {"args": ["self", "comp_name", "time"], "min_max_lineno": {"min_lineno": 312, "max_lineno": 460}, "calls": ["bmi.get_time_units", "bmi.get_current_time", "time_interpolation.time_interpolator.convert_time_units", "bmi.get_status", "print", "print", "print", "print", "print", "print", "bmi.update", "bmi.update", "bmi.get_time_units", "bmi.get_current_time", "time_interpolation.time_interpolator.convert_time_units", "print", "bmi.get_values", "i_vars.update"], "store_vars_calls": {"comp_time_units": "bmi.get_time_units", "comp_time": "self.convert_time_units", "comp_status": "bmi.get_status", "t2": "self.convert_time_units", "v2": "bmi.get_values"}}, "update2": {"args": ["self", "comp_name"], "min_max_lineno": {"min_lineno": 469, "max_lineno": 564}, "calls": ["bmi.get_status", "bmi.get_time_units", "bmi.get_current_time", "time_interpolation.time_interpolator.convert_time_units", "bmi.get_values", "i_vars.update"], "store_vars_calls": {"comp_status": "bmi.get_status", "comp_time_units": "bmi.get_time_units", "t2": "self.convert_time_units", "v2": "bmi.get_values"}}, "update_all": {"args": ["self", "time"], "min_max_lineno": {"min_lineno": 573, "max_lineno": 577}, "calls": ["time_interpolation.time_interpolator.update"]}, "get_values": {"args": ["self", "long_var_name", "comp_name", "time"], "returns": [["value"]], "min_max_lineno": {"min_lineno": 580, "max_lineno": 666}, "calls": ["bmi.get_status", "bmi.get_values", "bmi.get_current_time", "bmi.get_values", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print"], "store_vars_calls": {"comp_status": "bmi.get_status", "bmi_time": "bmi.get_current_time"}}, "convert_time_units": {"args": ["self", "in_time", "in_units"], "returns": [["time"]], "min_max_lineno": {"min_lineno": 680, "max_lineno": 705}, "calls": ["in_time.copy"], "store_vars_calls": {"time": "in_time.copy"}}}}}, "is_test": false}