{"file": {"path": "/Users/dakixr/Desktop/github/scc/tmp-data/metadata/KnowledgeCaptureAndDiscoveryANDmintproject/ipython2mint/project/main.py", "fileNameBase": "main", "extension": "py", "doc": {"short_description": "API to handle Python requeriments", "full": "API to handle Python requeriments"}}, "dependencies": [{"import": "asyncio", "type": "external"}, {"import": "os", "type": "external"}, {"from_module": "typing", "import": "Any", "type": "external"}, {"from_module": "typing", "import": "List", "type": "external"}, {"from_module": "typing", "import": "Optional", "type": "external"}, {"from_module": "typing", "import": "Tuple", "type": "external"}, {"from_module": "typing", "import": "Dict", "type": "external"}, {"import": "logging", "type": "external"}, {"import": "yaml", "type": "external"}, {"import": "aiofiles", "type": "external"}, {"from_module": "celery.result", "import": "AsyncResult", "type": "external"}, {"from_module": "starlette.websockets", "import": "WebSocket", "type": "external"}, {"from_module": "worker", "import": "create_task", "type": "external"}, {"from_module": "worker", "import": "task_publish_docker_image", "type": "external"}, {"from_module": "fastapi", "import": "FastAPI", "type": "external"}, {"from_module": "fastapi", "import": "HTTPException", "type": "external"}, {"from_module": "fastapi.responses", "import": "JSONResponse", "type": "external"}, {"from_module": "fastapi.middleware.cors", "import": "CORSMiddleware", "type": "external"}, {"from_module": "pydantic", "import": "BaseModel", "type": "external"}], "classes": {"GitRepo": {"doc": {"short_description": "GitRepo model", "full": "GitRepo model\n\nArgs:\n    BaseModel (BaseModel): BaseModel class for pydantic"}, "extend": ["BaseModel"], "min_max_lineno": {"min_lineno": 39, "max_lineno": 48}}, "DockerImage": {"doc": {"short_description": "DockerImage model", "full": "DockerImage model\n\nArgs:\n    BaseModel (BaseModel): BaseModel class for pydantic"}, "extend": ["BaseModel"], "min_max_lineno": {"min_lineno": 50, "max_lineno": 58}}, "Task": {"doc": {"short_description": "Task model", "full": "Task model\n\nArgs:\n    BaseModel (BaseModel): BaseModel class for pydantic"}, "extend": ["BaseModel"], "min_max_lineno": {"min_lineno": 60, "max_lineno": 67}}, "TaskResponse": {"doc": {"short_description": "TaskResponse model", "full": "TaskResponse model\n\nArgs:\n    BaseModel (BaseModel): BaseModel class for pydantic"}, "extend": ["BaseModel"], "min_max_lineno": {"min_lineno": 68, "max_lineno": 77}}}, "functions": {"run_task": {"doc": {"short_description": "Run the process to convert a repo to a CWL component", "args": {"payload": {"description": "Git details", "type_name": "GitRepo", "is_optional": false}}, "returns": {"description": "Task with the id", "type_name": "Task", "is_generator": false}}, "args": ["payload"], "min_max_lineno": {"min_lineno": 81, "max_lineno": 93}, "calls": ["app.post", "worker.create_task.delay"], "store_vars_calls": {"task": "create_task.delay"}}, "run_upload_image": {"doc": {"short_description": "Upload the docker image to the registry", "args": {"payload": {"description": "DockerImage model", "type_name": "DockerImage", "is_optional": false}}, "returns": {"description": "Task with id", "type_name": "Task", "is_generator": false}}, "args": ["payload"], "min_max_lineno": {"min_lineno": 95, "max_lineno": 107}, "calls": ["app.post", "worker.task_publish_docker_image.delay"], "store_vars_calls": {"task": "task_publish_docker_image.delay"}}, "get_specs_by_tasks": {"doc": {"short_description": "Get the specs by task id", "args": {"task_id": {"description": "the task iod", "type_name": "str", "is_optional": false}}, "returns": {"description": "A list of files", "type_name": "List[str]", "is_generator": false}, "raises": {"0": {"description": "Task not found", "type_name": "HTTPException"}}}, "args": ["task_id"], "returns": [["files"]], "min_max_lineno": {"min_lineno": 109, "max_lineno": 128}, "calls": ["app.get", "os.path.join", "os.path.exists", "os.listdir", "fastapi.HTTPException"], "store_vars_calls": {"spec_task_dir": "os.path.join", "files": "os.listdir"}}, "get_specs": {"doc": {"short_description": "Get the spec (spec_file_name) by task id", "args": {"task_id": {"description": "The tasks id", "type_name": "str", "is_optional": false}, "spec_file_name": {"description": "The spec file name", "type_name": "str", "is_optional": false}}, "returns": {"description": "[description]", "type_name": "[type]", "is_generator": false}, "raises": {"0": {"description": "[Task not found]", "type_name": "HTTPException"}, "1": {"description": "[Unable to parse the spec file]", "type_name": "HTTPException"}, "2": {"description": "[Spec file not found]", "type_name": "HTTPException"}}}, "args": ["task_id", "spec_file_name"], "min_max_lineno": {"min_lineno": 130, "max_lineno": 163}, "calls": ["app.get", "os.path.join", "os.path.join", "os.path.exists", "fastapi.responses.JSONResponse", "os.path.exists", "fastapi.HTTPException", "fastapi.HTTPException", "open", "yaml.load", "fastapi.HTTPException"], "store_vars_calls": {"spec_task_dir": "os.path.join", "spec_file_path": "os.path.join", "outputs": "yaml.load"}}, "get_status": {"doc": {"short_description": "Get the status of the task", "args": {"task_id": {"description": "The task id", "type_name": "str", "is_optional": false}}, "returns": {"description": "The task status", "type_name": "TaskResponse", "is_generator": false}}, "args": ["task_id"], "min_max_lineno": {"min_lineno": 165, "max_lineno": 180}, "calls": ["app.get", "celery.result.AsyncResult"], "store_vars_calls": {"task_result": "AsyncResult"}}}, "body": {"calls": ["logging.getLogger", "fastapi.FastAPI", "os.environ.get", "fastapi.FastAPI.add_middleware"], "store_vars_calls": {"logger": "logging.getLogger", "app": "FastAPI", "redis_url": "os.environ.get"}}, "is_test": false}