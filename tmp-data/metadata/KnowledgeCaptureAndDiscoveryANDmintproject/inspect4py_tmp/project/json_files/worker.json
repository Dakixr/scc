{"file": {"path": "/Users/dakixr/Desktop/github/scc/tmp-data/metadata/KnowledgeCaptureAndDiscoveryANDmintproject/ipython2mint/project/worker.py", "fileNameBase": "worker", "extension": "py", "doc": {"short_description": "A celery worker to handle tasks", "full": "A celery worker to handle tasks"}}, "dependencies": [{"import": "os", "type": "external"}, {"import": "traceback", "type": "external"}, {"from_module": "typing", "import": "List", "type": "external"}, {"import": "redis", "type": "external"}, {"from_module": "celery", "import": "Celery", "type": "external"}, {"from_module": "celery", "import": "current_task", "type": "external"}, {"from_module": "celery", "import": "states", "type": "external"}, {"from_module": "celery.exceptions", "import": "Ignore", "type": "external"}, {"from_module": "ipython2cwl.repo2cwl", "import": "repo2cwl", "type": "external"}, {"import": "docker", "type": "external"}, {"import": "yaml", "type": "external"}], "functions": {"parse_yaml_file": {"doc": {"short_description": "Parse a yaml file", "args": {"file_path": {"description": "Path to the file", "type_name": "str", "is_optional": false}}, "returns": {"description": "Parsed yaml", "type_name": "dict", "is_generator": false}}, "args": ["file_path"], "min_max_lineno": {"min_lineno": 40, "max_lineno": 51}, "calls": ["open", "yaml.load"]}, "create_task": {"doc": {"short_description": "Convert a repository into a CWL component", "args": {"url": {"description": "The git url", "type_name": "str", "is_optional": false}}, "returns": {"description": "The generated CWL description", "type_name": "List[str]", "is_generator": false}}, "args": ["url"], "returns": [["image_name"]], "min_max_lineno": {"min_lineno": 53, "max_lineno": 86}, "calls": ["celery.task", "str", "os.path.join", "create_task.update_state", "os.listdir", "open", "file.write", "os.path.join", "file.write", "worker.parse_yaml_file", "worker.publish_docker_image", "os.path.exists", "os.mkdir", "ipython2cwl.repo2cwl.repo2cwl", "os.path.join", "file.write"], "store_vars_calls": {"stream": "str", "log_file": "os.path.join", "specs": "os.listdir", "cwl_directory_stream": "os.path.join", "spec": "parse_yaml_file"}}, "generate_short_id": {"doc": {"short_description": "Create a short id", "args": {"length": {"description": "Length of the id. Defaults to 6.", "type_name": "int", "is_optional": true, "default": "6"}}, "returns": {"description": "Id", "type_name": "str", "is_generator": false}}, "args": ["length"], "min_max_lineno": {"min_lineno": 87, "max_lineno": 97}, "calls": ["os.urandom().hex", "os.urandom"]}, "task_publish_docker_image": {"doc": {"short_description": "Create a task to publish a DockerImage", "args": {"image_name": {"description": "Docker Image name", "type_name": "str", "is_optional": false}, "image_tag": {"description": "Docker Image tag", "type_name": "str", "is_optional": false}}}, "args": ["image_name", "image_tag"], "min_max_lineno": {"min_lineno": 98, "max_lineno": 107}, "calls": ["celery.task", "worker.publish_docker_image"]}, "publish_docker_image": {"doc": {"short_description": "Publish a docker image", "args": {"image_name": {"description": "The docker image", "type_name": "str", "is_optional": false}, "image_tag": {"description": "The docker tag", "type_name": "str", "is_optional": false}}, "raises": {"0": {"description": "If the image does not exist, then ignore the task", "type_name": "Ignore"}}}, "args": ["image_name", "image_tag", "task"], "min_max_lineno": {"min_lineno": 109, "max_lineno": 165}, "calls": ["worker.generate_short_id", "client.images.get.tag", "task.update_state", "client.images.get", "client.images.push", "task.update_state", "celery.exceptions.Ignore", "task.update_state", "celery.exceptions.Ignore", "task.update_state", "task.update_state", "traceback.format_exc().split", "task.update_state", "type", "task.update_state", "traceback.format_exc", "task.update_state", "celery.current_task", "celery.current_task"], "store_vars_calls": {"new_image_tag": "generate_short_id", "image": "client.images.get"}}}, "body": {"calls": ["celery.Celery", "os.environ.get", "os.environ.get", "os.environ.get", "os.environ.get", "docker.from_env", "redis.Redis", "docker.from_env.login"], "store_vars_calls": {"celery": "Celery", "celery.conf.broker_url": "os.environ.get", "celery.conf.result_backend": "os.environ.get", "username": "os.environ.get", "password": "os.environ.get", "client": "docker.from_env", "r": "redis.Redis"}}, "is_test": false}