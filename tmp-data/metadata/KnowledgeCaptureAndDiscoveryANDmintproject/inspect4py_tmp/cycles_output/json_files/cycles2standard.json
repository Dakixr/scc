{"file": {"path": "/Users/dakixr/Desktop/github/scc/tmp-data/metadata/KnowledgeCaptureAndDiscoveryANDmintproject/cycles_output/cycles2standard.py", "fileNameBase": "cycles2standard", "extension": "py", "doc": {"long_description": "@author: deborahkhider\n\nTransform Cycles data to netcdf", "short_description": "Created on Fri Jun 18 14:03:33 2021", "full": "Created on Fri Jun 18 14:03:33 2021\n\n@author: deborahkhider\n\nTransform Cycles data to netcdf"}}, "dependencies": [{"import": "pandas", "alias": "pd", "type": "external"}, {"import": "numpy", "alias": "np", "type": "external"}, {"import": "json", "type": "external"}, {"import": "os", "type": "external"}, {"import": "sys", "type": "external"}, {"from_module": "collections", "import": "OrderedDict", "type": "external"}, {"from_module": "datetime", "import": "date", "type": "external"}, {"import": "re", "type": "external"}, {"import": "shutil", "type": "external"}], "functions": {"openCycles": {"doc": {"long_description": "Note that this function doesn't transform the DATE variable into a datetime dtype as to be able to save the files.", "short_description": "Open the Cycles outputs into a dataframe, forcing what can be forced into floats.", "args": {"season": {"description": "path to the season.dat file", "type_name": "str", "is_optional": false}, "summary": {"description": "path to the summary.dat file", "type_name": "str", "is_optional": false}}, "returns": {"description": "Content of the season.dat file as a pandas dataframe", "type_name": "pandas.DataFrame", "is_generator": false, "return_name": "df_season"}}, "args": ["season", "summary"], "returns": [["df_season", "df_summary"]], "min_max_lineno": {"min_lineno": 163, "max_lineno": 189}, "calls": ["pandas.read_csv", "pandas.read_csv", "cycles2standard.variables", "cycles2standard.variables"], "store_vars_calls": {"df_season": "pd.read_csv", "df_summary": "pd.read_csv", "df_season.columns": "variables", "df_summary.columns": "variables"}}, "variables": {"doc": {"short_description": "Get the list of variables from the headers of a DataFrame", "args": {"df": {"type_name": "Pandas.DataFrame", "is_optional": false}}, "returns": {"description": "A list of hearders, with the spaces at the end removed.", "type_name": "list", "is_generator": false}}, "args": ["df"], "min_max_lineno": {"min_lineno": 190, "max_lineno": 205}, "calls": ["item.rstrip", "list", "df.keys"]}, "title_to_longname": {"doc": {"short_description": "Generate long name from the long titles (i.e. description) by removing everything in parenthesis", "args": {"title": {"description": "The description to transform.", "type_name": "str", "is_optional": false}}, "returns": {"description": "The long name.", "type_name": "str", "is_generator": false}}, "args": ["title"], "min_max_lineno": {"min_lineno": 206, "max_lineno": 222}, "calls": ["re.sub"]}, "root_metadata": {"doc": {"short_description": "Generates the root dictionary", "args": {"time": {"description": "Time vector", "type_name": "list", "is_optional": false}, "ensemble_id": {"description": "ensemble ID from MINT", "type_name": "str", "is_optional": false}, "execution_id": {"description": "execution ID from MINT.", "type_name": "str", "is_optional": false}}, "returns": {"description": "Dictionary of relevant metadata", "type_name": "OrderedDict", "is_generator": false, "return_name": "res"}}, "args": ["time", "ensemble_id", "execution_id"], "returns": [["res"]], "min_max_lineno": {"min_lineno": 223, "max_lineno": 268}, "calls": ["str", "str", "collections.OrderedDict", "datetime.date.today", "datetime.date.today"], "store_vars_calls": {"date_created": "str", "date_modified": "str", "res": "OrderedDict"}}, "location_metadata": {"doc": {"short_description": "Create the location dictionary", "args": {"lat": {"description": "Latitude", "type_name": "float", "is_optional": false}, "lon": {"description": "Longitude", "type_name": "float", "is_optional": false}}, "returns": {"description": "Location dictionary", "type_name": "OrderedDict", "is_generator": false}}, "args": ["lat", "lon"], "min_max_lineno": {"min_lineno": 269, "max_lineno": 289}, "calls": ["collections.OrderedDict"]}, "var_metadata": {"doc": {"short_description": "Generate the dictionary for each of the variables present in the dataframe", "args": {"df": {"description": "the data contained in a dataframe. Each columns represents a variable", "type_name": "Pandas.DataFrame", "is_optional": false}, "var_name": {"description": "dictionary of variable names defined internally", "type_name": "dict", "is_optional": false}, "var_title": {"description": "dictionary of variable titles defined internally", "type_name": "dict", "is_optional": false}, "var_units": {"description": "dictionary of variable titles defined internally", "type_name": "dict", "is_optional": false}}, "returns": {"description": "Dictionary of metadata for each of the variables", "type_name": "OrderedDict", "is_generator": false, "return_name": "columns"}}, "args": ["df", "var_name", "var_title", "var_units"], "returns": [["columns"]], "min_max_lineno": {"min_lineno": 290, "max_lineno": 326}, "calls": ["list", "enumerate", "df.keys", "columns.append", "collections.OrderedDict", "cycles2standard.title_to_longname", "numpy.min", "numpy.max", "numpy.array", "numpy.array", "numpy.min", "numpy.max", "numpy.array", "numpy.array"], "store_vars_calls": {"variables": "list"}}, "write": {"doc": {"long_description": "This function REQUIRES read and write access.", "short_description": "Write the data contained in dataframes to csv and the metadata to JSON. Zip all files.", "args": {"df_season": {"description": "dataframe containing the season information", "type_name": "pandas.DataFrame", "is_optional": false}, "df_summary": {"description": "dataframe containing the summary information", "type_name": "pandas.DataFrame", "is_optional": false}, "meta": {"description": "Dictionary of metadata", "type_name": "dict", "is_optional": false}}, "returns": {"type_name": "None.", "is_generator": false}}, "args": ["df_season", "df_summary", "meta"], "min_max_lineno": {"min_lineno": 327, "max_lineno": 360}, "calls": ["os.mkdir", "df_season.to_csv", "df_summary.to_csv", "shutil.make_archive", "shutil.rmtree", "open", "json.dump"]}}, "main_info": {"main_flag": 1, "type": "script"}, "is_test": false}