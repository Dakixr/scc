{"file": {"path": "/Users/dakixr/Desktop/github/scc/tmp-data/metadata/KnowledgeCaptureAndDiscoveryANDmintproject/ingestion-api-client/ingestion/api/default_api.py", "fileNameBase": "default_api", "extension": "py", "doc": {"long_description": "No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501\n\nOpenAPI spec version: 1.2.0\nGenerated by: https://openapi-generator.tech", "short_description": "ingestion", "full": "ingestion\n\nNo description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501\n\nOpenAPI spec version: 1.2.0\nGenerated by: https://openapi-generator.tech"}}, "dependencies": [{"from_module": "__future__", "import": "absolute_import", "type": "external"}, {"import": "re", "type": "external"}, {"import": "six", "type": "external"}, {"from_module": "ingestion.api_client", "import": "ApiClient", "type": "external"}, {"from_module": "ingestion.exceptions", "import": "ApiTypeError", "type": "external"}, {"from_module": "ingestion.exceptions", "import": "ApiValueError", "type": "external"}], "classes": {"DefaultApi": {"doc": {"long_description": "Ref: https://openapi-generator.tech\n\nDo not edit the class manually.", "short_description": "NOTE: This class is auto generated by OpenAPI Generator", "full": "NOTE: This class is auto generated by OpenAPI Generator\nRef: https://openapi-generator.tech\n\nDo not edit the class manually."}, "extend": ["object"], "min_max_lineno": {"min_lineno": 27, "max_lineno": 134}, "methods": {"__init__": {"args": ["self", "api_client"], "min_max_lineno": {"min_lineno": 34, "max_lineno": 38}, "calls": ["ingestion.api_client.ApiClient"], "store_vars_calls": {"api_client": "ApiClient"}}, "modelthreads_post": {"doc": {"long_description": "Creates a new instance of a `modelthread`.  # noqa: E501\nThis method makes a synchronous HTTP request by default. To make an\nasynchronous HTTP request, please pass async_req=True\n>>> thread = api.modelthreads_post(modelthread, async_req=True)\n>>> result = thread.get()\n\n:param async_req bool\n:param Modelthread modelthread: A new `modelthread` to be created. (required)\n:return: None\n         If the method is called asynchronously,\n         returns the request thread.", "short_description": "Create a modelthread  # noqa: E501"}, "args": ["self", "modelthread"], "returns": [["data"]], "min_max_lineno": {"min_lineno": 39, "max_lineno": 60}, "calls": ["kwargs.get", "default_api.DefaultApi.modelthreads_post_with_http_info", "default_api.DefaultApi.modelthreads_post_with_http_info"], "store_vars_calls": {"data": "self.modelthreads_post_with_http_info"}}, "modelthreads_post_with_http_info": {"doc": {"long_description": "Creates a new instance of a `modelthread`.  # noqa: E501\nThis method makes a synchronous HTTP request by default. To make an\nasynchronous HTTP request, please pass async_req=True\n>>> thread = api.modelthreads_post_with_http_info(modelthread, async_req=True)\n>>> result = thread.get()\n\n:param async_req bool\n:param Modelthread modelthread: A new `modelthread` to be created. (required)\n:return: None\n         If the method is called asynchronously,\n         returns the request thread.", "short_description": "Create a modelthread  # noqa: E501"}, "args": ["self", "modelthread"], "min_max_lineno": {"min_lineno": 61, "max_lineno": 134}, "calls": ["locals", "all_params.append", "all_params.append", "all_params.append", "all_params.append", "six.iteritems", "default_api.DefaultApi.api_client.select_header_content_type", "default_api.DefaultApi.api_client.call_api", "ingestion.exceptions.ApiValueError", "ingestion.exceptions.ApiTypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "store_vars_calls": {"local_var_params": "locals"}}}}}, "is_test": false}