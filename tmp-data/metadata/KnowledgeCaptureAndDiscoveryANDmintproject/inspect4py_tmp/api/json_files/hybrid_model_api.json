{"file": {"path": "/Users/dakixr/Desktop/github/scc/tmp-data/metadata/KnowledgeCaptureAndDiscoveryANDmintproject/model-catalog-python-api-client/modelcatalog/api/hybrid_model_api.py", "fileNameBase": "hybrid_model_api", "extension": "py", "doc": {"long_description": "This is the API of the Software Description Ontology at [https://w3id.org/okn/o/sdm](https://w3id.org/okn/o/sdm)  # noqa: E501\n\nThe version of the OpenAPI document: v1.8.0\nGenerated by: https://openapi-generator.tech", "short_description": "Model Catalog", "full": "Model Catalog\n\nThis is the API of the Software Description Ontology at [https://w3id.org/okn/o/sdm](https://w3id.org/okn/o/sdm)  # noqa: E501\n\nThe version of the OpenAPI document: v1.8.0\nGenerated by: https://openapi-generator.tech"}}, "dependencies": [{"from_module": "__future__", "import": "absolute_import", "type": "external"}, {"import": "re", "type": "external"}, {"import": "six", "type": "external"}, {"from_module": "modelcatalog.api_client", "import": "ApiClient", "type": "external"}, {"from_module": "modelcatalog.exceptions", "import": "ApiTypeError", "type": "external"}, {"from_module": "modelcatalog.exceptions", "import": "ApiValueError", "type": "external"}], "classes": {"HybridModelApi": {"doc": {"long_description": "Ref: https://openapi-generator.tech\n\nDo not edit the class manually.", "short_description": "NOTE: This class is auto generated by OpenAPI Generator", "full": "NOTE: This class is auto generated by OpenAPI Generator\nRef: https://openapi-generator.tech\n\nDo not edit the class manually."}, "extend": ["object"], "min_max_lineno": {"min_lineno": 27, "max_lineno": 610}, "methods": {"__init__": {"args": ["self", "api_client"], "min_max_lineno": {"min_lineno": 34, "max_lineno": 38}, "calls": ["modelcatalog.api_client.ApiClient"], "store_vars_calls": {"api_client": "ApiClient"}}, "hybridmodels_get": {"doc": {"long_description": "Gets a list of all instances of HybridModel (more information in https://w3id.org/okn/o/sdm#HybridModel)  # noqa: E501\nThis method makes a synchronous HTTP request by default. To make an\nasynchronous HTTP request, please pass async_req=True\n>>> thread = api.hybridmodels_get(async_req=True)\n>>> result = thread.get()", "short_description": "List all instances of HybridModel  # noqa: E501", "args": {"bool": {"description": "execute request asynchronously", "type_name": "async_req", "is_optional": false}, "username": {"description": "Name of the user graph to query", "type_name": "str", "is_optional": false}, "label": {"description": "Filter by label", "type_name": "str", "is_optional": false}, "page": {"description": "Page number", "type_name": "int", "is_optional": false}, "per_page": {"description": "Items per page", "type_name": "int", "is_optional": false}, "_preload_content": {"description": "if False, the urllib3.HTTPResponse object will\nbe returned without reading/decoding response\ndata. Default is True."}, "_request_timeout": {"description": "timeout setting for this request. If one\nnumber provided, it will be total request\ntimeout. It can also be a pair (tuple) of\n(connection, read) timeouts."}}, "returns": {"description": "list[HybridModel]\nIf the method is called asynchronously,\nreturns the request thread.", "is_generator": false}}, "args": ["self"], "min_max_lineno": {"min_lineno": 39, "max_lineno": 66}, "calls": ["hybrid_model_api.HybridModelApi.hybridmodels_get_with_http_info"]}, "hybridmodels_get_with_http_info": {"doc": {"long_description": "Gets a list of all instances of HybridModel (more information in https://w3id.org/okn/o/sdm#HybridModel)  # noqa: E501\nThis method makes a synchronous HTTP request by default. To make an\nasynchronous HTTP request, please pass async_req=True\n>>> thread = api.hybridmodels_get_with_http_info(async_req=True)\n>>> result = thread.get()", "short_description": "List all instances of HybridModel  # noqa: E501", "args": {"bool": {"description": "execute request asynchronously", "type_name": "async_req", "is_optional": false}, "username": {"description": "Name of the user graph to query", "type_name": "str", "is_optional": false}, "label": {"description": "Filter by label", "type_name": "str", "is_optional": false}, "page": {"description": "Page number", "type_name": "int", "is_optional": false}, "per_page": {"description": "Items per page", "type_name": "int", "is_optional": false}, "_return_http_data_only": {"description": "response data without head status code\nand headers"}, "_preload_content": {"description": "if False, the urllib3.HTTPResponse object will\nbe returned without reading/decoding response\ndata. Default is True."}, "_request_timeout": {"description": "timeout setting for this request. If one\nnumber provided, it will be total request\ntimeout. It can also be a pair (tuple) of\n(connection, read) timeouts."}}, "returns": {"description": "tuple(list[HybridModel], status_code(int), headers(HTTPHeaderDict))\nIf the method is called asynchronously,\nreturns the request thread.", "is_generator": false}}, "args": ["self"], "min_max_lineno": {"min_lineno": 67, "max_lineno": 158}, "calls": ["locals", "all_params.append", "all_params.append", "all_params.append", "all_params.append", "six.iteritems", "hybrid_model_api.HybridModelApi.api_client.select_header_accept", "hybrid_model_api.HybridModelApi.api_client.call_api", "modelcatalog.exceptions.ApiValueError", "modelcatalog.exceptions.ApiValueError", "query_params.append", "query_params.append", "query_params.append", "query_params.append", "modelcatalog.exceptions.ApiTypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "store_vars_calls": {"local_var_params": "locals"}}, "hybridmodels_id_delete": {"doc": {"long_description": "Delete an existing HybridModel (more information in https://w3id.org/okn/o/sdm#HybridModel)  # noqa: E501\nThis method makes a synchronous HTTP request by default. To make an\nasynchronous HTTP request, please pass async_req=True\n>>> thread = api.hybridmodels_id_delete(id, async_req=True)\n>>> result = thread.get()", "short_description": "Delete an existing HybridModel  # noqa: E501", "args": {"bool": {"description": "execute request asynchronously", "type_name": "async_req", "is_optional": false}, "id": {"description": "The ID of the HybridModel to be retrieved (required)", "type_name": "str", "is_optional": false}, "user": {"description": "Username", "type_name": "str", "is_optional": false}, "_preload_content": {"description": "if False, the urllib3.HTTPResponse object will\nbe returned without reading/decoding response\ndata. Default is True."}, "_request_timeout": {"description": "timeout setting for this request. If one\nnumber provided, it will be total request\ntimeout. It can also be a pair (tuple) of\n(connection, read) timeouts."}}, "returns": {"description": "None\nIf the method is called asynchronously,\nreturns the request thread.", "is_generator": false}}, "args": ["self", "id"], "min_max_lineno": {"min_lineno": 159, "max_lineno": 184}, "calls": ["hybrid_model_api.HybridModelApi.hybridmodels_id_delete_with_http_info"]}, "hybridmodels_id_delete_with_http_info": {"doc": {"long_description": "Delete an existing HybridModel (more information in https://w3id.org/okn/o/sdm#HybridModel)  # noqa: E501\nThis method makes a synchronous HTTP request by default. To make an\nasynchronous HTTP request, please pass async_req=True\n>>> thread = api.hybridmodels_id_delete_with_http_info(id, async_req=True)\n>>> result = thread.get()", "short_description": "Delete an existing HybridModel  # noqa: E501", "args": {"bool": {"description": "execute request asynchronously", "type_name": "async_req", "is_optional": false}, "id": {"description": "The ID of the HybridModel to be retrieved (required)", "type_name": "str", "is_optional": false}, "user": {"description": "Username", "type_name": "str", "is_optional": false}, "_return_http_data_only": {"description": "response data without head status code\nand headers"}, "_preload_content": {"description": "if False, the urllib3.HTTPResponse object will\nbe returned without reading/decoding response\ndata. Default is True."}, "_request_timeout": {"description": "timeout setting for this request. If one\nnumber provided, it will be total request\ntimeout. It can also be a pair (tuple) of\n(connection, read) timeouts."}}, "returns": {"description": "None\nIf the method is called asynchronously,\nreturns the request thread.", "is_generator": false}}, "args": ["self", "id"], "min_max_lineno": {"min_lineno": 185, "max_lineno": 266}, "calls": ["locals", "all_params.append", "all_params.append", "all_params.append", "all_params.append", "six.iteritems", "hybrid_model_api.HybridModelApi.api_client.call_api", "modelcatalog.exceptions.ApiValueError", "query_params.append", "modelcatalog.exceptions.ApiTypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "store_vars_calls": {"local_var_params": "locals"}}, "hybridmodels_id_get": {"doc": {"long_description": "Gets the details of a given HybridModel (more information in https://w3id.org/okn/o/sdm#HybridModel)  # noqa: E501\nThis method makes a synchronous HTTP request by default. To make an\nasynchronous HTTP request, please pass async_req=True\n>>> thread = api.hybridmodels_id_get(id, async_req=True)\n>>> result = thread.get()", "short_description": "Get a single HybridModel by its id  # noqa: E501", "args": {"bool": {"description": "execute request asynchronously", "type_name": "async_req", "is_optional": false}, "id": {"description": "The ID of the HybridModel to be retrieved (required)", "type_name": "str", "is_optional": false}, "username": {"description": "Name of the user graph to query", "type_name": "str", "is_optional": false}, "_preload_content": {"description": "if False, the urllib3.HTTPResponse object will\nbe returned without reading/decoding response\ndata. Default is True."}, "_request_timeout": {"description": "timeout setting for this request. If one\nnumber provided, it will be total request\ntimeout. It can also be a pair (tuple) of\n(connection, read) timeouts."}}, "returns": {"description": "HybridModel\nIf the method is called asynchronously,\nreturns the request thread.", "is_generator": false}}, "args": ["self", "id"], "min_max_lineno": {"min_lineno": 267, "max_lineno": 292}, "calls": ["hybrid_model_api.HybridModelApi.hybridmodels_id_get_with_http_info"]}, "hybridmodels_id_get_with_http_info": {"doc": {"long_description": "Gets the details of a given HybridModel (more information in https://w3id.org/okn/o/sdm#HybridModel)  # noqa: E501\nThis method makes a synchronous HTTP request by default. To make an\nasynchronous HTTP request, please pass async_req=True\n>>> thread = api.hybridmodels_id_get_with_http_info(id, async_req=True)\n>>> result = thread.get()", "short_description": "Get a single HybridModel by its id  # noqa: E501", "args": {"bool": {"description": "execute request asynchronously", "type_name": "async_req", "is_optional": false}, "id": {"description": "The ID of the HybridModel to be retrieved (required)", "type_name": "str", "is_optional": false}, "username": {"description": "Name of the user graph to query", "type_name": "str", "is_optional": false}, "_return_http_data_only": {"description": "response data without head status code\nand headers"}, "_preload_content": {"description": "if False, the urllib3.HTTPResponse object will\nbe returned without reading/decoding response\ndata. Default is True."}, "_request_timeout": {"description": "timeout setting for this request. If one\nnumber provided, it will be total request\ntimeout. It can also be a pair (tuple) of\n(connection, read) timeouts."}}, "returns": {"description": "tuple(HybridModel, status_code(int), headers(HTTPHeaderDict))\nIf the method is called asynchronously,\nreturns the request thread.", "is_generator": false}}, "args": ["self", "id"], "min_max_lineno": {"min_lineno": 293, "max_lineno": 378}, "calls": ["locals", "all_params.append", "all_params.append", "all_params.append", "all_params.append", "six.iteritems", "hybrid_model_api.HybridModelApi.api_client.select_header_accept", "hybrid_model_api.HybridModelApi.api_client.call_api", "modelcatalog.exceptions.ApiValueError", "query_params.append", "modelcatalog.exceptions.ApiTypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "store_vars_calls": {"local_var_params": "locals"}}, "hybridmodels_id_put": {"doc": {"long_description": "Updates an existing HybridModel (more information in https://w3id.org/okn/o/sdm#HybridModel)  # noqa: E501\nThis method makes a synchronous HTTP request by default. To make an\nasynchronous HTTP request, please pass async_req=True\n>>> thread = api.hybridmodels_id_put(id, async_req=True)\n>>> result = thread.get()", "short_description": "Update an existing HybridModel  # noqa: E501", "args": {"bool": {"description": "execute request asynchronously", "type_name": "async_req", "is_optional": false}, "id": {"description": "The ID of the HybridModel to be retrieved (required)", "type_name": "str", "is_optional": false}, "user": {"description": "Username", "type_name": "str", "is_optional": false}, "hybrid_model": {"description": "An old HybridModelto be updated", "type_name": "HybridModel", "is_optional": false}, "_preload_content": {"description": "if False, the urllib3.HTTPResponse object will\nbe returned without reading/decoding response\ndata. Default is True."}, "_request_timeout": {"description": "timeout setting for this request. If one\nnumber provided, it will be total request\ntimeout. It can also be a pair (tuple) of\n(connection, read) timeouts."}}, "returns": {"description": "HybridModel\nIf the method is called asynchronously,\nreturns the request thread.", "is_generator": false}}, "args": ["self", "id"], "min_max_lineno": {"min_lineno": 379, "max_lineno": 405}, "calls": ["hybrid_model_api.HybridModelApi.hybridmodels_id_put_with_http_info"]}, "hybridmodels_id_put_with_http_info": {"doc": {"long_description": "Updates an existing HybridModel (more information in https://w3id.org/okn/o/sdm#HybridModel)  # noqa: E501\nThis method makes a synchronous HTTP request by default. To make an\nasynchronous HTTP request, please pass async_req=True\n>>> thread = api.hybridmodels_id_put_with_http_info(id, async_req=True)\n>>> result = thread.get()", "short_description": "Update an existing HybridModel  # noqa: E501", "args": {"bool": {"description": "execute request asynchronously", "type_name": "async_req", "is_optional": false}, "id": {"description": "The ID of the HybridModel to be retrieved (required)", "type_name": "str", "is_optional": false}, "user": {"description": "Username", "type_name": "str", "is_optional": false}, "hybrid_model": {"description": "An old HybridModelto be updated", "type_name": "HybridModel", "is_optional": false}, "_return_http_data_only": {"description": "response data without head status code\nand headers"}, "_preload_content": {"description": "if False, the urllib3.HTTPResponse object will\nbe returned without reading/decoding response\ndata. Default is True."}, "_request_timeout": {"description": "timeout setting for this request. If one\nnumber provided, it will be total request\ntimeout. It can also be a pair (tuple) of\n(connection, read) timeouts."}}, "returns": {"description": "tuple(HybridModel, status_code(int), headers(HTTPHeaderDict))\nIf the method is called asynchronously,\nreturns the request thread.", "is_generator": false}}, "args": ["self", "id"], "min_max_lineno": {"min_lineno": 406, "max_lineno": 498}, "calls": ["locals", "all_params.append", "all_params.append", "all_params.append", "all_params.append", "six.iteritems", "hybrid_model_api.HybridModelApi.api_client.select_header_accept", "hybrid_model_api.HybridModelApi.api_client.select_header_content_type", "hybrid_model_api.HybridModelApi.api_client.call_api", "modelcatalog.exceptions.ApiValueError", "query_params.append", "modelcatalog.exceptions.ApiTypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "store_vars_calls": {"local_var_params": "locals"}}, "hybridmodels_post": {"doc": {"long_description": "Create a new instance of HybridModel (more information in https://w3id.org/okn/o/sdm#HybridModel)  # noqa: E501\nThis method makes a synchronous HTTP request by default. To make an\nasynchronous HTTP request, please pass async_req=True\n>>> thread = api.hybridmodels_post(async_req=True)\n>>> result = thread.get()", "short_description": "Create one HybridModel  # noqa: E501", "args": {"bool": {"description": "execute request asynchronously", "type_name": "async_req", "is_optional": false}, "user": {"description": "Username", "type_name": "str", "is_optional": false}, "hybrid_model": {"description": "Information about the HybridModelto be created", "type_name": "HybridModel", "is_optional": false}, "_preload_content": {"description": "if False, the urllib3.HTTPResponse object will\nbe returned without reading/decoding response\ndata. Default is True."}, "_request_timeout": {"description": "timeout setting for this request. If one\nnumber provided, it will be total request\ntimeout. It can also be a pair (tuple) of\n(connection, read) timeouts."}}, "returns": {"description": "HybridModel\nIf the method is called asynchronously,\nreturns the request thread.", "is_generator": false}}, "args": ["self"], "min_max_lineno": {"min_lineno": 499, "max_lineno": 524}, "calls": ["hybrid_model_api.HybridModelApi.hybridmodels_post_with_http_info"]}, "hybridmodels_post_with_http_info": {"doc": {"long_description": "Create a new instance of HybridModel (more information in https://w3id.org/okn/o/sdm#HybridModel)  # noqa: E501\nThis method makes a synchronous HTTP request by default. To make an\nasynchronous HTTP request, please pass async_req=True\n>>> thread = api.hybridmodels_post_with_http_info(async_req=True)\n>>> result = thread.get()", "short_description": "Create one HybridModel  # noqa: E501", "args": {"bool": {"description": "execute request asynchronously", "type_name": "async_req", "is_optional": false}, "user": {"description": "Username", "type_name": "str", "is_optional": false}, "hybrid_model": {"description": "Information about the HybridModelto be created", "type_name": "HybridModel", "is_optional": false}, "_return_http_data_only": {"description": "response data without head status code\nand headers"}, "_preload_content": {"description": "if False, the urllib3.HTTPResponse object will\nbe returned without reading/decoding response\ndata. Default is True."}, "_request_timeout": {"description": "timeout setting for this request. If one\nnumber provided, it will be total request\ntimeout. It can also be a pair (tuple) of\n(connection, read) timeouts."}}, "returns": {"description": "tuple(HybridModel, status_code(int), headers(HTTPHeaderDict))\nIf the method is called asynchronously,\nreturns the request thread.", "is_generator": false}}, "args": ["self"], "min_max_lineno": {"min_lineno": 525, "max_lineno": 610}, "calls": ["locals", "all_params.append", "all_params.append", "all_params.append", "all_params.append", "six.iteritems", "hybrid_model_api.HybridModelApi.api_client.select_header_accept", "hybrid_model_api.HybridModelApi.api_client.select_header_content_type", "hybrid_model_api.HybridModelApi.api_client.call_api", "query_params.append", "modelcatalog.exceptions.ApiTypeError", "locals.get", "locals.get", "locals.get", "locals.get"], "store_vars_calls": {"local_var_params": "locals"}}}}}, "is_test": false}