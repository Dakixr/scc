{"file": {"path": "/Users/dakixr/Desktop/github/scc/tmp-data/metadata/KnowledgeCaptureAndDiscoveryANDmintproject/wings-importer/tests/test_functional.py", "fileNameBase": "test_functional", "extension": "py", "doc": {"long_description": "See: http://webtest.readthedocs.org/", "short_description": "Functional tests using WebTest.", "full": "Functional tests using WebTest.\n\nSee: http://webtest.readthedocs.org/"}}, "dependencies": [{"from_module": "flask", "import": "url_for", "type": "external"}, {"from_module": "importer.user.models", "import": "User", "type": "external"}, {"from_module": "factories", "import": "UserFactory", "type": "external"}], "classes": {"TestLoggingIn": {"doc": {"short_description": "Login.", "full": "Login."}, "min_max_lineno": {"min_lineno": 13, "max_lineno": 66}, "methods": {"test_can_log_in_returns_200": {"doc": {"short_description": "Login successful."}, "args": ["self", "user", "testapp"], "min_max_lineno": {"min_lineno": 16, "max_lineno": 27}, "calls": ["testapp.get", "form.submit().follow", "form.submit"], "store_vars_calls": {"res": "form.submit().follow"}}, "test_sees_alert_on_log_out": {"doc": {"short_description": "Show alert on logout."}, "args": ["self", "user", "testapp"], "min_max_lineno": {"min_lineno": 28, "max_lineno": 40}, "calls": ["testapp.get", "form.submit().follow", "testapp.get().follow", "form.submit", "testapp.get", "flask.url_for"], "store_vars_calls": {"res": "testapp.get().follow"}}, "test_sees_error_message_if_password_is_incorrect": {"doc": {"short_description": "Show error if password is incorrect."}, "args": ["self", "user", "testapp"], "min_max_lineno": {"min_lineno": 41, "max_lineno": 53}, "calls": ["testapp.get", "form.submit"], "store_vars_calls": {"res": "form.submit"}}, "test_sees_error_message_if_username_doesnt_exist": {"doc": {"short_description": "Show error if username doesn't exist."}, "args": ["self", "user", "testapp"], "min_max_lineno": {"min_lineno": 54, "max_lineno": 66}, "calls": ["testapp.get", "form.submit"], "store_vars_calls": {"res": "form.submit"}}}}, "TestRegistering": {"doc": {"short_description": "Register a user.", "full": "Register a user."}, "min_max_lineno": {"min_lineno": 68, "max_lineno": 121}, "methods": {"test_can_register": {"doc": {"short_description": "Register a new user."}, "args": ["self", "user", "testapp"], "min_max_lineno": {"min_lineno": 71, "max_lineno": 89}, "calls": ["len", "testapp.get", "form.submit().follow.click", "form.submit().follow", "importer.user.models.User.query.all", "len", "form.submit", "importer.user.models.User.query.all"], "store_vars_calls": {"old_count": "len", "res": "form.submit().follow"}}, "test_sees_error_message_if_passwords_dont_match": {"doc": {"short_description": "Show error if passwords don't match."}, "args": ["self", "user", "testapp"], "min_max_lineno": {"min_lineno": 90, "max_lineno": 104}, "calls": ["testapp.get", "form.submit", "flask.url_for"], "store_vars_calls": {"res": "form.submit"}}, "test_sees_error_message_if_user_already_registered": {"doc": {"short_description": "Show error if user already registered."}, "args": ["self", "user", "testapp"], "min_max_lineno": {"min_lineno": 105, "max_lineno": 121}, "calls": ["factories.UserFactory", "factories.UserFactory.save", "testapp.get", "form.submit", "flask.url_for"], "store_vars_calls": {"user": "UserFactory", "res": "form.submit"}}}}}, "is_test": false}