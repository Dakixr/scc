{"file": {"path": "/Users/dakixr/Desktop/github/scc/tmp-data/metadata/KnowledgeCaptureAndDiscoveryANDmintproject/P4ML-UI/spider/spider/tests/audio_featurization_test.py", "fileNameBase": "audio_featurization_test", "extension": "py", "doc": {"long_description": "Max Morrison\n\nUnit tests for the spider.featurization.audio module", "short_description": "spider.tests: test_featurization_base.py", "full": "spider.tests: test_featurization_base.py\n\nMax Morrison\n\nUnit tests for the spider.featurization.audio module"}}, "dependencies": [{"import": "librosa", "type": "external"}, {"import": "numpy", "alias": "np", "type": "external"}, {"import": "os", "type": "external"}, {"import": "unittest", "type": "external"}, {"import": "warnings", "type": "external"}, {"from_module": "spider.featurization.audio_featurization", "import": "AudioFeaturization", "type": "external"}], "classes": {"TestAudio": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 17, "max_lineno": 83}, "methods": {"setUp": {"doc": {"short_description": "Setup the audio testing environment for Python unittest"}, "args": ["self"], "min_max_lineno": {"min_lineno": 19, "max_lineno": 27}, "calls": ["os.path.dirname", "os.path.join", "librosa.load", "spider.featurization.audio_featurization.AudioFeaturization", "os.path.abspath"], "store_vars_calls": {"data_path": "os.path.dirname", "data_file": "os.path.join", "self._featurizer": "AudioFeaturization"}}, "test_single_time_series": {"doc": {"short_description": "Verify the output shape of a single audio time series"}, "args": ["self"], "min_max_lineno": {"min_lineno": 28, "max_lineno": 37}, "calls": ["audio_featurization_test.TestAudio._featurizer.produce", "audio_featurization_test.TestAudio.assertTrue"], "store_vars_calls": {"features": "self._featurizer.produce"}}, "test_multiple_time_series": {"doc": {"short_description": "Verify the output shape of a list of audio time series"}, "args": ["self"], "min_max_lineno": {"min_lineno": 38, "max_lineno": 47}, "calls": ["numpy.array_split", "audio_featurization_test.TestAudio._featurizer.produce", "audio_featurization_test.TestAudio.assertEqual"], "store_vars_calls": {"data": "np.array_split", "features": "self._featurizer.produce"}}, "test_insufficient_length_time_series": {"doc": {"short_description": "Verify short time series provide warning"}, "args": ["self"], "min_max_lineno": {"min_lineno": 48, "max_lineno": 66}, "calls": ["numpy.arange", "numpy.sin", "numpy.array", "warnings.catch_warnings", "warnings.simplefilter", "audio_featurization_test.TestAudio._featurizer.produce", "audio_featurization_test.TestAudio.assertEqual", "audio_featurization_test.TestAudio.assertEqual", "audio_featurization_test.TestAudio.assertEqual", "audio_featurization_test.TestAudio.assertEqual", "audio_featurization_test.TestAudio.assertTrue", "len"], "store_vars_calls": {"x": "np.arange", "short_series": "np.sin", "features": "self._featurizer.produce"}}, "test_multi_channel_time_series": {"doc": {"short_description": "Verify that mono and stereo audio channels are correctly handled"}, "args": ["self"], "min_max_lineno": {"min_lineno": 67, "max_lineno": 83}, "calls": ["numpy.stack", "numpy.stack", "audio_featurization_test.TestAudio._featurizer.produce", "audio_featurization_test.TestAudio.assertTrue", "audio_featurization_test.TestAudio.assertTrue", "audio_featurization_test.TestAudio.assertRaises", "audio_featurization_test.TestAudio._featurizer.produce"], "store_vars_calls": {"stereo": "np.stack", "quad": "np.stack", "features": "self._featurizer.produce"}}}}}, "is_test": true}