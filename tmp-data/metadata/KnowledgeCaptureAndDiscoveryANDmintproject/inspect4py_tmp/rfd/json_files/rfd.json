{"file": {"path": "/Users/dakixr/Desktop/github/scc/tmp-data/metadata/KnowledgeCaptureAndDiscoveryANDmintproject/P4ML-UI/spider/spider/distance/rfd/rfd.py", "fileNameBase": "rfd", "extension": "py"}, "dependencies": [{"from_module": "__future__", "import": "print_function", "type": "external"}, {"import": "warnings", "type": "external"}, {"import": "pickle", "type": "external"}, {"import": "stopit", "type": "external"}, {"import": "copy", "type": "external"}, {"import": "numpy", "alias": "np", "type": "external"}, {"from_module": "exceptions", "import": "ValueError", "type": "external"}, {"from_module": "exceptions", "import": "TypeError", "type": "external"}, {"from_module": "sklearn.ensemble", "import": "RandomForestRegressor", "type": "external"}, {"from_module": "distance_base", "import": "PairwiseDistanceLearnerPrimitiveBase", "type": "external"}, {"from_module": "distance_base", "import": "TimeoutError", "type": "external"}, {"from_module": "spider.distance.utils", "import": "get_random_constraints", "type": "external"}], "classes": {"RFD": {"min_max_lineno": {"min_lineno": 20, "max_lineno": 183}, "methods": {"__init__": {"args": ["self", "class_cons", "num_trees", "min_node_size", "n_jobs", "verbose"], "min_max_lineno": {"min_lineno": 22, "max_lineno": 60}, "calls": ["super().__init__", "sklearn.ensemble.RandomForestRegressor"], "store_vars_calls": {"self.rf": "RandomForestRegressor"}}, "set_training_data": {"args": ["self", "inputs", "outputs"], "min_max_lineno": {"min_lineno": 61, "max_lineno": 66}}, "fit": {"doc": {"long_description": "to pairwise constraints.", "short_description": "Fit the random forest distance to a set of labeled data by sampling and fitting"}, "args": ["self", "timeout", "iterations"], "min_max_lineno": {"min_lineno": 68, "max_lineno": 120}, "calls": ["hasattr", "copy.deepcopy", "exceptions.ValueError", "exceptions.TypeError", "stopit.ThreadingTimeout", "spider.distance.utils.get_random_constraints", "numpy.empty", "numpy.abs", "rfd.RFD.rf.fit", "distance_base.TimeoutError", "hasattr", "hasattr", "isinstance", "isinstance", "int", "int"], "store_vars_calls": {"rftemp": "copy.deepcopy", "constraints": "get_random_constraints", "rfdfeat": "np.empty"}}, "get_params": {"args": ["self"], "min_max_lineno": {"min_lineno": 122, "max_lineno": 125}, "calls": ["Params", "pickle.dumps"]}, "set_params": {"args": ["self", "params"], "min_max_lineno": {"min_lineno": 127, "max_lineno": 132}, "calls": ["pickle.loads"], "store_vars_calls": {"self.rf": "pickle.loads"}}, "produce": {"doc": {"long_description": "inputs[1], yielding an output of shape n by m (where n and m are\nthe number of instances in inputs[0] and inputs[1] respectively).\n\nBoth inputs must match the dimensionality of the training data.\nThe same array may be input twice in order to generate an\n(inverted) kernel matrix for use in clustering, etc.", "short_description": "Compute the distance matrix between vector arrays inputs[0] and", "raises": {"0": {"description": "thrown if the model has not yet been fit to data", "type_name": "AssertError"}, "1": {"description": "thrown if X or Y are not both numpy arrays", "type_name": "TypeError"}, "2": {"description": "thrown if the dimensionality of instance(s) in\nX or Y is not equal to the dimensionality of the\ntraining data (or the matrices are otherwise the wrong\nshape)", "type_name": "ValueError"}}}, "args": ["self", "inputs", "timeout", "iterations"], "returns": [["dist"]], "min_max_lineno": {"min_lineno": 134, "max_lineno": 183}, "calls": ["exceptions.TypeError", "exceptions.ValueError", "stopit.ThreadingTimeout", "numpy.empty", "xrange", "distance_base.TimeoutError", "isinstance", "isinstance", "numpy.empty", "numpy.abs", "rfd.RFD.rf.predict"], "store_vars_calls": {"dist": "np.empty", "data": "np.empty"}}}}}, "is_test": false}