{"file": {"path": "/Users/dakixr/Desktop/github/scc/tmp-data/metadata/KnowledgeCaptureAndDiscoveryANDmintproject/wings-importer/migrations/env.py", "fileNameBase": "env", "extension": "py"}, "dependencies": [{"from_module": "__future__", "import": "with_statement", "type": "external"}, {"import": "logging", "type": "external"}, {"from_module": "logging.config", "import": "fileConfig", "type": "external"}, {"from_module": "sqlalchemy", "import": "engine_from_config", "type": "external"}, {"from_module": "sqlalchemy", "import": "pool", "type": "external"}, {"from_module": "alembic", "import": "context", "type": "external"}, {"from_module": "flask", "import": "current_app", "type": "external"}], "functions": {"run_migrations_offline": {"doc": {"long_description": "This configures the context with just a URL\nand not an Engine, though an Engine is acceptable\nhere as well.  By skipping the Engine creation\nwe don't even need a DBAPI to be available.\n\nCalls to context.execute() here emit the given string to the\nscript output.", "short_description": "Run migrations in 'offline' mode."}, "min_max_lineno": {"min_lineno": 35, "max_lineno": 54}, "calls": ["config.get_main_option", "alembic.context.configure", "alembic.context.begin_transaction", "alembic.context.run_migrations"], "store_vars_calls": {"url": "config.get_main_option"}}, "run_migrations_online": {"doc": {"long_description": "In this scenario we need to create an Engine\nand associate a connection with the context.", "short_description": "Run migrations in 'online' mode."}, "min_max_lineno": {"min_lineno": 56, "max_lineno": 90}, "calls": ["sqlalchemy.engine_from_config", "getattr", "config.get_section", "sqlalchemy.engine_from_config.connect", "alembic.context.configure", "script.upgrade_ops.is_empty", "alembic.context.begin_transaction", "alembic.context.run_migrations", "logger.info"], "store_vars_calls": {"connectable": "engine_from_config"}, "functions": {"process_revision_directives": {"args": ["context", "revision", "directives"], "min_max_lineno": {"min_lineno": 67, "max_lineno": 73}, "calls": ["getattr", "script.upgrade_ops.is_empty", "logger.info"]}}}}, "body": {"calls": ["logging.getLogger", "logging.config.fileConfig", "config.set_main_option", "flask.current_app.config.get"], "store_vars_calls": {"logger": "logging.getLogger"}}, "is_test": false}