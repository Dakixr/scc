{"file": {"path": "/Users/dakixr/Desktop/github/scc/tmp-data/metadata/KnowledgeCaptureAndDiscoveryANDmintproject/MINT-WorkflowDomain/WINGSWorkflowComponents/dsi-1.0.0/src/WM_climate_indices.py", "fileNameBase": "WM_climate_indices", "extension": "py", "doc": {"long_description": "@author: deborahkhider\n@description: Climate indices (drought) for DARPA World's modeler program", "short_description": "Created on Mon Aug 19 17:15:34 2019", "full": "Created on Mon Aug 19 17:15:34 2019\n\n@author: deborahkhider\n@description: Climate indices (drought) for DARPA World's modeler program"}}, "dependencies": [{"import": "xarray", "alias": "xr", "type": "external"}, {"import": "pandas", "alias": "pd", "type": "external"}, {"import": "numpy", "alias": "np", "type": "external"}, {"from_module": "climate_indices", "import": "compute", "type": "external"}, {"from_module": "climate_indices", "import": "indices", "type": "external"}, {"import": "uuid", "type": "external"}, {"from_module": "datetime", "import": "date", "type": "external"}, {"import": "os", "type": "external"}, {"import": "glob", "type": "external"}, {"from_module": "calendar", "import": "monthrange", "type": "external"}, {"import": "sys", "type": "external"}, {"import": "ast", "type": "external"}, {"import": "cartopy", "alias": "ccrs", "type": "external"}, {"import": "cartopy", "alias": "cfeature", "type": "external"}, {"import": "matplotlib", "alias": "plt", "type": "external"}, {"import": "imageio", "type": "external"}, {"import": "matplotlib", "alias": "mticker", "type": "external"}, {"from_module": "cartopy.mpl.gridliner", "import": "LONGITUDE_FORMATTER", "type": "external"}, {"from_module": "cartopy.mpl.gridliner", "import": "LATITUDE_FORMATTER", "type": "external"}, {"import": "matplotlib", "alias": "cm", "type": "external"}], "functions": {"openCHIRPS": {"doc": {"short_description": "Open CHIRPS dataset and returns the data", "args": {"dataset_name": {"description": "The name of the CHIRPS dataset", "type_name": "str", "is_optional": false}, "bounding_box": {"description": "lat/lon to cut to appropriate size", "type_name": "list", "is_optional": false}}, "returns": {"description": "da_precip (Xarra DataArray): A dataArray of precipitation", "is_generator": false}}, "args": ["dataset_name", "bounding_box"], "returns": [["da_precip"]], "min_max_lineno": {"min_lineno": 32, "max_lineno": 50}, "calls": ["xarray.open_dataset", "xr.open_dataset.sel", "slice", "slice"], "store_vars_calls": {"data": "xr.open_dataset", "p_": "data.sel"}}, "openGLDAS": {"doc": {"short_description": "Open GLDAS datasets and return precipitation and temperature", "args": {"dataset_name": {"description": "The name of the GLDAS folder", "type_name": "str", "is_optional": false}, "bounding_box": {"description": "lat/lon to cut to appropriate size", "type_name": "list", "is_optional": false}, "periodicity": {"description": "The temporal resolution of the input data. Useful to\nknow how the data is organized.", "type_name": "str", "is_optional": false}, "netcdf": {"description": "Whether the input data is in netCDF format.", "type_name": "bool", "is_optional": false}}, "returns": {"description": "da_precip (Xarra DataArray): A dataArray of precipitation\nda_precip_groupby (Xarray DataArray): Xarray dataarray containing\n    the precipitation data grouped by lat/lon\nda_temp (Xarra DataArray): A dataArray of temperature\nda_temp_groupby (Xarray DataArray): Xarray dataarray containing\n    the temperature data grouped by lat/lon", "is_generator": false}}, "args": ["dataset_name", "bounding_box", "periodicity", "netcdf"], "returns": [["da_precip", "da_temp"]], "min_max_lineno": {"min_lineno": 51, "max_lineno": 110}, "calls": ["xr.open_dataset.sel", "pandas.to_datetime", "pd.to_datetime.strftime", "numpy.arange", "file_names.sort", "xarray.open_mfdataset", "xarray.open_dataset", "days.append", "len", "slice", "slice", "os.path.join", "glob.glob", "calendar.monthrange", "os.listdir", "os.path.isdir", "file_names.append", "int", "int", "os.path.join", "item.split", "item.split"], "store_vars_calls": {"p_": "data.sel", "time": "pd.to_datetime", "v": "time.strftime", "data": "xr.open_dataset", "nc_files": "glob.glob"}}, "openFLDAS": {"doc": {"short_description": "Open FLDAS datasets and return precipitation and temperature", "args": {"dataset_name": {"description": "The name of the GLDAS folder", "type_name": "str", "is_optional": false}, "bounding_box": {"description": "lat/lon to cut to appropriate size", "type_name": "list", "is_optional": false}, "periodicity": {"description": "The temporal resolution of the input data. Useful to\nknow how the data is organized.", "type_name": "str", "is_optional": false}, "netcdf": {"description": "Whether the input data is in netCDF format.", "type_name": "bool", "is_optional": false}}, "returns": {"description": "da_precip (Xarra DataArray): A dataArray of precipitation\nda_precip_groupby (Xarray DataArray): Xarray dataarray containing\n    the precipitation data grouped by lat/lon\nda_temp (Xarra DataArray): A dataArray of temperature\nda_temp_groupby (Xarray DataArray): Xarray dataarray containing\n    the temperature data grouped by lat/lon", "is_generator": false}}, "args": ["dataset_name", "bounding_box", "periodicity", "netcdf"], "returns": [["da_precip", "da_temp"]], "min_max_lineno": {"min_lineno": 111, "max_lineno": 170}, "calls": ["xr.open_dataset.sel", "pandas.to_datetime", "pd.to_datetime.strftime", "numpy.arange", "file_names.sort", "xarray.open_mfdataset", "xarray.open_dataset", "days.append", "len", "slice", "slice", "os.path.join", "glob.glob", "calendar.monthrange", "os.listdir", "os.path.isdir", "file_names.append", "int", "int", "os.path.join", "item.split", "item.split"], "store_vars_calls": {"p_": "data.sel", "time": "pd.to_datetime", "v": "time.strftime", "data": "xr.open_dataset", "nc_files": "glob.glob"}}, "SPI": {"doc": {"long_description": "This function uses the SPI calculation from the climate indices package", "short_description": "Calculate SPI from precipitation", "args": {"da_precip": {"description": "A dataArray of precipitation", "type_name": "Xarray DataArray", "is_optional": false}, "distribution": {"description": "The distribution used to fit the data. Default is\n'gamma'. To use a Pearson Type III distribution, enter 'pearson'", "type_name": "str", "is_optional": false}, "periodicity": {"description": "Either 'monthly' or 'daily'", "type_name": "str", "is_optional": false}, "scales": {"description": "The timescales on which the index is computed, either 6 or 12.\nDefault is 6.", "type_name": "int", "is_optional": false}, "data_start_year": {"description": "Year to start computing  SPI - Default is first year in the data"}, "data_end_year": {"description": "Year to stop computing  SPI - Default is first year in the data"}, "calibration_start_year": {"description": "Start year for the calibration - Defauls is first year in the data"}, "calibration_end_year": {"description": "End year for the calibration - Default is to set a 30-year  period,\nor the full dataset if shorter than 30 years"}}, "returns": {"description": "ds_spi (Xarray DataArray): SPI index  DataArray\ninfo (dict): Dictionary containing relevant information about the calib period", "is_generator": false}}, "args": ["da_precip", "distribution", "periodicity", "scales", "data_start_year", "data_end_year", "calibration_start_year", "calibration_end_year"], "returns": [["ds_spi", "info"]], "min_max_lineno": {"min_lineno": 173, "max_lineno": 280}, "calls": ["xarray.apply_ufunc", "da_spi.unstack.unstack", "numpy.arange", "numpy.take", "np.take.to_dataset", "int", "int", "int", "da_precip.stack().groupby", "numpy.min", "print", "int", "numpy.max", "print", "int", "numpy.min", "print", "int", "int", "print", "da_precip.stack().groupby", "numpy.where", "numpy.where", "da_spi.unstack.dims.index", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "int", "da_precip.stack", "da_precip.stack().groupby", "KeyError", "numpy.max", "da_precip.stack", "da_precip.stack"], "store_vars_calls": {"da_spi": "da_spi.unstack", "r": "np.arange", "da_spi_cut": "np.take", "ds_spi": "da_spi_cut.to_dataset", "data_start_year": "int", "data_end_year": "int", "calibration_start_year": "int", "da_precip_groupby": "da_precip.stack().groupby", "calibration_end_year": "int"}}, "PET": {"doc": {"long_description": "This function uses the PET calculation from the climate indices package.\nMonhtly only.\nUses Thornthwaite equation.", "short_description": "Calculate PET from temperature", "args": {"da_temp": {"description": "A dataArray of temperature", "type_name": "Xarray DataArray", "is_optional": false}, "data_start_year": {"description": "Year to start computing  SPI - Default is first year in the data"}, "data_end_year": {"description": "Year to stop computing  SPI - Default is first year in the data"}}, "returns": {"description": "ds_pet (Xarray DataSet): PET index (mm/month)\nda_pet (Xarray DataArray): PET index for full length of data (mm/month). To use with SPEI function\ninfo (dict): Dictionary containing relevant information", "is_generator": false}}, "args": ["da_temp", "data_start_year", "data_end_year"], "returns": [["ds_pet", "da_pet", "info"]], "min_max_lineno": {"min_lineno": 282, "max_lineno": 378}, "calls": ["numpy.arange", "numpy.take", "xarray.apply_ufunc", "da_pet.unstack.unstack", "numpy.arange", "numpy.take", "np.take.to_dataset", "int", "int", "numpy.array", "int", "print", "int", "int", "int", "print", "int", "int", "da_temp.stack().groupby", "numpy.min", "print", "int", "numpy.max", "print", "int", "numpy.array", "numpy.where", "numpy.where", "da_temp.dims.index", "da_temp.stack().groupby", "da_pet.unstack.dims.index", "numpy.min", "numpy.max", "numpy.array", "KeyError", "da_temp.stack", "da_temp.stack().groupby", "KeyError", "numpy.where", "numpy.where", "da_temp.stack", "da_temp.stack"], "store_vars_calls": {"r": "np.arange", "da_temp_cut": "np.take", "da_pet": "da_pet.unstack", "da_pet_cut": "np.take", "ds_pet": "da_pet_cut.to_dataset", "data_start_year": "int", "data_end_year": "int", "lat": "np.array", "start_year": "int", "end_year": "int", "da_temp_groupby": "da_temp.stack().groupby"}}, "SPEI": {"doc": {"long_description": "This function uses the SPI calculation from the climate indices package", "short_description": "Calculate SPI from precipitation", "args": {"da_precip": {"description": "A dataArray of precipitation", "type_name": "Xarray DataArray", "is_optional": false}, "da_temp": {"description": "A datarray of temperature values", "type_name": "Xarray DataArray", "is_optional": false}, "distribution": {"description": "The distribution used to fit the data. Default is\n'gamma'. To use a Pearson Type III distribution, enter 'pearson'", "type_name": "str", "is_optional": false}, "periodicity": {"description": "Either 'monthly' or 'daily'", "type_name": "str", "is_optional": false}, "scales": {"description": "The timescales on which the index is computed, either 6 or 12.\nDefault is 6.", "type_name": "int", "is_optional": false}, "data_start_year": {"description": "Year to start computing  SPI - Default is first year in the data"}, "data_end_year": {"description": "Year to stop computing  SPI - Default is first year in the data"}, "calibration_start_year": {"description": "Start year for the calibration - Defauls is first year in the data"}, "calibration_end_year": {"description": "End year for the calibration - Default is to set a 30-year  period,\nor the full dataset if shorter than 30 years"}}, "returns": {"description": "ds_spi (Xarray DataSet): SPEI index  DataArray\ninfo (dict): Dictionary containing relevant information about the calib period", "is_generator": false}}, "args": ["da_precip", "da_temp", "distribution", "periodicity", "scales", "data_start_year", "data_end_year", "calibration_start_year", "calibration_end_year"], "returns": [["ds_spei", "info"]], "min_max_lineno": {"min_lineno": 379, "max_lineno": 505}, "calls": ["WM_climate_indices.PET", "numpy.arange", "numpy.take", "xarray.apply_ufunc", "da_spei.unstack.unstack", "numpy.arange", "numpy.take", "np.take.to_dataset", "int", "int", "int", "numpy.min", "numpy.min", "numpy.max", "numpy.max", "np.take.stack().groupby", "da_pet.stack().groupby", "numpy.min", "print", "int", "numpy.max", "print", "int", "numpy.min", "print", "int", "int", "print", "da_precip.dims.index", "np.take.stack().groupby", "da_pet.stack().groupby", "numpy.where", "numpy.where", "da_spei.unstack.dims.index", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "int", "numpy.where", "numpy.where", "np.take.stack", "da_pet.stack", "np.take.stack().groupby", "da_pet.stack().groupby", "KeyError", "numpy.max", "np.take.stack", "da_pet.stack", "numpy.min", "numpy.max", "np.take.stack", "da_pet.stack"], "store_vars_calls": {"r": "np.arange", "da_precip_cut": "np.take", "da_spei": "da_spei.unstack", "da_spei_cut": "np.take", "ds_spei": "da_spei_cut.to_dataset", "data_start_year": "int", "data_end_year": "int", "calibration_start_year": "int", "da_precip_groupby": "da_precip_cut.stack().groupby", "da_pet_groupby": "da_pet.stack().groupby", "calibration_end_year": "int"}}, "to_netcdfMint": {"doc": {"short_description": "Returns a MINT-ready netcdf file with SPI values", "args": {"ds": {"description": "A dataset of drought indices", "type_name": "Xarray DataSet", "is_optional": false}, "info": {"description": "Dictionary containing pertinent information frpm calculation", "type_name": "dict", "is_optional": false}, "dir_out": {"description": "The out directory to write the netcdf files", "type_name": "str", "is_optional": false}}, "returns": {"description": "NetCDF ouput in MINT Format", "is_generator": false}}, "args": ["ds", "info", "dataset_type", "bounding_box", "dir_out"], "min_max_lineno": {"min_lineno": 506, "max_lineno": 605}, "calls": ["str", "str", "str", "str", "str", "ds.to_netcdf", "os.path.isdir", "os.makedirs", "uuid.uuid4", "datetime.date.today", "datetime.date.today", "numpy.min", "numpy.max", "list", "numpy.min", "numpy.max", "list", "str", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "list", "numpy.min", "numpy.max", "str", "numpy.min", "numpy.max", "ds.attrs[].split", "ds.attrs[].split", "str", "ds.attrs[].split", "ds.attrs[].split", "str", "str", "str"]}, "visualizeDroughtIndex": {"doc": {"short_description": "Visualization of drought index", "args": {"ds": {"description": "the dataset containing the index", "type_name": "xarray dataset", "is_optional": false}, "dir_out": {"description": "the output directory for the visualization", "type_name": "str", "is_optional": false}}}, "args": ["ds", "dir_out", "info", "dataset_type"], "min_max_lineno": {"min_lineno": 606, "max_lineno": 704}, "calls": ["cartopy.PlateCarree", "numpy.size", "list", "imageio.get_writer.close", "numpy.arange", "list", "pandas.to_datetime().strftime", "matplotlib.subplots", "matplotlib.axes", "plt.axes.add_feature", "plt.axes.add_feature", "plt.axes.add_feature", "numpy.arange", "plt.axes.gridlines", "matplotlib.FixedLocator", "matplotlib.FixedLocator", "matplotlib.title", "filenames.append", "matplotlib.savefig", "matplotlib.close", "imageio.get_writer", "imageio.get_writer", "imageio.get_writer.append_data", "ds.data_vars.keys", "os.path.isdir", "os.makedirs", "os.path.isdir", "os.makedirs", "os.path.isdir", "os.makedirs", "os.path.isdir", "os.makedirs", "numpy.isnan().all", "matplotlib.contourf", "numpy.arange", "matplotlib.colorbar", "numpy.linspace", "numpy.linspace", "imageio.imread", "KeyError", "pandas.to_datetime", "plt.colorbar.ax.set_title", "cartopy.PlateCarree", "numpy.round", "numpy.round", "numpy.round", "numpy.round", "numpy.isnan", "str", "plt.colorbar.ax.set_title", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "str", "str", "plt.colorbar.ax.set_title", "plt.colorbar.ax.set_title", "str", "str"], "store_vars_calls": {"proj": "ccrs.PlateCarree", "idx": "np.size", "count": "list", "date": "pd.to_datetime().strftime", "ax": "plt.axes", "levels": "np.arange", "gl": "ax.gridlines", "gl.xlocator": "mticker.FixedLocator", "gl.ylocator": "mticker.FixedLocator", "writer": "imageio.get_writer", "img": "plt.contourf", "tick_range": "np.arange", "cbar": "plt.colorbar"}}}, "main_info": {"main_flag": 1, "type": "script"}, "is_test": true}