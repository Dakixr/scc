{"file": {"path": "/Users/dakixr/Desktop/github/scc/tmp-data/metadata/KnowledgeCaptureAndDiscoveryANDmintproject/niw/util.py", "fileNameBase": "util", "extension": "py"}, "dependencies": [{"import": "os", "type": "external"}], "classes": {"Util": {"extend": ["object"], "min_max_lineno": {"min_lineno": 4, "max_lineno": 297}, "methods": {"getWorkflowName": {"doc": {"long_description": "@return filename: str\n\n- create the workflow name based on the notebook filename\n- create the folder for the workflow files", "short_description": "@param filepath: str"}, "args": ["self", "filepath"], "returns": [["filename"]], "min_max_lineno": {"min_lineno": 6, "max_lineno": 20}, "calls": ["re.sub.replace", "re.sub.title", "re.sub", "filepath.split"], "store_vars_calls": {"filename": "re.sub"}}, "createFolder": {"doc": {"long_description": "@return None\n\nCreate folder or remove contents of the existing folder", "short_description": "@param folder: str"}, "args": ["self", "folder"], "min_max_lineno": {"min_lineno": 21, "max_lineno": 35}, "calls": ["os.path.exists", "os.listdir", "os.mkdir", "os.path.join", "os.path.isfile", "os.unlink"], "store_vars_calls": {"file_path": "os.path.join"}}, "findFirstQuote": {"doc": {"long_description": "@return [int,str] index and quotation mark\n\nFind the first opening quote.", "short_description": "@param st: str"}, "args": ["self", "st"], "min_max_lineno": {"min_lineno": 36, "max_lineno": 53}, "calls": ["st.find", "st.find", "st.find", "st.find", "st.find", "st.find"]}, "findRealQuote": {"doc": {"long_description": "@param st: str\n@return int: index TODO: what is this?\n\n- used after findFirstQuote\n- find closing quote", "short_description": "@param q: str Quotation mark \" or '"}, "args": ["self", "q", "st"], "min_max_lineno": {"min_lineno": 54, "max_lineno": 73}, "calls": ["st.find", "st[].count", "st[].count", "st[].count", "st.find", "st.find", "st.find", "st.find", "st.find", "st.find", "st.find"]}, "isOpeningFile": {"doc": {"long_description": "@return Boolean\n\nCheck if string contains a open statement.", "short_description": "@param st: str"}, "args": ["self", "st"], "min_max_lineno": {"min_lineno": 74, "max_lineno": 91}, "calls": ["st.replace().find", "st[].replace", "st.replace", "st.index", "t.rfind", "st.rfind", "st.index"], "store_vars_calls": {"s": "st[].replace"}}, "spaces": {"doc": {"long_description": "@return int\n\nCount the number of spaces in a string.", "short_description": "@param s: str"}, "args": ["self", "s"], "returns": [["k"]], "min_max_lineno": {"min_lineno": 92, "max_lineno": 103}, "calls": ["len"]}, "getFileName": {"doc": {"long_description": "TODO: why all these values on the list?\n@return [str,int,str,Boolean]: fileName,index,st[],Boolean,st[]\n\nGet the file name in open() statement.\n\nExample:\nstr = with open(mode = sys.agrv[]1,file = sys.agrv[]2) as d: \nreturn [u'sys.agrv[]2', 32, u'with open(mode=sys.agrv[]1,file=sys.agrv[]2) as d:', False]\n\nstr =       with open (sys.agrv[]3,sys.agrv[]4) as da: \nreturn [u'sys.agrv[]3', 15, u'    with open (sys.agrv[]3,sys.agrv[]4) as da:', False]\n\nstr = with open(sys.agrv[]5,sys.agrv[]6) as w: \nreturn [u'sys.agrv[]5', 10, u'with open(sys.agrv[]5,sys.agrv[]6) as w:', False]", "short_description": "@param st: str"}, "args": ["self", "st"], "returns": [["t", "ind"], ["t", "ind"]], "min_max_lineno": {"min_lineno": 104, "max_lineno": 135}, "calls": ["t.replace.replace.replace", "st.index", "st.rfind", "st.count", "st.find", "st.find", "st[].replace", "st.index", "t.replace.replace.find", "t.replace.replace.find", "t.replace.replace.find", "st[].replace", "st[].replace", "st.rfind", "st.rfind", "st.index", "st.index", "st.find", "st.index", "st.rfind", "st.index", "st.rfind"], "store_vars_calls": {"t": "t.replace"}}, "getMode": {"doc": {"long_description": "@param fileName: str\n@return str\n\nReturns the mode use in a open(mode=\"r\") statement.\n\nExamples:\n\nst = with open(mode = sys.agrv[]1,file = sys.agrv[]2) as d: \nfilename = sys.agrv[]2\nreturn: sys.agrv[]1\n\nst = with open (sys.agrv[]3,sys.agrv[]4) as da: \nfilename = sys.agrv[]3\nreturn: sys.agrv[]4\n\nst = with open(sys.agrv[]5,sys.agrv[]6) as w: \nfilename = sys.agrv[]5 \nreturn: sys.agrv[]6", "short_description": "@param st: str"}, "args": ["self", "st", "fileName"], "min_max_lineno": {"min_lineno": 136, "max_lineno": 168}, "calls": ["t.replace.replace.replace", "t.replace.replace.replace", "t.replace.replace.split", "range", "len", "st.rfind", "st.index", "a[].find", "a[].find"], "store_vars_calls": {"t": "t.replace", "a": "t.split"}}, "buffering": {"doc": {"long_description": "@return int\n\nExample\nst = with open(mode = sys.agrv[]1,file = sys.agrv[]2) as d: \nreturn -1\n\nst =    with open (sys.agrv[]3,sys.agrv[]4) as da: \nreturn -1\n\nst = with open(sys.agrv[]5,sys.agrv[]6) as w: \nreturn -1\n\nTODO: description", "short_description": "@param st: str"}, "args": ["self", "st"], "min_max_lineno": {"min_lineno": 169, "max_lineno": 194}, "calls": ["t.split", "len", "st.rfind", "st.index"], "store_vars_calls": {"a": "t.split"}}, "addZeros": {"doc": {"long_description": "@return st: str\n\nAdd zeros \"0\" up to 5 digits.", "short_description": "@param num: int"}, "args": ["self", "num"], "returns": [["st"]], "min_max_lineno": {"min_lineno": 195, "max_lineno": 206}, "calls": ["str", "len"], "store_vars_calls": {"st": "str"}}, "isPrinting": {"doc": {"long_description": "@param i: TODO: remove?\n@return Boolean\n\nCheck if string is a call to print function\nTODO: why i as an argument?", "short_description": "@param st: str"}, "args": ["self", "st", "i"], "min_max_lineno": {"min_lineno": 207, "max_lineno": 220}, "calls": ["st.replace.replace.replace", "st.replace.replace.find", "st.replace.replace.find", "st.replace.replace.find", "st.replace.replace.find"], "store_vars_calls": {"st": "st.replace"}}, "checkForVariable": {"doc": {"long_description": "@param i\n@param j\n@param k\n@param s\n@return [Boolean,Boolean,int,int]\n\nExample\ni,j,k,s\n0 0 8 temp = []\nreturn [False, False, 0, 9] \n\n0 1 0 s =\nreturn [True, u's', [1, 0], 2] \n\n0 1 2 s =\nreturn [False, False, 0, 3] \n\n0 1 3 s =\nreturn [False, False, 0, 4] \n\n0 2 0 ga = sys.arg[]2!\nreturn [True, u'ga', [2, 0], 3]\n\n0 2 3 ga = sys.arg[]2!\nreturn [False, False, 0, 4]\n\nTODO: what kind of check?", "short_description": "TODO: Describe @param and @return"}, "args": ["self", "i", "j", "k", "s"], "min_max_lineno": {"min_lineno": 221, "max_lineno": 267}, "calls": ["s[].isalpha", "range", "len", "s[].replace", "s[].isalpha", "util.Util.isNumber", "s[].replace", "s.find", "s.find", "s[].count", "s[].count", "s[].replace", "s[].replace", "s[].replace"]}, "isNumber": {"doc": {"long_description": "@return Boolean\nCheck if character is a number", "short_description": "@param char: str"}, "args": ["self", "char"], "min_max_lineno": {"min_lineno": 269, "max_lineno": 280}, "calls": ["int"]}, "inCode": {"doc": {"long_description": "@param lineCode: str\n@return Boolean\nTODO: description", "short_description": "@param methName: str"}, "args": ["self", "methName", "lineCode"], "min_max_lineno": {"min_lineno": 281, "max_lineno": 297}, "calls": ["lineCode.replace", "ord", "ord", "lineCode.find", "lineCode.find", "len", "lineCode[].count", "lineCode.find", "lineCode.find", "len", "lineCode.find"], "store_vars_calls": {"pre": "ord", "post": "ord"}}}}}, "is_test": false}