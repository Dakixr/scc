{"file": {"path": "/Users/dakixr/Desktop/github/scc/tmp-data/metadata/KnowledgeCaptureAndDiscoveryANDmintproject/P4ML-UI/dsbox-ta2/python/dsbox/planner/levelone/planner.py", "fileNameBase": "planner", "extension": "py", "doc": {"short_description": "This module implements the level one planner of the DSBox system.", "full": "This module implements the level one planner of the DSBox system."}}, "dependencies": [{"import": "sys", "type": "external"}, {"import": "operator", "type": "external"}, {"from_module": "dsbox.schema.problem_schema", "import": "TaskType", "type": "external"}, {"from_module": "dsbox.schema.problem_schema", "import": "TaskSubType", "type": "external"}, {"from_module": "dsbox.schema.problem_schema", "import": "Metric", "type": "external"}, {"from_module": "dsbox.schema.dataset_schema", "import": "VariableFileType", "type": "external"}, {"from_module": "dsbox.planner.levelone.primitives", "import": "Primitives", "type": "external"}, {"from_module": "dsbox.planner.levelone.primitives", "import": "Category", "type": "external"}, {"from_module": "dsbox.planner.levelone.primitives", "import": "DSBoxPrimitives", "type": "external"}, {"from_module": "dsbox.planner.levelone.primitives", "import": "D3mPrimitives", "type": "external"}, {"from_module": "dsbox.planner.levelone.primitives", "import": "Primitive", "type": "external"}, {"from_module": "dsbox.planner.levelone.primitives", "import": "D3mPrimitive", "type": "external"}, {"from_module": "dsbox.planner.common.primitive", "import": "Primitive", "type": "external"}, {"import": "json", "type": "external"}, {"import": "pkgutil", "type": "external"}, {"import": "random", "type": "external"}, {"import": "pprint", "type": "external"}, {"import": "bisect", "type": "external"}, {"import": "itertools", "type": "external"}, {"import": "numpy", "alias": "np", "type": "external"}], "classes": {"Ontology": {"doc": {"short_description": "Primitve ontology", "full": "Primitve ontology"}, "extend": ["object"], "min_max_lineno": {"min_lineno": 59, "max_lineno": 78}, "methods": {"__init__": {"args": ["self"], "min_max_lineno": {"min_lineno": 63, "max_lineno": 65}, "calls": ["planner.Ontology.load"]}, "load": {"doc": {"short_description": "Load ontology from JSON definition"}, "args": ["self"], "min_max_lineno": {"min_lineno": 66, "max_lineno": 74}, "calls": ["pkgutil.get_data", "print", "json.loads", "type", "pkgutil.get_data.decode"], "store_vars_calls": {"text": "pkgutil.get_data", "content": "json.loads"}}, "get_tasks": {"doc": {"short_description": "Returns task names"}, "args": ["self"], "min_max_lineno": {"min_lineno": 75, "max_lineno": 78}}}}, "ConfigurationSpace": {"doc": {"short_description": "Defines the space of primitive pipelines", "full": "Defines the space of primitive pipelines"}, "extend": ["object"], "min_max_lineno": {"min_lineno": 79, "max_lineno": 131}, "methods": {"__init__": {"args": ["self", "dimension_names", "space"], "min_max_lineno": {"min_lineno": 82, "max_lineno": 90}, "calls": ["len", "dict", "zip", "len", "len"], "store_vars_calls": {"self.ndim": "len", "self._subspace_lookup": "dict"}}, "set_seed": {"doc": {"short_description": "Set random seed"}, "args": ["cls", "a_seed"], "min_max_lineno": {"min_lineno": 91, "max_lineno": 95}, "calls": ["random.seed"]}, "get_random_configuration": {"doc": {"short_description": "Returns a random configuration from the configuration space"}, "args": ["self"], "min_max_lineno": {"min_lineno": 96, "max_lineno": 104}, "calls": ["planner.ConfigurationPoint", "random.randrange", "components.append", "len"], "store_vars_calls": {"i": "random.randrange"}}, "get_configuration_by_policy": {"doc": {"short_description": "Returns a random configuration based on stochastic policy"}, "args": ["self", "policy"], "min_max_lineno": {"min_lineno": 105, "max_lineno": 117}, "calls": ["planner.ConfigurationPoint", "components.append", "policy.get_affinities", "planner.random_choices", "random.randrange", "len"], "store_vars_calls": {"values": "policy.get_affinities", "component": "random_choices", "i": "random.randrange"}}, "get_configuration_point": {"doc": {"short_description": "Generate point from partially specified components"}, "args": ["self", "name_list", "component_list"], "min_max_lineno": {"min_lineno": 118, "max_lineno": 131}, "calls": ["planner.ConfigurationPoint", "Exception", "name_list.index", "components.append", "components.append"], "store_vars_calls": {"index": "name_list.index"}}}}, "ConfigurationPoint": {"doc": {"short_description": "A point in ConfigurationSpace", "full": "A point in ConfigurationSpace"}, "extend": ["object"], "min_max_lineno": {"min_lineno": 132, "max_lineno": 160}, "methods": {"__init__": {"args": ["self", "configuration_space", "point"], "min_max_lineno": {"min_lineno": 134, "max_lineno": 140}, "calls": ["planner.ConfigurationPoint.set_point"]}, "set_point": {"doc": {"short_description": "set point value list"}, "args": ["self", "point"], "min_max_lineno": {"min_lineno": 140, "max_lineno": 147}, "calls": ["zip", "len"]}, "get_dim_value": {"args": ["self", "name"], "min_max_lineno": {"min_lineno": 147, "max_lineno": 152}, "calls": ["planner.ConfigurationPoint.configuration_space.dimension_names.index", "Exception"], "store_vars_calls": {"index": "self.configuration_space.dimension_names.index"}}, "new_point_replace": {"doc": {"short_description": "Generate new point by replacing coordiante at dimension name with new value"}, "args": ["self", "name", "value"], "min_max_lineno": {"min_lineno": 152, "max_lineno": 160}, "calls": ["list", "planner.ConfigurationPoint.configuration_space.dimension_names.index", "planner.ConfigurationPoint", "Exception"], "store_vars_calls": {"new_point": "list", "index": "self.configuration_space.dimension_names.index"}}}}, "AffinityPolicy": {"doc": {"long_description": "The default affinity is 1. If affinity value is 10 then the pair\nis 10x more likely to occur together compared to default.", "short_description": "Defines affinity pairs of components.", "full": "Defines affinity pairs of components.\nThe default affinity is 1. If affinity value is 10 then the pair\nis 10x more likely to occur together compared to default."}, "extend": ["object"], "min_max_lineno": {"min_lineno": 161, "max_lineno": 206}, "methods": {"__init__": {"args": ["self", "primitives"], "min_max_lineno": {"min_lineno": 166, "max_lineno": 169}, "calls": ["numpy.ones"], "store_vars_calls": {"self.affinity_matrix": "np.ones"}}, "set_affinity": {"doc": {"short_description": "Set affinity between source to destination primitive"}, "args": ["self", "source_primitive", "dest_primitive", "affinity_value"], "min_max_lineno": {"min_lineno": 170, "max_lineno": 175}, "calls": ["planner.AffinityPolicy.primitives.get_index", "planner.AffinityPolicy.primitives.get_index"], "store_vars_calls": {"row": "self.primitives.get_index", "col": "self.primitives.get_index"}}, "set_symetric_affinity": {"doc": {"short_description": "Set affinities between the two primitives"}, "args": ["self", "source_primitive", "dest_primitive", "affinity_value"], "min_max_lineno": {"min_lineno": 176, "max_lineno": 182}, "calls": ["planner.AffinityPolicy.primitives.get_index", "planner.AffinityPolicy.primitives.get_index"], "store_vars_calls": {"row": "self.primitives.get_index", "col": "self.primitives.get_index"}}, "get_affinity": {"doc": {"long_description": "Default value is zero.", "short_description": "Returns affinity from source to desintation primitive."}, "args": ["self", "source_primitive", "dest_primitive"], "min_max_lineno": {"min_lineno": 183, "max_lineno": 189}, "calls": ["planner.AffinityPolicy.primitives.get_index", "planner.AffinityPolicy.primitives.get_index"], "store_vars_calls": {"row": "self.primitives.get_index", "col": "self.primitives.get_index"}}, "get_affinities": {"doc": {"short_description": "Returns vector of affinitites of length len(dest_primitives)"}, "args": ["self", "source_primitives", "dest_primitives", "source_weights", "dest_weights"], "returns": [["result"]], "min_max_lineno": {"min_lineno": 190, "max_lineno": 206}, "calls": ["numpy.empty", "enumerate", "planner.AffinityPolicy.primitives.get_index", "planner.AffinityPolicy.primitives.get_index", "len", "zip", "zip"], "store_vars_calls": {"result": "np.empty"}}}}, "Pipeline": {"doc": {"short_description": "Defines a sequence of executions", "full": "Defines a sequence of executions"}, "extend": ["object"], "min_max_lineno": {"min_lineno": 207, "max_lineno": 238}, "methods": {"__init__": {"args": ["self", "configuration_point"], "min_max_lineno": {"min_lineno": 209, "max_lineno": 211}}, "get_primitive": {"args": ["self", "dim_name"], "min_max_lineno": {"min_lineno": 212, "max_lineno": 214}, "calls": ["planner.Pipeline.configuration_point.get_dim_value"]}, "get_primitives": {"args": ["self"], "min_max_lineno": {"min_lineno": 215, "max_lineno": 218}}, "new_pipeline_replace": {"doc": {"short_description": "Generate new pipeline by replacing primitive at dimension name with new primitive"}, "args": ["self", "dim_name", "new_component"], "min_max_lineno": {"min_lineno": 219, "max_lineno": 223}, "calls": ["planner.Pipeline.configuration_point.new_point_replace", "planner.Pipeline"], "store_vars_calls": {"point": "self.configuration_point.new_point_replace"}}, "get_random_pipeline": {"doc": {"short_description": "Returns a random pipeline"}, "args": ["cls", "configuration_space"], "min_max_lineno": {"min_lineno": 224, "max_lineno": 228}, "calls": ["planner.Pipeline", "configuration_space.get_random_configuration"]}, "__str__": {"args": ["self"], "min_max_lineno": {"min_lineno": 229, "max_lineno": 238}, "calls": ["zip", "out_list.append", "out_list.append"]}}}, "LevelOnePlanner": {"doc": {"short_description": "Level One Planner", "full": "Level One Planner"}, "extend": ["object"], "min_max_lineno": {"min_lineno": 239, "max_lineno": 553}, "methods": {"__init__": {"args": ["self", "task_type", "task_subtype", "metric", "media_type", "ignore_preprocessing", "primitives", "policy"], "min_max_lineno": {"min_lineno": 241, "max_lineno": 259}, "calls": ["planner.LevelOnePlanner.compute_configuration_space", "dsbox.planner.levelone.primitives.Primitives"], "store_vars_calls": {"self.configuration_space": "self.compute_configuration_space", "self.primitives": "Primitives"}}, "compute_configuration_space": {"doc": {"short_description": "Compute configuration space using Primitives"}, "args": ["self"], "min_max_lineno": {"min_lineno": 260, "max_lineno": 289}, "calls": ["dimension_name.append", "planner.LevelOnePlanner.primitives.hierarchies[].get_primitives_as_list", "dimension.append", "dimension_name.append", "planner.LevelOnePlanner.primitives.hierarchies[].get_primitives_as_list", "dimension.append", "planner.ConfigurationSpace", "dimension_name.append", "planner.LevelOnePlanner.primitives.hierarchies[].get_primitives_as_list", "dimension.append", "planner.LevelOnePlanner.primitives.hierarchies[].get_primitives_as_list", "dimension_name.append", "dimension.append", "planner.LevelOnePlanner.primitives.hierarchies[].get_primitives_as_list", "planner.LevelOnePlanner.primitives.hierarchies[].get_primitives_as_list"], "store_vars_calls": {"feature": "self.primitives.hierarchies[].get_primitives_as_list", "evaluator": "self.primitives.hierarchies[].get_primitives_as_list", "preprocess": "self.primitives.hierarchies[].get_primitives_as_list", "learner": "self.primitives.hierarchies[].get_primitives_as_list"}}, "get_primitive_weight": {"args": ["self", "primitive", "hierarchy"], "min_max_lineno": {"min_lineno": 313, "max_lineno": 329}, "calls": ["hierarchy.get_node_by_primitive"], "store_vars_calls": {"node": "hierarchy.get_node_by_primitive"}}, "generate_pipelines": {"doc": {"short_description": "Generation pipelines"}, "args": ["self", "num_pipelines"], "returns": [["pipelines"]], "min_max_lineno": {"min_lineno": 330, "max_lineno": 339}, "calls": ["range", "planner.Pipeline.get_random_pipeline", "pipelines.append"], "store_vars_calls": {"pipeline": "Pipeline.get_random_pipeline"}}, "generate_pipelines_with_policy": {"doc": {"short_description": "Generate pipelines using affinity policy"}, "args": ["self", "policy", "num_pipelines"], "returns": [["pipelines"]], "min_max_lineno": {"min_lineno": 340, "max_lineno": 350}, "calls": ["range", "planner.LevelOnePlanner.configuration_space.get_configuration_by_policy", "planner.Pipeline", "pipelines.append"], "store_vars_calls": {"configuration": "self.configuration_space.get_configuration_by_policy", "pipeline": "Pipeline"}}, "find_primitives_by_hierarchy": {"doc": {"short_description": "Returns one random primitive per node in the hierarchy"}, "args": ["self", "dim_name", "hierarchy", "level"], "returns": [["result"]], "min_max_lineno": {"min_lineno": 351, "max_lineno": 374}, "calls": ["hierarchy.get_nodes_by_level", "hierarchy.get_nodes_by_level", "planner.random_choices", "result.append", "primitives_by_node.append", "node.get_content", "planner.LevelOnePlanner.get_primitive_weight", "l2_node.get_content"], "store_vars_calls": {"nodes": "hierarchy.get_nodes_by_level", "component": "random_choices"}}, "generate_pipelines_with_hierarchy": {"doc": {"short_description": "Generate singleton pipeline using tag hierarchy"}, "args": ["self", "level"], "returns": [["pipelines"]], "min_max_lineno": {"min_lineno": 375, "max_lineno": 404}, "calls": ["planner.LevelOnePlanner.find_primitives_by_hierarchy", "planner.LevelOnePlanner.configuration_space.get_configuration_point", "planner.Pipeline", "pipelines.append", "Exception"], "store_vars_calls": {"primitives": "self.find_primitives_by_hierarchy", "configuration": "self.configuration_space.get_configuration_point", "pipe": "Pipeline"}}, "find_primitives_by_hierarchy_new": {"doc": {"short_description": "Returns one particular primitive per node in the hierarchy"}, "args": ["self", "dim_name", "hierarchy", "models", "level"], "returns": [["result"]], "min_max_lineno": {"min_lineno": 405, "max_lineno": 436}, "calls": ["hierarchy.get_nodes_by_level", "hierarchy.get_primitives", "result.append", "primitives_by_node.append", "l2_node.get_content", "hierarchy.get_node_by_primitive", "new_nodes.append"], "store_vars_calls": {"nodes": "hierarchy.get_node_by_primitive", "all_primitives": "hierarchy.get_primitives"}}, "generate_pipelines_with_hierarchy_new": {"doc": {"short_description": "Generate singleton pipeline using tag hierarchy"}, "args": ["self", "models", "level"], "returns": [["pipelines"]], "min_max_lineno": {"min_lineno": 437, "max_lineno": 467}, "calls": ["planner.LevelOnePlanner.find_primitives_by_hierarchy_new", "planner.LevelOnePlanner.configuration_space.get_configuration_point", "planner.Pipeline", "pipelines.append", "Exception"], "store_vars_calls": {"primitives": "self.find_primitives_by_hierarchy_new", "configuration": "self.configuration_space.get_configuration_point", "pipe": "Pipeline"}}, "fill_feature_with_hierarchy": {"doc": {"long_description": "using the primitive hierarchy", "short_description": "Return new pipelines by filling in the feature extraction component"}, "args": ["self", "pipeline", "level"], "returns": [["new_pipelines"]], "min_max_lineno": {"min_lineno": 468, "max_lineno": 482}, "calls": ["pipeline.get_primitive", "planner.LevelOnePlanner.find_primitives_by_hierarchy", "new_pipelines.append", "pipeline.get_primitives", "pipeline.new_pipeline_replace"], "store_vars_calls": {"current_primitive": "pipeline.get_primitive", "primitives": "self.find_primitives_by_hierarchy"}}, "fill_feature_by_weights": {"args": ["self", "pipeline", "num_pipelines"], "returns": [["new_pipelines"]], "min_max_lineno": {"min_lineno": 483, "max_lineno": 498}, "calls": ["pipeline.get_primitive", "hierarchy.get_primitives_as_list", "planner.random_choices_without_replacement", "planner.LevelOnePlanner.get_primitive_weight", "new_pipelines.append", "pipeline.get_primitives", "pipeline.new_pipeline_replace"], "store_vars_calls": {"current_primitive": "pipeline.get_primitive", "all_primitives": "hierarchy.get_primitives_as_list", "primitives": "random_choices_without_replacement"}}, "fill_feature_by_particular_method": {"args": ["self", "pipeline", "feature_extraction", "num_pipelines"], "returns": [["new_pipelines"]], "min_max_lineno": {"min_lineno": 499, "max_lineno": 521}, "calls": ["pipeline.get_primitive", "hierarchy.get_primitives_as_list", "new_pipelines.append", "pipeline.get_primitives", "pipeline.new_pipeline_replace", "primitives.append"], "store_vars_calls": {"current_primitive": "pipeline.get_primitive", "all_primitives": "hierarchy.get_primitives_as_list"}}, "find_similar_learner": {"doc": {"short_description": "Fine similar pipelines by replacing the learner component"}, "args": ["self", "pipeline", "include_siblings", "num_pipelines"], "returns": [["similiar_pipelines"]], "min_max_lineno": {"min_lineno": 523, "max_lineno": 553}, "calls": ["pipeline.get_primitive", "hierarchy.get_node_by_primitive", "planner.LevelOnePlanner.policy.get_affinities", "planner.random_choices_without_replacement", "planner.LevelOnePlanner.get_primitive_weight", "planner.LevelOnePlanner.get_primitive_weight", "similiar_pipelines.append", "Exception", "hierarchy.get_node_by_primitive.get_siblings", "node.get_content", "pipeline.get_primitives", "pipeline.new_pipeline_replace"], "store_vars_calls": {"learner": "pipeline.get_primitive", "learner_node": "hierarchy.get_node_by_primitive", "values": "self.policy.get_affinities", "similar_primitives": "random_choices_without_replacement"}}}}}, "functions": {"random_choices": {"doc": {"short_description": "Randomly select a element based on weights. Similar to random.choices in Python 3.6+"}, "args": ["population", "weights"], "min_max_lineno": {"min_lineno": 22, "max_lineno": 32}, "calls": ["numpy.sum", "len", "len", "random.random"], "store_vars_calls": {"total_weight": "np.sum"}}, "random_choices_without_replacement": {"doc": {"short_description": "Randomly sample multiple element based on weights witout replacement."}, "args": ["population", "weights", "k"], "returns": [["result"]], "min_max_lineno": {"min_lineno": 33, "max_lineno": 47}, "calls": ["list", "range", "len", "len", "len", "len", "list", "bisect.bisect", "result.append", "planner.accumulate", "random.random"], "store_vars_calls": {"weights": "list", "k": "len", "cum_weights": "list", "i": "bisect.bisect"}}, "accumulate": {"args": ["iterable", "func"], "min_max_lineno": {"min_lineno": 48, "max_lineno": 58}, "calls": ["iter", "next", "func"], "store_vars_calls": {"it": "iter", "total": "func"}}, "get_d3m_primitives": {"returns": [["ps"]], "min_max_lineno": {"min_lineno": 554, "max_lineno": 561}, "calls": ["dsbox.planner.levelone.primitives.D3mPrimitives"], "store_vars_calls": {"ps": "D3mPrimitives"}}, "pipelines_by_affinity": {"doc": {"short_description": "Generate pipelines using affinity"}, "min_max_lineno": {"min_lineno": 562, "max_lineno": 577}, "calls": ["dsbox.planner.levelone.primitives.DSBoxPrimitives", "planner.AffinityPolicy", "planner.AffinityPolicy.set_symetric_affinity", "planner.AffinityPolicy.set_symetric_affinity", "planner.LevelOnePlanner", "planner.LevelOnePlanner.generate_pipelines_with_policy", "dsbox.planner.levelone.primitives.DSBoxPrimitives.get_by_name", "dsbox.planner.levelone.primitives.DSBoxPrimitives.get_by_name", "dsbox.planner.levelone.primitives.DSBoxPrimitives.get_by_name", "dsbox.planner.levelone.primitives.DSBoxPrimitives.get_by_name", "print"], "store_vars_calls": {"primitives": "DSBoxPrimitives", "policy": "AffinityPolicy", "planner": "LevelOnePlanner", "pipelines": "planner.generate_pipelines_with_policy"}}, "pipelines_by_hierarchy": {"doc": {"short_description": "Generate pipelines using tag hierarhcy"}, "args": ["level"], "returns": [["pipelines"]], "min_max_lineno": {"min_lineno": 578, "max_lineno": 588}, "calls": ["planner.get_d3m_primitives", "planner.AffinityPolicy", "planner.LevelOnePlanner", "planner.LevelOnePlanner.generate_pipelines_with_hierarchy", "print"], "store_vars_calls": {"primitives": "get_d3m_primitives", "policy": "AffinityPolicy", "planner": "LevelOnePlanner", "pipelines": "planner.generate_pipelines_with_hierarchy"}}, "testd3": {"doc": {"short_description": "Test method"}, "min_max_lineno": {"min_lineno": 589, "max_lineno": 597}, "calls": ["planner.get_d3m_primitives", "planner.LevelOnePlanner", "planner.LevelOnePlanner.generate_pipelines", "print"], "store_vars_calls": {"primitives": "get_d3m_primitives", "planner": "LevelOnePlanner", "pipelines": "planner.generate_pipelines"}}, "print_stat": {"doc": {"short_description": "Print statistics of the primitives"}, "min_max_lineno": {"min_lineno": 598, "max_lineno": 614}, "calls": ["planner.get_d3m_primitives", "get_d3m_primitives.get_hierarchies", "print", "get_d3m_primitives.print_statistics", "hierarchies[].pprint"], "store_vars_calls": {"primitives": "get_d3m_primitives", "hierarchies": "primitives.get_hierarchies"}}, "load_primitive_profile": {"doc": {"short_description": "Load primitive profile"}, "returns": [["result"]], "min_max_lineno": {"min_lineno": 615, "max_lineno": 626}, "calls": ["json.loads", "pkgutil.get_data().decode", "print", "pkgutil.get_data", "profile[].split"], "store_vars_calls": {"result": "json.loads"}}, "compute_difference": {"min_max_lineno": {"min_lineno": 627, "max_lineno": 653}, "calls": ["planner.load_primitive_profile", "set", "set", "planner.get_d3m_primitives", "get_d3m_primitives.get_hierarchies", "hierarchies[].get_primitives", "set", "hierarchies[].get_primitives", "set", "print", "pprint.pprint", "print", "pprint.pprint", "print", "pprint.pprint", "print", "pprint.pprint", "set.difference", "set.difference", "set.difference", "set.difference"], "store_vars_calls": {"good": "load_primitive_profile", "classification": "set", "regression": "set", "primitives": "get_d3m_primitives", "hierarchies": "primitives.get_hierarchies", "cp": "hierarchies[].get_primitives", "classification2": "set", "rp": "hierarchies[].get_primitives", "regression2": "set"}}}, "body": {"calls": ["sys.path.append"]}, "is_test": true}