{"file": {"path": "/Users/dakixr/Desktop/github/scc/tmp-data/metadata/KnowledgeCaptureAndDiscoveryANDmintproject/OBA_sparql/obasparql/sparqlconnector.py", "fileNameBase": "sparqlconnector", "extension": "py"}, "dependencies": [{"import": "logging", "type": "external"}, {"from_module": "typing", "import": "Optional", "type": "external"}, {"from_module": "typing", "import": "TYPE_CHECKING", "type": "external"}, {"from_module": "typing", "import": "Tuple", "type": "external"}, {"from_module": "urllib.request", "import": "urlopen", "type": "external"}, {"from_module": "urllib.request", "import": "Request", "type": "external"}, {"from_module": "urllib.parse", "import": "urlencode", "type": "external"}, {"from_module": "urllib.error", "import": "HTTPError", "type": "external"}, {"import": "base64", "type": "external"}, {"from_module": "rdflib", "import": "BNode", "type": "external"}], "classes": {"SPARQLConnectorException": {"extend": ["Exception"], "min_max_lineno": {"min_lineno": 15, "max_lineno": 17}}, "SPARQLConnector": {"doc": {"short_description": "this class deals with nitty gritty details of talking to a SPARQL server", "full": "this class deals with nitty gritty details of talking to a SPARQL server"}, "extend": ["object"], "min_max_lineno": {"min_lineno": 30, "max_lineno": 183}, "methods": {"__init__": {"doc": {"long_description": "Any additional keyword arguments will be passed to to the request, and can be used to setup timesouts etc.", "short_description": "auth, if present, must be a tuple of (username, password) used for Basic Authentication"}, "args": ["self", "query_endpoint", "update_endpoint", "returnFormat", "method", "auth"], "min_max_lineno": {"min_lineno": 35, "max_lineno": 65}, "calls": ["base64.b64encode", "sparqlconnector.SPARQLConnector.kwargs.setdefault", "sparqlconnector.SPARQLConnector.kwargs[].update", "type", "sparqlconnector.SPARQLConnectorException", "len", "sparqlconnector.SPARQLConnectorException", "bytes", "base64.b64encode.decode"], "store_vars_calls": {"base64string": "base64.b64encode"}}, "method": {"args": ["self", "method"], "min_max_lineno": {"min_lineno": 70, "max_lineno": 77}, "calls": ["sparqlconnector.SPARQLConnectorException"]}, "query": {"args": ["self", "query", "default_graph", "named_graph"], "min_max_lineno": {"min_lineno": 78, "max_lineno": 138}, "calls": ["dict", "dict.setdefault", "dict.setdefault", "args[].update", "urllib.request.urlopen.read", "sparqlconnector.SPARQLConnectorException", "args[].update", "type", "urllib.parse.urlencode", "urllib.request.urlopen", "args[].update", "urllib.request.Request", "ValueError", "urllib.parse.urlencode", "urllib.request.urlopen", "args[].update", "sparqlconnector.SPARQLConnectorException", "urllib.request.Request", "urllib.request.urlopen", "str", "urllib.request.Request", "query.encode", "str", "urllib.parse.urlencode().encode", "urllib.parse.urlencode"], "store_vars_calls": {"args": "dict", "res": "urlopen"}}, "update": {"doc": {"short_description": "Method to send a SPARQL update query to the endpoint.", "args": {"query": {"description": "the query to send to the endpoint", "type_name": "str", "is_optional": false}, "default_graph": {"description": "The default named graph. Defaults to None.", "type_name": "Optional[str]", "is_optional": true, "default": "None"}, "named_graph": {"description": "The named graph. Defaults to None.", "type_name": "Optional[str]", "is_optional": true, "default": "None"}}, "raises": {"0": {"description": "Connection error", "type_name": "SPARQLConnectorException"}}}, "args": ["self", "query", "default_graph", "named_graph"], "min_max_lineno": {"min_lineno": 139, "max_lineno": 183}, "calls": ["dict", "dict.setdefault", "args[].update", "dict.setdefault", "args[].update", "urllib.request.urlopen", "sparqlconnector.SPARQLConnectorException", "urllib.parse.urlencode", "urllib.request.Request", "query.encode"], "store_vars_calls": {"args": "dict", "res": "urlopen"}}}}}, "body": {"calls": ["logging.getLogger"], "store_vars_calls": {"log": "logging.getLogger"}}, "is_test": false}