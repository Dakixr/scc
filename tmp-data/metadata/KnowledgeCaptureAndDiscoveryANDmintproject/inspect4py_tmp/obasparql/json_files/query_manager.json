{"file": {"path": "/Users/dakixr/Desktop/github/scc/tmp-data/metadata/KnowledgeCaptureAndDiscoveryANDmintproject/OBA_sparql/obasparql/query_manager.py", "fileNameBase": "query_manager", "extension": "py"}, "dependencies": [{"import": "json", "type": "external"}, {"import": "logging", "type": "external"}, {"import": "os", "type": "external"}, {"from_module": "pathlib", "import": "Path", "type": "external"}, {"from_module": "typing", "import": "Dict", "type": "external"}, {"from_module": "typing", "import": "Tuple", "type": "external"}, {"import": "validators", "type": "external"}, {"from_module": "pyld", "import": "jsonld", "type": "external"}, {"from_module": "rdflib", "import": "Graph", "type": "external"}, {"from_module": "obasparql.sparqlconnector", "import": "SPARQLConnector", "type": "external"}, {"from_module": "obasparql", "import": "gquery", "type": "external"}, {"from_module": "obasparql.utils", "import": "generate_new_id", "type": "external"}, {"from_module": "obasparql.utils", "import": "primitives", "type": "external"}, {"from_module": "obasparql.utils", "import": "convert_snake", "type": "external"}], "classes": {"QueryManager": {"doc": {"short_description": "Class to handle queries", "full": "Class to handle queries\n    "}, "min_max_lineno": {"min_lineno": 34, "max_lineno": 785}, "methods": {"__init__": {"doc": {"short_description": "Constructor of the QueryManager class", "args": {"endpoint": {"description": "the endpoint server", "type_name": "str", "is_optional": false}, "named_graph_base": {"description": "the prefix or base of the name graphs", "type_name": "str", "is_optional": false}, "uri_prefix": {"description": "prefix for the URIs of new resource", "type_name": "str", "is_optional": false}, "queries_dir": {"description": "the directory where the queries are stored", "type_name": "str", "is_optional": false}, "context_dir": {"description": "the directory where the context are", "type_name": "str", "is_optional": false}, "endpoint_username": {"description": "the username to access the endpoint. Defaults to None.", "type_name": "str", "is_optional": true, "default": "None"}, "endpoint_password": {"description": "[description]. Defaults to None.", "type_name": "[type]", "is_optional": true, "default": "None"}}, "returns": {"description": "[description]", "type_name": "[type]", "is_generator": false}, "raises": {"0": {"description": "[description]", "type_name": "e"}, "1": {"description": "[description]", "type_name": "e"}, "2": {"description": "[description]", "type_name": "e"}}}, "args": ["self", "endpoint", "named_graph_base", "uri_prefix", "queries_dir", "context_dir", "endpoint_username", "endpoint_password"], "min_max_lineno": {"min_lineno": 38, "max_lineno": 123}, "calls": ["obasparql.sparqlconnector.SPARQLConnector", "pathlib.Path", "pathlib.Path", "query_manager.QueryManager.read_template", "setattr", "os.listdir", "query_manager.QueryManager.items", "query_manager.remove_jsonld_key", "query_manager.remove_jsonld_key", "temp_context.copy", "query_manager.QueryManager.convert_snake_dict", "tmp_context_class.copy", "query_manager.QueryManager.read_template", "setattr", "query_manager.QueryManager.items", "glogger.debug", "glogger.debug", "getattr", "json.loads", "json.loads", "logging.error", "exit", "json.loads", "query_manager.QueryManager.read_context", "query_manager.QueryManager.read_context", "query_manager.QueryManager.read_context"], "store_vars_calls": {"self.sparql": "SPARQLConnector", "queries_dir": "Path", "context_dir": "Path", "queries": "self.read_template", "self.context": "temp_context.copy", "self.class_context": "tmp_context_class.copy", "k": "getattr"}}, "get_resource": {"doc": {"short_description": "Handle the GET Requests", "args": {"kwargs": {"is_optional": false}}}, "args": ["self"], "min_max_lineno": {"min_lineno": 124, "max_lineno": 148}, "calls": ["query_manager.QueryManager.get_resource_custom", "query_manager.QueryManager.get_resource_not_custom"]}, "get_resource_custom": {"doc": {"short_description": "Prepare request for custom queries", "args": {"request_args": {"description": "contains the values to replaced in the query"}}, "returns": {"is_generator": false}}, "args": ["self", "request_args"], "min_max_lineno": {"min_lineno": 149, "max_lineno": 167}, "calls": ["query_manager.QueryManager.get_one_resource", "query_manager.QueryManager.get_all_resource"]}, "get_resource_not_custom": {"doc": {"short_description": "Prepare request for not-custom queries", "args": {"request_args": {"description": "contains the values to replaced in the query"}}, "returns": {"is_generator": false}}, "args": ["self", "request_args"], "min_max_lineno": {"min_lineno": 168, "max_lineno": 198}, "calls": ["query_manager.QueryManager.get_one_resource", "query_manager.QueryManager.get_one_resource", "query_manager.QueryManager.get_all_resource", "query_manager.QueryManager.get_all_resource"]}, "get_one_resource": {"doc": {"short_description": "Handles a GET method to get one resource", "args": {"query_type": {"description": "QUERY_TYPE_GET_ONE or QUERY_TYPE_GET_ONE_USER"}}, "returns": {"is_generator": false}}, "args": ["self", "request_args", "query_type"], "min_max_lineno": {"min_lineno": 199, "max_lineno": 219}, "calls": ["query_manager.QueryManager.parse_request_arguments", "query_manager.QueryManager.build_instance_uri", "query_manager.QueryManager.generate_graph", "query_manager.QueryManager.request_one"]}, "get_all_resource": {"doc": {"short_description": "Handles a GET method to get all resource by rdf_type", "args": {"request_args": {"description": "contains the values of the variables of the SPARQL query.\nSee SPARQL_QUERY_TYPE_VARIABLE and SPARQL_GRAPH_TYPE_VARIABLE"}, "query_type": {"description": "QUERY_TYPE_GET_ALL or QUERY_TYPE_GET_ALL_USER"}}, "returns": {"is_generator": false}}, "args": ["self", "request_args", "query_type"], "min_max_lineno": {"min_lineno": 220, "max_lineno": 238}, "calls": ["query_manager.QueryManager.parse_request_arguments", "query_manager.QueryManager.generate_graph", "query_manager.QueryManager.request_all"]}, "request_one": {"doc": {"short_description": "Implements the request for one resource", "args": {"owl_class_name": {"description": "The name of the class", "type_name": "str", "is_optional": false}, "request_args": {"description": "Contains the values of the variables of the SPARQL query.", "type_name": "dict", "is_optional": false}, "resource_type_uri": {"description": "The uri of the class", "type_name": "str", "is_optional": false}, "query_type": {"description": "Indicates the type of query", "type_name": "str", "is_optional": false}, "skip_id_framing": {"description": "Request must be False Defaults to False.", "type_name": "bool", "is_optional": true}}, "returns": {"description": "The response of the request as JSON format", "type_name": "dict", "is_generator": false}}, "args": ["self", "owl_class_name", "request_args", "resource_type_uri", "query_type", "skip_id_framing"], "min_max_lineno": {"min_lineno": 240, "max_lineno": 267}, "calls": ["query_manager.QueryManager.obtain_query", "logger.error"]}, "request_all": {"doc": {"short_description": "Implements the request for resources", "args": {"owl_class_name": {"description": "The name of the class", "type_name": "str", "is_optional": false}, "request_args": {"description": "Contains the values of the variables of the SPARQL query.", "type_name": "dict", "is_optional": false}, "resource_type_uri": {"description": "The uri of the class", "type_name": "str", "is_optional": false}, "query_type": {"description": "Indicates the query type. Defaults to \"get_all_user\".", "type_name": "str", "is_optional": true, "default": "\"get_all_user\""}}, "returns": {"description": "[description]", "type_name": "[type]", "is_generator": false}}, "args": ["self", "owl_class_name", "request_args", "resource_type_uri", "query_type"], "min_max_lineno": {"min_lineno": 269, "max_lineno": 293}, "calls": ["query_manager.QueryManager.obtain_query", "logger.error"]}, "put_resource": {"doc": {"short_description": "Handle a PUT method to update a resource", "returns": {"description": "The response of the request as JSON format", "type_name": "dict", "is_generator": false}}, "args": ["self"], "returns": [["body"]], "min_max_lineno": {"min_lineno": 294, "max_lineno": 338}, "calls": ["query_manager.QueryManager.build_instance_uri", "query_manager.QueryManager.json_to_jsonld", "query_manager.QueryManager.get_insert_query", "query_manager.QueryManager.insert_query", "query_manager.QueryManager.generate_graph", "query_manager.QueryManager.delete_query", "query_manager.QueryManager.generate_graph", "logger.error", "logger.error"], "store_vars_calls": {"resource_uri": "self.build_instance_uri", "body_json": "self.json_to_jsonld"}}, "delete_resource": {"doc": {"short_description": "Handle a DELETE method to delete a resource", "args": {"id": {"description": "the resource id", "type_name": "str", "is_optional": false}, "user": {"description": "the user who is deleting the resource", "type_name": "str", "is_optional": false}, "rdf_type_uri": {"description": "The rdf type uri of the resource. Defaults to None.", "type_name": "str", "is_optional": true, "default": "None"}, "rdf_type_name": {"description": "The class name of the resource. Defaults to None.", "type_name": "str", "is_optional": true, "default": "None"}, "kls": {"description": "TODO: I don't remember. Defaults to None.", "type_name": "str", "is_optional": true, "default": "None"}}, "returns": {"description": "The response of the request as JSON format", "type_name": "dict", "is_generator": false}}, "args": ["self", "id", "user", "rdf_type_uri", "rdf_type_name", "kls"], "min_max_lineno": {"min_lineno": 339, "max_lineno": 364}, "calls": ["query_manager.QueryManager.build_instance_uri", "query_manager.QueryManager.delete_query", "query_manager.QueryManager.generate_graph"], "store_vars_calls": {"resource_uri": "self.build_instance_uri"}}, "post_resource": {"doc": {"short_description": "Post a resource and generate the id", "args": {"username": {"description": "named graph where to do the insert"}, "body": {"description": "JSON to insert"}, "rdf_type_uri": {"description": "RDF Class where to insert the target instance described in body."}}}, "args": ["self", "user", "body", "rdf_type_uri", "rdf_type_name", "kls"], "returns": [["body"]], "min_max_lineno": {"min_lineno": 365, "max_lineno": 390}, "calls": ["obasparql.utils.generate_new_id", "query_manager.QueryManager.traverse_obj", "query_manager.QueryManager.insert_all_resources", "body.type.append"], "store_vars_calls": {"body.id": "generate_new_id", "insert_response": "self.insert_all_resources"}}, "obtain_query": {"doc": {"short_description": "Generate the query, dispatch it to the SPARQL endpoint, frame it and return the response", "args": {"query_directory": {"description": "The directory where the query template is located", "type_name": "str", "is_optional": false}, "owl_class_uri": {"description": "The uri of the class ", "type_name": "str", "is_optional": false}, "query_type": {"description": "The type of query", "type_name": "str", "is_optional": false}, "request_args": {"description": "The arguments of the query. Defaults to None.", "type_name": "str", "is_optional": true, "default": "None"}, "skip_id_framing": {"description": "Indicates if the id framing must be skipped. Defaults to False.", "type_name": "bool", "is_optional": true, "default": "False"}}, "returns": {"description": "[description]", "type_name": "[type]", "is_generator": false}, "raises": {"0": {"description": "[description]", "type_name": "e"}}}, "args": ["self", "query_directory", "owl_class_uri", "query_type", "request_args", "skip_id_framing"], "min_max_lineno": {"min_lineno": 393, "max_lineno": 429}, "calls": ["logger.debug", "query_manager.QueryManager.frame_results", "getattr", "query_manager.QueryManager.dispatch_sparql_query", "query_manager.QueryManager.frame_results"], "store_vars_calls": {"result": "self.dispatch_sparql_query"}}, "overwrite_endpoint_context": {"doc": {"short_description": "Overwrite the endpoint context", "args": {"endpoint_context": {"description": "The endpoint context to be overwrite", "type_name": "dict", "is_optional": false}}}, "args": ["self", "endpoint_context"], "min_max_lineno": {"min_lineno": 430, "max_lineno": 439}, "calls": ["query_manager.QueryManager.context_overwrite.items"]}, "frame_results": {"doc": {"short_description": "Frame the results of the query", "args": {"response": {"description": "The response from the endpoint. The format is JSON-LD", "type_name": "str", "is_optional": false}, "owl_class_uri": {"description": "The uri of the class", "type_name": "str", "is_optional": false}, "owl_resource_iri": {"description": "The resource uri. Defaults to None.", "type_name": "str", "is_optional": true, "default": "None"}}, "returns": {"description": "[description]", "type_name": "[type]", "is_generator": false}}, "args": ["self", "response", "owl_class_uri", "owl_resource_iri"], "returns": [["framed"]], "min_max_lineno": {"min_lineno": 440, "max_lineno": 508}, "calls": ["frame[].keys", "query_manager.QueryManager.overwrite_endpoint_context", "pyld.jsonld.frame", "json.loads", "len", "isinstance", "glogger.error"], "store_vars_calls": {"framed": "jsonld.frame", "response_dict": "json.loads"}}, "traverse_obj": {"doc": {"short_description": "Utils method to insert nested resources", "args": {"body": {"type_name": "JSON with the resource (and nested resources) to insert", "is_optional": false}, "username": {"type_name": "named graph where to insert the resource", "is_optional": false}}}, "args": ["self", "body", "username"], "min_max_lineno": {"min_lineno": 511, "max_lineno": 540}, "calls": ["body.__dict__.items", "isinstance", "isinstance", "query_manager.QueryManager.get_all_complex_objects", "isinstance", "isinstance", "len", "query_manager.QueryManager.traverse_obj", "obasparql.utils.generate_new_id", "query_manager.QueryManager.insert_all_resources"], "store_vars_calls": {"list_of_obj": "self.get_all_complex_objects", "inner_values.id": "generate_new_id"}}, "get_all_complex_objects": {"doc": {"long_description": "A complex object is an object that has an id and a type", "short_description": "Get all the complex objects in a dictionary (recursive)", "args": {"body": {"description": "The dictionary to be traversed", "type_name": "dict", "is_optional": false}}, "returns": {"description": "a list of complex objects", "type_name": "list", "is_generator": false}}, "args": ["self", "body"], "returns": [["l"]], "min_max_lineno": {"min_lineno": 541, "max_lineno": 563}, "calls": ["body.__dict__.items", "isinstance", "isinstance", "l.append", "isinstance", "isinstance"]}, "json_to_jsonld": {"doc": {"short_description": "Convert a JSON to JSON-LD (recursive). Used by POST and PUT", "args": {"resource": {"description": "The resource to be converted", "type_name": "dict", "is_optional": false}}, "returns": {"description": "The resource in JSON-LD", "type_name": "dict", "is_generator": false}}, "args": ["self", "resource"], "returns": [["resource_json"]], "min_max_lineno": {"min_lineno": 564, "max_lineno": 578}, "calls": ["resource.to_dict", "query_manager.QueryManager.build_instance_uri", "json.dumps"], "store_vars_calls": {"resource_dict": "resource.to_dict", "resource_json": "json.dumps"}}, "insert_query": {"doc": {"short_description": "Generate the insert query", "args": {"request_args": {"description": "The request arguments (from the request)", "type_name": "dict", "is_optional": false}}, "returns": {"description": "True if the query was generated successfully, False otherwise", "type_name": "bool", "is_generator": false}}, "args": ["self", "request_args"], "min_max_lineno": {"min_lineno": 579, "max_lineno": 598}, "calls": ["query_manager.QueryManager.sparql.update", "glogger.error"]}, "delete_query": {"doc": {"short_description": "Delete a resource", "args": {"request_args": {"description": "The request arguments (from the request)", "type_name": "str", "is_optional": false}}, "returns": {"description": "A tuple (message, http_code, response)", "type_name": "[type]", "is_generator": false}}, "args": ["self", "request_args"], "min_max_lineno": {"min_lineno": 599, "max_lineno": 632}, "calls": ["glogger.info", "glogger.debug", "query_manager.QueryManager.sparql.update", "glogger.error", "glogger.info", "glogger.debug", "query_manager.QueryManager.sparql.update", "glogger.error"]}, "get_insert_query": {"doc": {"short_description": "Convert the JSON-LD to triple to be inserted"}, "args": ["self", "resource_json"], "returns": [["prefixes", "triples"]], "min_max_lineno": {"min_lineno": 633, "max_lineno": 648}, "calls": ["rdflib.Graph().parse", "rdflib.Graph().parse.serialize", "rdflib.Graph().parse.namespace_manager.namespaces", "Graph().parse.serialize.split", "prefixes.append", "rdflib.Graph", "line.startswith", "triples.append"], "store_vars_calls": {"g": "Graph().parse", "s": "g.serialize"}}, "convert_snake_dict": {"doc": {"long_description": "This method generates the context used on the JSON-LD operations", "short_description": "The Python server generated by OBA uses snake_case format for the JSON key.", "args": {"temp_context": {"type_name": "Temporal dictionary with the JSON-LD context", "is_optional": false}}}, "args": ["self", "temp_context"], "min_max_lineno": {"min_lineno": 650, "max_lineno": 668}, "calls": ["temp_context.items", "obasparql.utils.convert_snake"], "store_vars_calls": {"key_snake": "convert_snake"}}, "generate_graph": {"doc": {"short_description": "Generate the graph URI", "args": {"username": {"description": "The username", "type_name": "str", "is_optional": false}}, "returns": {"description": "The graph URI", "type_name": "str", "is_generator": false}}, "args": ["self", "username"], "min_max_lineno": {"min_lineno": 670, "max_lineno": 680}}, "build_instance_uri": {"doc": {"short_description": "Create the instance URI from the id and the URI prefix", "args": {"_id": {"description": "id of the resource", "type_name": "str", "is_optional": false}}, "returns": {"description": "The instance URI", "type_name": "str", "is_generator": false}}, "args": ["self", "_id"], "returns": [["_id"]], "min_max_lineno": {"min_lineno": 681, "max_lineno": 693}, "calls": ["validators.url"]}, "read_context": {"doc": {"short_description": "Read the context file", "args": {"context_file": {"description": "Absolute path of the file"}}, "returns": {"description": "Contents of the file", "is_generator": false}}, "args": ["context_file"], "min_max_lineno": {"min_lineno": 694, "max_lineno": 709}, "calls": ["open", "reader.read", "logging.error"]}, "read_template": {"args": ["owl_class_dir"], "returns": [["queries"]], "min_max_lineno": {"min_lineno": 710, "max_lineno": 720}, "calls": ["os.listdir", "os.path.splitext", "open", "reader.read"]}, "insert_all_resources": {"args": ["self", "body", "username"], "returns": [["insert_response"]], "min_max_lineno": {"min_lineno": 721, "max_lineno": 733}, "calls": ["query_manager.QueryManager.json_to_jsonld", "query_manager.QueryManager.get_insert_query", "query_manager.QueryManager.insert_query", "query_manager.QueryManager.generate_graph"], "store_vars_calls": {"body_json": "self.json_to_jsonld", "insert_response": "self.insert_query"}}, "parse_request_arguments": {"doc": {"short_description": "Parse the request arguments into variables", "returns": {"description": "[description]", "type_name": "Tuple[str, str, str]", "is_generator": false}}, "returns": [["owl_class_name", "resource_type_uri", "username"]], "min_max_lineno": {"min_lineno": 734, "max_lineno": 748}}, "dispatch_sparql_query": {"doc": {"short_description": "Replace the variables in the query with the request arguments and send it", "args": {"raw_sparql_query": {"description": "the raw query", "type_name": "str", "is_optional": false}, "request_args": {"description": "the request arguments to be replaced", "type_name": "str", "is_optional": false}}, "returns": {"description": "JSON-LD response", "type_name": "dict", "is_generator": false}, "raises": {"0": {"description": "[description]", "type_name": "e"}}}, "args": ["self", "raw_sparql_query", "request_args"], "min_max_lineno": {"min_lineno": 749, "max_lineno": 785}, "calls": ["obasparql.gquery.get_metadata", "logger.info", "query_manager.QueryManager.sparql.query", "obasparql.gquery.rewrite_query.replace", "obasparql.gquery.rewrite_query.replace", "obasparql.gquery.rewrite_query", "logger.error", "logger.error"], "store_vars_calls": {"query_metadata": "gquery.get_metadata", "rewritten_query": "gquery.rewrite_query"}}}}}, "functions": {"remove_jsonld_key": {"doc": {"short_description": "Remove json key from context", "args": {"tmp_context_class": {"description": "the dict to remove the key from", "type_name": "dict", "is_optional": false}, "key": {"description": "the key to remove", "type_name": "str", "is_optional": false}}}, "args": ["tmp_context_class", "key"], "min_max_lineno": {"min_lineno": 21, "max_lineno": 32}, "calls": ["tmp_context_class.pop", "logging.debug"]}, "merge": {"args": ["dict1", "dict2"], "returns": [["res"]], "min_max_lineno": {"min_lineno": 787, "max_lineno": 790}}}, "body": {"calls": ["logging.getLogger", "logging.getLogger"], "store_vars_calls": {"glogger": "logging.getLogger", "logger": "logging.getLogger"}}, "is_test": false}