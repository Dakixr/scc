{"file": {"path": "/Users/dakixr/Desktop/github/scc/tmp-data/metadata/KnowledgeCaptureAndDiscoveryANDmintproject/OBA_sparql/obasparql/gquery.py", "fileNameBase": "gquery", "extension": "py"}, "dependencies": [{"import": "json", "type": "external"}, {"from_module": "yaml", "import": "load", "type": "external"}, {"from_module": "yaml", "import": "dump", "type": "external"}, {"from_module": "yaml", "import": "parser", "type": "external"}, {"from_module": "yaml", "import": "scanner", "type": "external"}, {"from_module": "rdflib.plugins.sparql.parser", "import": "Query", "type": "external"}, {"from_module": "rdflib.plugins.sparql.parser", "import": "UpdateUnit", "type": "external"}, {"from_module": "rdflib.plugins.sparql.processor", "import": "translateQuery", "type": "external"}, {"from_module": "pyparsing", "import": "ParseException", "type": "external"}, {"import": "logging", "type": "external"}, {"from_module": "pprint", "import": "pformat", "type": "external"}, {"import": "traceback", "type": "external"}, {"import": "re", "type": "external"}, {"import": "requests", "type": "external"}, {"from_module": "obasparql", "import": "static", "type": "external"}], "functions": {"_getDictWithKey": {"doc": {"short_description": "Returns the first dictionary in dict_list which contains the given key"}, "args": ["key", "dict_list"], "returns": [["d"]], "min_max_lineno": {"min_lineno": 31, "max_lineno": 37}}, "get_parameters": {"doc": {"long_description": "?__name The parameter name is optional.\n?_name_iri The variable is substituted with the parameter value as a IRI (also: number or literal).\n?_name_en The parameter value is considered as literal with the language 'en' (e.g., en,it,es, etc.).\n?_name_integer The parameter value is considered as literal and the XSD datatype 'integer' is added during substitution.\n?_name_prefix_datatype The parameter value is considered as literal and the datatype 'prefix:datatype' is added during substitution. The prefix must be specified according to the SPARQL syntax.", "short_description": "?_name The variable specifies the API mandatory parameter name. The value is incorporated in the query as plain literal."}, "args": ["rq", "variables", "endpoint", "query_metadata", "auth"], "returns": [["parameters"]], "min_max_lineno": {"min_lineno": 39, "max_lineno": 112}, "calls": ["re.compile", "re.compile", "re.compile.match", "re.compile.match", "variable_matcher.match.group", "gquery.get_enumeration", "gquery.get_defaults", "variable_matcher.match.group", "variable_matcher.match.group", "glogger.info", "sorted", "variable_matcher.match.group", "len"], "store_vars_calls": {"internal_matcher": "re.compile", "variable_matcher": "re.compile", "match": "variable_matcher.match", "vname": "match.group", "vcodes": "get_enumeration", "vdefault": "get_defaults", "mtype": "match.group", "muserdefined": "match.group"}}, "get_defaults": {"doc": {"short_description": "Returns the default value for a parameter or None"}, "args": ["rq", "v", "metadata"], "min_max_lineno": {"min_lineno": 114, "max_lineno": 125}, "calls": ["glogger.debug", "gquery._getDictWithKey"], "store_vars_calls": {"defaultsDict": "_getDictWithKey"}}, "get_enumeration": {"doc": {"short_description": "Returns a list of enumerated values for variable 'v' in query 'rq'"}, "args": ["rq", "v", "endpoint", "metadata", "auth"], "min_max_lineno": {"min_lineno": 127, "max_lineno": 141}, "calls": ["gquery._getDictWithKey", "gquery.get_enumeration_sparql"], "store_vars_calls": {"enumDict": "_getDictWithKey"}}, "get_enumeration_sparql": {"doc": {"short_description": "Returns a list of enumerated values for variable 'v' in query 'rq'"}, "args": ["rq", "v", "endpoint", "auth"], "returns": [["vcodes"]], "min_max_lineno": {"min_lineno": 143, "max_lineno": 183}, "calls": ["glogger.info", "re.compile", "glogger.debug", "re.compile.match", "tpattern_matcher.match.group", "tpattern_matcher.match.group", "glogger.debug", "glogger.debug", "glogger.debug", "glogger.debug", "glogger.debug", "requests.get().json", "glogger.debug", "re.sub", "re.sub", "vcodes.append", "requests.get", "list", "code.values"], "store_vars_calls": {"tpattern_matcher": "re.compile", "tp_match": "tpattern_matcher.match", "vtpattern": "tp_match.group", "gnames": "tp_match.group", "codes_json": "requests.get().json", "codes_subquery": "re.sub"}}, "get_yaml_decorators": {"doc": {"short_description": "Returns the yaml decorator metadata only (this is needed by triple pattern fragments)"}, "args": ["rq"], "returns": [["query_metadata"]], "min_max_lineno": {"min_lineno": 185, "max_lineno": 220}, "calls": ["isinstance", "type", "type", "row.lstrip", "yaml.load", "rq.split", "row.startswith", "rq.split", "row.startswith", "json.loads", "glogger.warning"], "store_vars_calls": {"query_metadata": "json.loads"}}, "enable_custom_function_prefix": {"args": ["rq", "prefix"], "returns": [["rq"]], "min_max_lineno": {"min_lineno": 222, "max_lineno": 226}}, "get_metadata": {"doc": {"long_description": "'exp' is one of: 'endpoint', 'tags', 'summary', 'request', 'pagination', 'enumerate'", "short_description": "Returns the metadata 'exp' parsed from the raw query file 'rq'"}, "args": ["rq", "endpoint"], "returns": [["query_metadata"]], "min_max_lineno": {"min_lineno": 228, "max_lineno": 297}, "calls": ["gquery.get_yaml_decorators", "isinstance", "gquery.enable_custom_function_prefix", "gquery.enable_custom_function_prefix", "glogger.debug", "glogger.debug", "glogger.debug", "rdflib.plugins.sparql.processor.translateQuery", "pprint.pformat", "rdflib.plugins.sparql.parser.Query.parseString", "gquery.get_parameters", "glogger.warning", "glogger.warning", "gquery.get_parameters", "glogger.warning", "glogger.info", "rdflib.plugins.sparql.parser.UpdateUnit.parseString", "glogger.info", "glogger.info", "glogger.error", "glogger.error", "glogger.error", "traceback.print_exc"], "store_vars_calls": {"query_metadata": "get_yaml_decorators", "rq": "enable_custom_function_prefix", "parsed_query": "UpdateUnit.parseString"}}, "rewrite_query": {"args": ["query", "parameters", "get_args"], "returns": [["query"]], "min_max_lineno": {"min_lineno": 299, "max_lineno": 364}, "calls": ["glogger.debug", "glogger.debug", "parameters.items", "set", "set", "glogger.debug", "set.issubset", "list", "isinstance", "glogger.debug", "required_params.keys", "get_args.keys", "parameters.items", "get_args.get", "isinstance", "query.replace.replace", "query.replace.replace", "isinstance", "query.replace.replace", "values[].append", "query.replace.replace", "query.replace.replace", "query.replace.replace", "query.replace.replace"], "store_vars_calls": {"requiredParams": "set", "providedParams": "set", "v": "get_args.get", "query": "query.replace"}}}, "body": {"calls": ["logging.getLogger"], "store_vars_calls": {"glogger": "logging.getLogger"}}, "is_test": true}