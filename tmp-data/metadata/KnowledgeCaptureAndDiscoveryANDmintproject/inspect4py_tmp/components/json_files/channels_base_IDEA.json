{"file": {"path": "/Users/dakixr/Desktop/github/scc/tmp-data/metadata/KnowledgeCaptureAndDiscoveryANDmintproject/topoflow36/topoflow/components/channels_base_IDEA.py", "fileNameBase": "channels_base_IDEA", "extension": "py", "doc": {"long_description": "as functions used by most or all channel flow methods.  That is, all\nchannel flow components inherit methods from this class.  The methods\nof this class should be over-ridden as necessary (especially the\nupdate_velocity() method) for different methods of modeling channel\nflow.  This class, in turn, inherits from the \"BMI base class\" in\nBMI_base.py.\n\nSee channels_kinematic_wav.py, channels_diffusive_wave.py, and\nchannels_dynamic_wave.py.  Each of these has a MANNING or LAW_OF_WALL\nflag in their CFG file.", "short_description": "This file defines a \"base class\" for channel flow components as well", "full": "This file defines a \"base class\" for channel flow components as well\nas functions used by most or all channel flow methods.  That is, all\nchannel flow components inherit methods from this class.  The methods\nof this class should be over-ridden as necessary (especially the\nupdate_velocity() method) for different methods of modeling channel\nflow.  This class, in turn, inherits from the \"BMI base class\" in\nBMI_base.py.\n\nSee channels_kinematic_wav.py, channels_diffusive_wave.py, and\nchannels_dynamic_wave.py.  Each of these has a MANNING or LAW_OF_WALL\nflag in their CFG file."}}, "dependencies": [{"import": "numpy", "alias": "np", "type": "external"}, {"import": "os", "type": "external"}, {"import": "os", "type": "external"}, {"import": "copy", "type": "external"}, {"from_module": "topoflow.utils", "import": "BMI_base", "type": "external"}, {"from_module": "topoflow.utils", "import": "file_utils", "type": "external"}, {"from_module": "topoflow.utils", "import": "model_input", "type": "external"}, {"from_module": "topoflow.utils", "import": "model_output", "type": "external"}, {"from_module": "topoflow.utils", "import": "ncgs_files", "type": "external"}, {"from_module": "topoflow.utils", "import": "ncts_files", "type": "external"}, {"from_module": "topoflow.utils", "import": "rtg_files", "type": "external"}, {"from_module": "topoflow.utils", "import": "text_ts_files", "type": "external"}, {"from_module": "topoflow.utils", "import": "tf_utils", "type": "external"}, {"from_module": "topoflow.components", "import": "d8_global", "alias": "d8_base", "type": "external"}], "classes": {"channels_component": {"extend": ["BMI_base.BMI_component"], "min_max_lineno": {"min_lineno": 174, "max_lineno": 3722}, "methods": {"get_input_var_names": {"args": ["self"], "min_max_lineno": {"min_lineno": 458, "max_lineno": 465}}, "get_output_var_names": {"args": ["self"], "min_max_lineno": {"min_lineno": 468, "max_lineno": 471}}, "get_config_var_names": {"args": ["self"], "min_max_lineno": {"min_lineno": 474, "max_lineno": 478}}, "get_var_name": {"args": ["self", "long_var_name"], "min_max_lineno": {"min_lineno": 481, "max_lineno": 484}}, "get_var_units": {"args": ["self", "long_var_name"], "min_max_lineno": {"min_lineno": 487, "max_lineno": 490}}, "set_constants": {"args": ["self"], "min_max_lineno": {"min_lineno": 503, "max_lineno": 516}, "calls": ["numpy.float64", "numpy.float64", "numpy.float64", "numpy.sqrt", "numpy.float64", "numpy.float64"], "store_vars_calls": {"self.g": "np.float64", "self.aval": "np.float64", "self.kappa": "np.float64"}}, "set_missing_cfg_options": {"args": ["self"], "min_max_lineno": {"min_lineno": 519, "max_lineno": 550}, "calls": ["hasattr", "hasattr", "hasattr"]}, "initialize": {"args": ["self", "cfg_file", "mode", "SILENT"], "min_max_lineno": {"min_lineno": 553, "max_lineno": 699}, "calls": ["channels_base_IDEA.channels_component.set_constants", "channels_base_IDEA.channels_component.initialize_config_vars", "channels_base_IDEA.channels_component.set_missing_cfg_options", "channels_base_IDEA.channels_component.initialize_basin_vars", "channels_base_IDEA.channels_component.initialize_time_vars", "channels_base_IDEA.channels_component.initialize_d8_vars", "channels_base_IDEA.channels_component.open_input_files", "channels_base_IDEA.channels_component.read_input_files", "channels_base_IDEA.channels_component.set_computed_input_vars", "channels_base_IDEA.channels_component.initialize_computed_vars", "channels_base_IDEA.channels_component.open_output_files", "print", "print", "channels_base_IDEA.channels_component.disable_all_output", "channels_base_IDEA.channels_component.slope_type.lower", "channels_base_IDEA.channels_component.initialize_var", "channels_base_IDEA.channels_component.width_type.lower", "channels_base_IDEA.channels_component.initialize_var", "channels_base_IDEA.channels_component.angle_type.lower", "channels_base_IDEA.channels_component.initialize_var", "channels_base_IDEA.channels_component.sinu_type.lower", "channels_base_IDEA.channels_component.initialize_var", "channels_base_IDEA.channels_component.d0_type.lower", "channels_base_IDEA.channels_component.initialize_var", "channels_base_IDEA.channels_component.d_bankfull_type.lower", "channels_base_IDEA.channels_component.initialize_var", "print", "print", "print", "print", "print", "channels_base_IDEA.channels_component.nval_type.lower", "channels_base_IDEA.channels_component.initialize_var", "channels_base_IDEA.channels_component.z0val_type.lower", "channels_base_IDEA.channels_component.initialize_var"], "store_vars_calls": {"self.slope": "self.initialize_var", "self.width": "self.initialize_var", "self.angle": "self.initialize_var", "self.sinu": "self.initialize_var", "self.d0": "self.initialize_var", "self.d_bankfull": "self.initialize_var", "self.nval": "self.initialize_var", "self.z0val": "self.initialize_var"}}, "update": {"args": ["self", "dt"], "min_max_lineno": {"min_lineno": 702, "max_lineno": 845}, "calls": ["channels_base_IDEA.channels_component.update_R", "channels_base_IDEA.channels_component.update_R_integral", "channels_base_IDEA.channels_component.update_discharge", "channels_base_IDEA.channels_component.update_diversions", "channels_base_IDEA.channels_component.update_flow_volume", "channels_base_IDEA.channels_component.update_flow_depth", "channels_base_IDEA.channels_component.update_shear_stress", "channels_base_IDEA.channels_component.update_shear_speed", "channels_base_IDEA.channels_component.update_friction_factor", "channels_base_IDEA.channels_component.update_velocity", "channels_base_IDEA.channels_component.update_velocity_on_edges", "channels_base_IDEA.channels_component.update_froude_number", "channels_base_IDEA.channels_component.update_outlet_values", "channels_base_IDEA.channels_component.update_peak_values", "channels_base_IDEA.channels_component.update_Q_out_integral", "channels_base_IDEA.channels_component.write_output_files", "channels_base_IDEA.channels_component.update_time", "channels_base_IDEA.channels_component.print_time_and_value", "channels_base_IDEA.channels_component.update_flood_d8_vars", "print", "print", "print", "print", "print", "print", "channels_base_IDEA.channels_component.update_flood_depth", "channels_base_IDEA.channels_component.update_trapezoid_Rh", "channels_base_IDEA.channels_component.update_free_surface_slope", "print", "print", "print", "print", "channels_base_IDEA.channels_component.update_velocity_in_flood_cells", "print", "print", "print", "print", "channels_base_IDEA.channels_component.check_flow_depth", "channels_base_IDEA.channels_component.check_flow_velocity", "print", "print", "print", "print", "print", "print"], "store_vars_calls": {"D_OK": "self.check_flow_depth", "U_OK": "self.check_flow_velocity"}}, "finalize": {"args": ["self"], "min_max_lineno": {"min_lineno": 848, "max_lineno": 867}, "calls": ["channels_base_IDEA.channels_component.update_total_channel_water_volume", "channels_base_IDEA.channels_component.update_total_land_water_volume", "channels_base_IDEA.channels_component.update_mins_and_maxes", "channels_base_IDEA.channels_component.close_input_files", "channels_base_IDEA.channels_component.close_output_files", "channels_base_IDEA.channels_component.print_final_report"]}, "set_computed_input_vars": {"args": ["self"], "min_max_lineno": {"min_lineno": 870, "max_lineno": 897}, "calls": ["channels_base_IDEA.channels_component.get_attribute().lower", "numpy.maximum", "numpy.maximum", "channels_base_IDEA.channels_component.get_attribute"], "store_vars_calls": {"cfg_extension": "self.get_attribute().lower", "self.save_grid_dt": "np.maximum", "self.save_pixels_dt": "np.maximum"}}, "initialize_d8_vars": {"args": ["self"], "min_max_lineno": {"min_lineno": 900, "max_lineno": 959}, "calls": ["topoflow.components.d8_global.d8_component", "channels_base_IDEA.channels_component.d8.initialize", "channels_base_IDEA.channels_component.d8.update", "channels_base_IDEA.channels_component.d8.update_noflow_IDs", "copy.copy"], "store_vars_calls": {"self.d8": "d8_base.d8_component", "d8f": "copy.copy"}}, "initialize_computed_vars": {"args": ["self"], "min_max_lineno": {"min_lineno": 962, "max_lineno": 1190}, "calls": ["channels_base_IDEA.channels_component.S_bed.copy", "channels_base_IDEA.channels_component.initialize_grid", "channels_base_IDEA.channels_component.initialize_grid", "channels_base_IDEA.channels_component.initialize_grid", "channels_base_IDEA.channels_component.initialize_grid", "channels_base_IDEA.channels_component.initialize_grid", "channels_base_IDEA.channels_component.initialize_grid", "channels_base_IDEA.channels_component.initialize_grid", "channels_base_IDEA.channels_component.initialize_grid", "channels_base_IDEA.channels_component.initialize_scalar", "channels_base_IDEA.channels_component.initialize_scalar", "channels_base_IDEA.channels_component.initialize_scalar", "channels_base_IDEA.channels_component.initialize_scalar", "channels_base_IDEA.channels_component.initialize_grid", "channels_base_IDEA.channels_component.initialize_grid", "channels_base_IDEA.channels_component.initialize_grid", "channels_base_IDEA.channels_component.initialize_outlet_values", "channels_base_IDEA.channels_component.initialize_peak_values", "channels_base_IDEA.channels_component.initialize_min_and_max_values", "channels_base_IDEA.channels_component.initialize_scalar", "channels_base_IDEA.channels_component.initialize_scalar", "channels_base_IDEA.channels_component.initialize_scalar", "channels_base_IDEA.channels_component.initialize_scalar", "channels_base_IDEA.channels_component.initialize_scalar", "channels_base_IDEA.channels_component.initialize_scalar", "print", "channels_base_IDEA.channels_component.initialize_scalar", "channels_base_IDEA.channels_component.initialize_scalar", "channels_base_IDEA.channels_component.initialize_scalar", "channels_base_IDEA.channels_component.initialize_scalar", "channels_base_IDEA.channels_component.initialize_scalar", "channels_base_IDEA.channels_component.initialize_scalar", "channels_base_IDEA.channels_component.angle_type.lower", "print", "print", "print", "print", "print", "print", "print", "print", "print", "channels_base_IDEA.channels_component.remove_bad_slopes", "channels_base_IDEA.channels_component.initialize_grid", "channels_base_IDEA.channels_component.initialize_grid", "channels_base_IDEA.channels_component.initialize_grid", "numpy.tan", "numpy.tan", "print", "print", "print", "print", "channels_base_IDEA.channels_component.nval.min", "channels_base_IDEA.channels_component.nval.max", "channels_base_IDEA.channels_component.z0val.min", "channels_base_IDEA.channels_component.z0val.max", "numpy.cos", "channels_base_IDEA.channels_component.d_bankfull.min", "channels_base_IDEA.channels_component.d_bankfull.max", "print", "print", "print", "print", "str", "str", "str", "str", "str", "str", "numpy.float64", "channels_base_IDEA.channels_component.width.min", "channels_base_IDEA.channels_component.width.max", "str", "str", "channels_base_IDEA.channels_component.sinu.min", "channels_base_IDEA.channels_component.sinu.max", "channels_base_IDEA.channels_component.d0.min", "channels_base_IDEA.channels_component.d0.max", "str", "str", "str", "str", "channels_base_IDEA.channels_component.angle.min", "channels_base_IDEA.channels_component.angle.max"], "store_vars_calls": {"self.S_free": "self.S_bed.copy", "self.u": "self.initialize_grid", "self.f": "self.initialize_grid", "self.d": "self.initialize_grid", "self.Q": "self.initialize_grid", "self.R": "self.initialize_grid", "self.tau": "self.initialize_grid", "self.u_star": "self.initialize_grid", "self.froude": "self.initialize_grid", "self.vol_R": "self.initialize_scalar", "self.vol_Q": "self.initialize_scalar", "self.vol_chan": "self.initialize_scalar", "self.vol_land": "self.initialize_scalar", "self.d_flood": "self.initialize_grid", "self.vol_flood": "self.initialize_grid", "self.Rh": "self.initialize_grid", "self.z0val": "self.initialize_scalar", "self.z0val_min": "self.z0val.min", "self.z0val_max": "self.z0val.max", "self.nval": "self.initialize_scalar", "self.nval_min": "self.nval.min", "self.nval_max": "self.nval.max", "self.flooded_cell_mask": "self.initialize_grid", "self.Qf": "self.initialize_grid"}}, "initialize_diversion_vars": {"args": ["self"], "min_max_lineno": {"min_lineno": 1202, "max_lineno": 1241}, "calls": ["numpy.int32", "numpy.int32", "numpy.int32", "numpy.int32", "numpy.int32", "numpy.int32", "numpy.int32", "numpy.int32", "numpy.array"], "store_vars_calls": {"source_rows": "np.int32", "source_cols": "np.int32", "sink_rows": "np.int32", "sink_cols": "np.int32", "canal_in_rows": "np.int32", "canal_in_cols": "np.int32", "canal_out_rows": "np.int32", "canal_out_cols": "np.int32", "self.Q_canals_in": "np.array"}}, "initialize_outlet_values": {"args": ["self"], "min_max_lineno": {"min_lineno": 1244, "max_lineno": 1260}, "calls": ["channels_base_IDEA.channels_component.initialize_scalar", "channels_base_IDEA.channels_component.initialize_scalar", "channels_base_IDEA.channels_component.initialize_scalar", "channels_base_IDEA.channels_component.initialize_scalar"], "store_vars_calls": {"self.Q_outlet": "self.initialize_scalar", "self.u_outlet": "self.initialize_scalar", "self.d_outlet": "self.initialize_scalar", "self.f_outlet": "self.initialize_scalar"}}, "initialize_peak_values": {"args": ["self"], "min_max_lineno": {"min_lineno": 1263, "max_lineno": 1275}, "calls": ["channels_base_IDEA.channels_component.initialize_scalar", "channels_base_IDEA.channels_component.initialize_scalar", "channels_base_IDEA.channels_component.initialize_scalar", "channels_base_IDEA.channels_component.initialize_scalar", "channels_base_IDEA.channels_component.initialize_scalar", "channels_base_IDEA.channels_component.initialize_scalar"], "store_vars_calls": {"self.Q_peak": "self.initialize_scalar", "self.T_peak": "self.initialize_scalar", "self.u_peak": "self.initialize_scalar", "self.Tu_peak": "self.initialize_scalar", "self.d_peak": "self.initialize_scalar", "self.Td_peak": "self.initialize_scalar"}}, "initialize_min_and_max_values": {"args": ["self"], "min_max_lineno": {"min_lineno": 1278, "max_lineno": 1292}, "calls": ["channels_base_IDEA.channels_component.initialize_scalar", "channels_base_IDEA.channels_component.initialize_scalar", "channels_base_IDEA.channels_component.initialize_scalar", "channels_base_IDEA.channels_component.initialize_scalar", "channels_base_IDEA.channels_component.initialize_scalar", "channels_base_IDEA.channels_component.initialize_scalar"], "store_vars_calls": {"self.Q_min": "self.initialize_scalar", "self.Q_max": "self.initialize_scalar", "self.u_min": "self.initialize_scalar", "self.u_max": "self.initialize_scalar", "self.d_min": "self.initialize_scalar", "self.d_max": "self.initialize_scalar"}}, "update_flood_d8_vars": {"args": ["self"], "min_max_lineno": {"min_lineno": 1295, "max_lineno": 1320}, "calls": ["channels_base_IDEA.channels_component.d8f.update_flow_grid", "channels_base_IDEA.channels_component.d8f.update_parent_ID_grid", "channels_base_IDEA.channels_component.d8f.update_parent_IDs", "channels_base_IDEA.channels_component.d8f.update_flow_from_IDs", "channels_base_IDEA.channels_component.d8f.update_flow_to_IDs", "channels_base_IDEA.channels_component.d8f.update_noflow_IDs", "channels_base_IDEA.channels_component.d8f.update_flow_width_grid", "channels_base_IDEA.channels_component.d8f.update_flow_length_grid"]}, "update_R": {"args": ["self"], "min_max_lineno": {"min_lineno": 1327, "max_lineno": 1378}}, "update_R_integral": {"args": ["self"], "min_max_lineno": {"min_lineno": 1381, "max_lineno": 1395}, "calls": ["numpy.double", "numpy.size", "numpy.sum"], "store_vars_calls": {"volume": "np.double"}}, "update_discharge": {"args": ["self"], "min_max_lineno": {"min_lineno": 1475, "max_lineno": 1499}}, "update_diversions": {"args": ["self"], "min_max_lineno": {"min_lineno": 1530, "max_lineno": 1614}}, "update_flow_volume": {"args": ["self"], "min_max_lineno": {"min_lineno": 1617, "max_lineno": 1711}, "calls": ["numpy.maximum", "w1.sum", "numpy.invert"], "store_vars_calls": {"n1": "w1.sum"}}, "update_flow_depth": {"args": ["self"], "min_max_lineno": {"min_lineno": 1929, "max_lineno": 2047}, "calls": ["numpy.maximum", "numpy.invert", "numpy.size", "numpy.invert", "numpy.tan", "numpy.tan", "numpy.sqrt", "numpy.sqrt"], "store_vars_calls": {"self.d_is_neg": "np.invert", "w2": "np.invert"}}, "update_flood_depth": {"args": ["self"], "min_max_lineno": {"min_lineno": 2050, "max_lineno": 2098}, "calls": ["numpy.invert", "numpy.size"], "store_vars_calls": {"w2": "np.invert"}}, "update_free_surface_slope": {"args": ["self"], "min_max_lineno": {"min_lineno": 2101, "max_lineno": 2113}}, "update_shear_stress": {"args": ["self"], "min_max_lineno": {"min_lineno": 2125, "max_lineno": 2136}}, "update_shear_speed": {"args": ["self"], "min_max_lineno": {"min_lineno": 2139, "max_lineno": 2145}, "calls": ["numpy.sqrt"]}, "update_trapezoid_Rh": {"args": ["self"], "min_max_lineno": {"min_lineno": 2148, "max_lineno": 2221}, "calls": ["numpy.float64", "numpy.float64", "numpy.tan", "numpy.cos", "numpy.float64"]}, "update_friction_factor": {"args": ["self"], "min_max_lineno": {"min_lineno": 2231, "max_lineno": 2296}, "calls": ["numpy.float64", "numpy.maximum", "numpy.float64", "numpy.float64", "numpy.float64", "numpy.float64", "numpy.log"]}, "update_velocity": {"args": ["self"], "min_max_lineno": {"min_lineno": 2343, "max_lineno": 2350}, "calls": ["print"]}, "update_velocity_in_flood_cells": {"args": ["self", "REPORT"], "min_max_lineno": {"min_lineno": 2357, "max_lineno": 2375}, "calls": ["print", "print", "print", "print", "numpy.sqrt", "uf[].min", "uf[].max"]}, "update_velocity_on_edges": {"args": ["self"], "min_max_lineno": {"min_lineno": 2378, "max_lineno": 2390}, "calls": ["numpy.float64"]}, "update_froude_number": {"args": ["self"], "min_max_lineno": {"min_lineno": 2394, "max_lineno": 2408}, "calls": ["numpy.float64", "numpy.sqrt"]}, "update_outlet_values": {"args": ["self"], "min_max_lineno": {"min_lineno": 2411, "max_lineno": 2432}, "calls": ["channels_base_IDEA.channels_component.Q_outlet.fill", "channels_base_IDEA.channels_component.u_outlet.fill", "channels_base_IDEA.channels_component.d_outlet.fill", "channels_base_IDEA.channels_component.f_outlet.fill"]}, "update_peak_values": {"args": ["self"], "min_max_lineno": {"min_lineno": 2450, "max_lineno": 2467}, "calls": ["channels_base_IDEA.channels_component.Q_peak.fill", "channels_base_IDEA.channels_component.T_peak.fill", "channels_base_IDEA.channels_component.u_peak.fill", "channels_base_IDEA.channels_component.Tu_peak.fill", "channels_base_IDEA.channels_component.d_peak.fill", "channels_base_IDEA.channels_component.Td_peak.fill"]}, "update_Q_out_integral": {"args": ["self"], "min_max_lineno": {"min_lineno": 2482, "max_lineno": 2489}}, "update_mins_and_maxes": {"args": ["self", "REPORT"], "min_max_lineno": {"min_lineno": 2493, "max_lineno": 2586}, "calls": ["channels_base_IDEA.channels_component.Q[].min", "channels_base_IDEA.channels_component.Q[].max", "channels_base_IDEA.channels_component.u[].min", "channels_base_IDEA.channels_component.u[].max", "channels_base_IDEA.channels_component.d[].min", "channels_base_IDEA.channels_component.d[].max", "channels_base_IDEA.channels_component.Q_min.fill", "channels_base_IDEA.channels_component.Q_max.fill", "channels_base_IDEA.channels_component.u_min.fill", "channels_base_IDEA.channels_component.u_max.fill", "channels_base_IDEA.channels_component.d_min.fill", "channels_base_IDEA.channels_component.d_max.fill", "print", "print", "print", "print", "print"], "store_vars_calls": {"Q_min": "self.Q[].min", "Q_max": "self.Q[].max", "u_min": "self.u[].min", "u_max": "self.u[].max", "d_min": "self.d[].min", "d_max": "self.d[].max"}}, "update_total_channel_water_volume": {"args": ["self", "REPORT"], "min_max_lineno": {"min_lineno": 2589, "max_lineno": 2604}, "calls": ["numpy.sum", "channels_base_IDEA.channels_component.vol_chan.fill"], "store_vars_calls": {"vol_chan": "np.sum"}}, "update_total_land_water_volume": {"args": ["self", "REPORT"], "min_max_lineno": {"min_lineno": 2614, "max_lineno": 2633}, "calls": ["numpy.sum", "channels_base_IDEA.channels_component.vol_land.fill"], "store_vars_calls": {"vol_land": "np.sum"}}, "check_flow_depth_LAST": {"args": ["self"], "returns": [["OK"], ["OK"]], "min_max_lineno": {"min_lineno": 2636, "max_lineno": 2685}, "calls": ["numpy.where", "numpy.size", "d[].min", "range", "print", "print", "RuntimeError", "numpy.logical_or", "len", "print", "range", "numpy.logical_not", "str", "str", "len", "print", "numpy.isfinite", "str", "str", "str"], "store_vars_calls": {"wbad": "np.where", "nbad": "np.size", "dmin": "d[].min"}}, "check_flow_depth": {"args": ["self"], "returns": [["OK"], ["OK"]], "min_max_lineno": {"min_lineno": 2688, "max_lineno": 2773}, "calls": ["numpy.where", "numpy.size", "numpy.where", "numpy.size", "numpy.where", "numpy.size", "print", "print", "print", "print", "print", "print", "print", "print", "RuntimeError", "numpy.isnan", "numpy.isinf", "d[].min", "print", "print", "print", "print", "str", "str", "str", "str", "str"], "store_vars_calls": {"wneg": "np.where", "nneg": "np.size", "wnan": "np.where", "nnan": "np.size", "winf": "np.where", "ninf": "np.size", "dmin": "d[].min"}}, "check_flow_velocity_LAST": {"args": ["self"], "returns": [["OK"], ["OK"]], "min_max_lineno": {"min_lineno": 2776, "max_lineno": 2823}, "calls": ["numpy.where", "numpy.size", "u[].min", "range", "print", "print", "RuntimeError", "numpy.logical_or", "len", "print", "range", "numpy.logical_not", "str", "str", "len", "print", "numpy.isfinite", "str", "str", "str"], "store_vars_calls": {"wbad": "np.where", "nbad": "np.size", "umin": "u[].min"}}, "check_flow_velocity": {"args": ["self"], "returns": [["OK"], ["OK"]], "min_max_lineno": {"min_lineno": 2847, "max_lineno": 2914}, "calls": ["numpy.where", "numpy.size", "numpy.where", "numpy.size", "numpy.where", "numpy.size", "print", "print", "print", "print", "print", "print", "print", "print", "RuntimeError", "numpy.isnan", "numpy.isinf", "u[].min", "print", "print", "print", "print", "str", "str", "str", "str", "str"], "store_vars_calls": {"wneg": "np.where", "nneg": "np.size", "wnan": "np.where", "nnan": "np.size", "winf": "np.where", "ninf": "np.size", "umin": "u[].min"}}, "open_input_files": {"args": ["self"], "min_max_lineno": {"min_lineno": 2938, "max_lineno": 2977}, "calls": ["topoflow.utils.model_input.open_file", "topoflow.utils.model_input.open_file", "topoflow.utils.model_input.open_file", "topoflow.utils.model_input.open_file", "topoflow.utils.model_input.open_file", "topoflow.utils.model_input.open_file", "topoflow.utils.model_input.open_file", "topoflow.utils.model_input.open_file"], "store_vars_calls": {"self.slope_unit": "model_input.open_file", "self.width_unit": "model_input.open_file", "self.angle_unit": "model_input.open_file", "self.sinu_unit": "model_input.open_file", "self.d0_unit": "model_input.open_file", "self.d_bankfull_unit": "model_input.open_file", "self.nval_unit": "model_input.open_file", "self.z0val_unit": "model_input.open_file"}}, "read_input_files": {"args": ["self"], "min_max_lineno": {"min_lineno": 2980, "max_lineno": 3041}, "calls": ["topoflow.utils.model_input.read_next", "topoflow.utils.model_input.read_next", "topoflow.utils.model_input.read_next", "topoflow.utils.model_input.read_next", "topoflow.utils.model_input.read_next", "topoflow.utils.model_input.read_next", "channels_base_IDEA.channels_component.update_var", "topoflow.utils.model_input.read_next", "topoflow.utils.model_input.read_next", "channels_base_IDEA.channels_component.update_var", "channels_base_IDEA.channels_component.update_var", "channels_base_IDEA.channels_component.update_var", "channels_base_IDEA.channels_component.update_var", "channels_base_IDEA.channels_component.update_var", "channels_base_IDEA.channels_component.update_var", "channels_base_IDEA.channels_component.update_var"], "store_vars_calls": {"slope": "model_input.read_next", "width": "model_input.read_next", "angle": "model_input.read_next", "sinu": "model_input.read_next", "d0": "model_input.read_next", "d_bankfull": "model_input.read_next", "nval": "model_input.read_next", "z0val": "model_input.read_next"}}, "close_input_files": {"args": ["self"], "min_max_lineno": {"min_lineno": 3132, "max_lineno": 3152}, "calls": ["channels_base_IDEA.channels_component.slope_unit.close", "channels_base_IDEA.channels_component.width_unit.close", "channels_base_IDEA.channels_component.angle_unit.close", "channels_base_IDEA.channels_component.sinu_unit.close", "channels_base_IDEA.channels_component.d0_unit.close", "channels_base_IDEA.channels_component.d_bankfull_unit.close", "channels_base_IDEA.channels_component.nval_unit.close", "channels_base_IDEA.channels_component.z0val_unit.close"]}, "update_outfile_names": {"args": ["self"], "min_max_lineno": {"min_lineno": 3165, "max_lineno": 3181}}, "bundle_output_files": {"args": ["self"], "min_max_lineno": {"min_lineno": 3184, "max_lineno": 3223}, "calls": ["get_long_name", "channels_base_IDEA.channels_component.get_var_units"]}, "disable_all_output": {"args": ["self"], "min_max_lineno": {"min_lineno": 3226, "max_lineno": 3239}}, "open_output_files": {"args": ["self"], "min_max_lineno": {"min_lineno": 3242, "max_lineno": 3338}, "calls": ["topoflow.utils.model_output.check_netcdf", "channels_base_IDEA.channels_component.update_outfile_names", "topoflow.utils.model_output.open_new_gs_file", "topoflow.utils.model_output.open_new_gs_file", "topoflow.utils.model_output.open_new_gs_file", "topoflow.utils.model_output.open_new_gs_file", "topoflow.utils.model_output.open_new_gs_file", "topoflow.utils.model_output.open_new_ts_file", "topoflow.utils.model_output.open_new_ts_file", "topoflow.utils.model_output.open_new_ts_file", "topoflow.utils.model_output.open_new_ts_file", "topoflow.utils.model_output.open_new_ts_file"]}, "write_output_files": {"args": ["self", "time_seconds"], "min_max_lineno": {"min_lineno": 3341, "max_lineno": 3368}, "calls": ["int", "channels_base_IDEA.channels_component.save_grids", "channels_base_IDEA.channels_component.save_pixel_values", "int", "int"], "store_vars_calls": {"model_time": "int"}}, "close_output_files": {"args": ["self"], "min_max_lineno": {"min_lineno": 3379, "max_lineno": 3392}, "calls": ["topoflow.utils.model_output.close_gs_file", "topoflow.utils.model_output.close_gs_file", "topoflow.utils.model_output.close_gs_file", "topoflow.utils.model_output.close_gs_file", "topoflow.utils.model_output.close_gs_file", "topoflow.utils.model_output.close_ts_file", "topoflow.utils.model_output.close_ts_file", "topoflow.utils.model_output.close_ts_file", "topoflow.utils.model_output.close_ts_file", "topoflow.utils.model_output.close_ts_file"]}, "save_grids": {"args": ["self"], "min_max_lineno": {"min_lineno": 3395, "max_lineno": 3417}, "calls": ["topoflow.utils.model_output.add_grid", "topoflow.utils.model_output.add_grid", "topoflow.utils.model_output.add_grid", "topoflow.utils.model_output.add_grid", "topoflow.utils.model_output.add_grid"]}, "save_pixel_values": {"args": ["self"], "min_max_lineno": {"min_lineno": 3420, "max_lineno": 3442}, "calls": ["topoflow.utils.model_output.add_values_at_IDs", "topoflow.utils.model_output.add_values_at_IDs", "topoflow.utils.model_output.add_values_at_IDs", "topoflow.utils.model_output.add_values_at_IDs", "topoflow.utils.model_output.add_values_at_IDs"]}, "manning_formula": {"args": ["self"], "returns": [["u"]], "min_max_lineno": {"min_lineno": 3445, "max_lineno": 3474}, "calls": ["numpy.sqrt"]}, "law_of_the_wall": {"args": ["self"], "returns": [["u"]], "min_max_lineno": {"min_lineno": 3477, "max_lineno": 3525}, "calls": ["numpy.maximum", "numpy.float64", "numpy.log", "numpy.sqrt"], "store_vars_calls": {"smoothness": "np.maximum"}}, "print_status_report": {"args": ["self"], "min_max_lineno": {"min_lineno": 3528, "max_lineno": 3556}, "calls": ["numpy.where", "numpy.size", "print", "print", "channels_base_IDEA.channels_component.update_mins_and_maxes", "numpy.where", "numpy.size", "print", "print", "print", "numpy.float64", "numpy.float64", "str"], "store_vars_calls": {"wflow": "np.where", "n_flow": "np.size", "wmax": "np.where", "nwmax": "np.size"}}, "remove_bad_slopes": {"args": ["self", "FLOAT"], "min_max_lineno": {"min_lineno": 3627, "max_lineno": 3722}, "calls": ["numpy.where", "numpy.size", "numpy.where", "numpy.size", "numpy.where", "numpy.size", "numpy.where", "numpy.size", "numpy.zeros", "numpy.invert", "channels_base_IDEA.channels_component.slope[].min", "channels_base_IDEA.channels_component.slope[].max", "numpy.isnan", "numpy.isinf", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "numpy.float32", "numpy.float64", "str", "str", "str", "str", "str", "str", "numpy.size", "str"], "store_vars_calls": {"wnan": "np.where", "nnan": "np.size", "wzero": "np.where", "nzero": "np.size", "wneg": "np.where", "nneg": "np.size", "winf": "np.where", "ninf": "np.size", "bad": "np.zeros", "good": "np.invert", "S_min": "self.slope[].min", "S_max": "self.slope[].max", "self.slope": "np.float64"}}}}}, "functions": {"Trapezoid_Rh": {"args": ["d", "wb", "theta"], "returns": [["Rh"]], "min_max_lineno": {"min_lineno": 3727, "max_lineno": 3753}, "calls": ["numpy.where", "numpy.size", "numpy.cos", "numpy.tan", "numpy.float64"], "store_vars_calls": {"w": "np.where", "nw": "np.size"}}, "Manning_Formula": {"args": ["Rh", "S", "nval"], "returns": [["u"]], "min_max_lineno": {"min_lineno": 3756, "max_lineno": 3785}, "calls": ["numpy.float64", "numpy.sqrt"]}, "Law_of_the_Wall": {"args": ["d", "Rh", "S", "z0val"], "returns": [["u"]], "min_max_lineno": {"min_lineno": 3788, "max_lineno": 3841}, "calls": ["numpy.float64", "numpy.float64", "numpy.float64", "numpy.maximum", "numpy.sqrt", "numpy.float64", "numpy.log", "numpy.sqrt"], "store_vars_calls": {"g": "np.float64", "aval": "np.float64", "kappa": "np.float64", "smoothness": "np.maximum"}}}, "is_test": false}