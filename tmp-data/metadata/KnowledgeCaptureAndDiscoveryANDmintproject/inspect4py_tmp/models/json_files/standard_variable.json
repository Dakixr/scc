{"file": {"path": "/Users/dakixr/Desktop/github/scc/tmp-data/metadata/KnowledgeCaptureAndDiscoveryANDmintproject/data-catalog/api/dcat_service/models/standard_variable.py", "fileNameBase": "standard_variable", "extension": "py"}, "dependencies": [{"from_module": "dcat_service.db_models", "import": "VariableDB", "type": "external"}, {"from_module": "dcat_service.db_models", "import": "StandardVariableDB", "type": "external"}, {"from_module": "dcat_service.misc.exception", "import": "StandardVariableValidationError", "type": "external"}, {"from_module": "dcat_service.misc.validation_result", "import": "ValidationResult", "type": "external"}, {"from_module": "dcat_service.misc.validator", "import": "Validator", "type": "external"}, {"from_module": "dcat_service.misc.validator", "import": "ValidateNotEmpty", "type": "external"}, {"from_module": "dcat_service.misc.validator", "import": "ValidateProperUUID", "type": "external"}, {"from_module": "dcat_service.misc.validator", "import": "ValidatorRunner", "type": "external"}, {"from_module": "dcat_service", "import": "session_scope", "type": "external"}, {"import": "uuid", "type": "external"}, {"from_module": "sqlalchemy", "import": "bindparam", "type": "external"}, {"from_module": "sqlalchemy.dialects", "import": "postgresql", "type": "external"}, {"from_module": "sqlalchemy.sql", "import": "func", "type": "external"}], "classes": {"StandardVariable": {"min_max_lineno": {"min_lineno": 13, "max_lineno": 73}, "methods": {"__init__": {"args": ["self", "record_id", "name", "ontology", "uri", "description"], "min_max_lineno": {"min_lineno": 14, "max_lineno": 20}}, "to_json": {"args": ["self"], "min_max_lineno": {"min_lineno": 21, "max_lineno": 28}}, "__str__": {"args": ["self"], "min_max_lineno": {"min_lineno": 30, "max_lineno": 32}, "calls": ["str", "standard_variable.StandardVariable.to_json"]}, "find_by_record_id": {"args": ["record_id", "session"], "min_max_lineno": {"min_lineno": 33, "max_lineno": 40}, "calls": ["session.query().filter().first", "dcat_service.session_scope", "sess.query().filter().first", "session.query().filter", "sess.query().filter", "session.query", "sess.query"]}, "find_by_record_ids": {"args": ["record_ids", "session"], "min_max_lineno": {"min_lineno": 41, "max_lineno": 49}, "calls": ["session.query().filter().all", "dcat_service.session_scope", "sess.query().filter().all", "session.query().filter", "sess.query().filter", "dcat_service.db_models.StandardVariableDB.id.in_", "dcat_service.db_models.StandardVariableDB.id.in_", "session.query", "sess.query"]}, "schema_validators": {"min_max_lineno": {"min_lineno": 50, "max_lineno": 58}, "calls": ["dcat_service.misc.validator.ValidateNotEmpty", "dcat_service.misc.validator.ValidateNotEmpty", "dcat_service.misc.validator.ValidateNotEmpty", "dcat_service.misc.validator.ValidateNotEmpty", "dcat_service.misc.validator.ValidateProperUUID"]}, "from_json": {"args": ["standard_variable_definition"], "min_max_lineno": {"min_lineno": 60, "max_lineno": 73}, "calls": ["standard_variable_definition.get", "standard_variable_definition.get", "standard_variable_definition.get", "standard_variable_definition.get", "standard_variable_definition.get", "standard_variable.StandardVariable", "str", "uuid.uuid5", "str"], "store_vars_calls": {"name": "standard_variable_definition.get", "ontology": "standard_variable_definition.get", "uri": "standard_variable_definition.get", "description": "standard_variable_definition.get", "record_id": "standard_variable_definition.get"}}}}, "StandardVariableCollectionBuilder": {"min_max_lineno": {"min_lineno": 75, "max_lineno": 127}, "methods": {"__init__": {"args": ["self", "session"], "min_max_lineno": {"min_lineno": 76, "max_lineno": 83}}, "instantiate_variables": {"args": ["self", "standard_variable_definitions"], "min_max_lineno": {"min_lineno": 84, "max_lineno": 86}, "calls": ["standard_variable.StandardVariable.from_json"]}, "validate_schema": {"args": ["self"], "min_max_lineno": {"min_lineno": 87, "max_lineno": 97}, "calls": ["dcat_service.misc.validator.ValidatorRunner", "dcat_service.misc.validator.ValidatorRunner.run_validations", "standard_variable.StandardVariable.schema_validators", "validation_result.is_valid", "validation_results_with_errors.append"], "store_vars_calls": {"validator_runner": "ValidatorRunner", "validation_results": "validator_runner.run_validations"}}, "build_record_associations": {"args": ["self"], "min_max_lineno": {"min_lineno": 98, "max_lineno": 101}}, "persist": {"args": ["self"], "returns": [["standard_variables_json_records"]], "min_max_lineno": {"min_lineno": 102, "max_lineno": 127}, "calls": ["sqlalchemy.dialects.postgresql.insert().values", "sqlalchemy.dialects.postgresql.insert().values.on_conflict_do_update", "standard_variable.StandardVariableCollectionBuilder.session.execute", "standard_variable.to_json", "sqlalchemy.dialects.postgresql.insert", "sqlalchemy.bindparam", "sqlalchemy.bindparam", "sqlalchemy.bindparam", "sqlalchemy.bindparam", "sqlalchemy.bindparam", "sqlalchemy.sql.func.now", "sqlalchemy.sql.func.now"], "store_vars_calls": {"stmt": "postgresql.insert().values", "do_update_stmt": "stmt.on_conflict_do_update"}}}}}, "is_test": false}