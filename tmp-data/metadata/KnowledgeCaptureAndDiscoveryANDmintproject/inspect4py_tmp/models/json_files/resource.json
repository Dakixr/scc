{"file": {"path": "/Users/dakixr/Desktop/github/scc/tmp-data/metadata/KnowledgeCaptureAndDiscoveryANDmintproject/data-catalog/api/dcat_service/models/resource.py", "fileNameBase": "resource", "extension": "py"}, "dependencies": [{"from_module": "dcat_service.db_models", "import": "ResourceDB", "type": "external"}, {"from_module": "dcat_service.db_models", "import": "TemporalCoverageIndexDB", "type": "external"}, {"from_module": "dcat_service.db_models", "import": "SpatialCoverageIndexDB", "type": "external"}, {"from_module": "dcat_service.db_models", "import": "Base", "type": "external"}, {"from_module": "dcat_service.models.dataset", "import": "Dataset", "type": "external"}, {"from_module": "dcat_service.models.variable", "import": "Variable", "type": "external"}, {"from_module": "dcat_service.models.provenance", "import": "Provenance", "type": "external"}, {"from_module": "dcat_service.misc.validation_result", "import": "ValidationResult", "type": "external"}, {"from_module": "dcat_service.misc.validator", "import": "Validator", "type": "external"}, {"from_module": "dcat_service.misc.validator", "import": "ValidateNotEmpty", "type": "external"}, {"from_module": "dcat_service.misc.validator", "import": "ValidatorRunner", "type": "external"}, {"from_module": "dcat_service.misc.validator", "import": "ValidateProperUUID", "type": "external"}, {"from_module": "dcat_service.misc.validator", "import": "ValidateTemporalCoverage", "type": "external"}, {"from_module": "dcat_service.misc.validator", "import": "ValidateSpatialCoverage", "type": "external"}, {"from_module": "dcat_service.misc.validator", "import": "ValidateIsList", "type": "external"}, {"from_module": "dcat_service", "import": "session_scope", "type": "external"}, {"from_module": "sqlalchemy", "import": "bindparam", "type": "external"}, {"from_module": "sqlalchemy", "import": "Table", "type": "external"}, {"from_module": "sqlalchemy", "import": "func", "type": "external"}, {"from_module": "sqlalchemy.dialects", "import": "postgresql", "type": "external"}, {"from_module": "uuid", "import": "uuid4", "type": "external"}], "classes": {"Resource": {"min_max_lineno": {"min_lineno": 16, "max_lineno": 120}, "methods": {"__init__": {"args": ["self", "dataset_id", "record_id", "provenance_id", "name", "data_url", "resource_type", "variable_ids", "json_metadata", "layout", "temporal_coverage", "spatial_coverage"], "min_max_lineno": {"min_lineno": 17, "max_lineno": 32}}, "to_json": {"args": ["self"], "min_max_lineno": {"min_lineno": 33, "max_lineno": 46}}, "__str__": {"args": ["self"], "min_max_lineno": {"min_lineno": 48, "max_lineno": 50}, "calls": ["str", "resource.Resource.to_json"]}, "find_by_record_id": {"args": ["record_id", "session"], "min_max_lineno": {"min_lineno": 51, "max_lineno": 59}, "calls": ["session.query().filter().first", "dcat_service.session_scope", "sess.query().filter().first", "session.query().filter", "sess.query().filter", "session.query", "sess.query"]}, "find_by_record_ids": {"args": ["record_ids", "session"], "min_max_lineno": {"min_lineno": 60, "max_lineno": 68}, "calls": ["session.query().filter().all", "dcat_service.session_scope", "sess.query().filter().all", "session.query().filter", "sess.query().filter", "dcat_service.db_models.ResourceDB.id.in_", "dcat_service.db_models.ResourceDB.id.in_", "session.query", "sess.query"]}, "schema_validators": {"min_max_lineno": {"min_lineno": 70, "max_lineno": 89}, "calls": ["dcat_service.misc.validator.ValidateNotEmpty", "dcat_service.misc.validator.ValidateProperUUID", "dcat_service.misc.validator.ValidateNotEmpty", "dcat_service.misc.validator.ValidateProperUUID", "dcat_service.misc.validator.ValidateNotEmpty", "dcat_service.misc.validator.ValidateProperUUID", "dcat_service.misc.validator.ValidateIsList", "dcat_service.misc.validator.ValidateNotEmpty", "dcat_service.misc.validator.ValidateNotEmpty", "dcat_service.misc.validator.ValidateNotEmpty", "dcat_service.misc.validator.ValidateTemporalCoverage", "dcat_service.misc.validator.ValidateSpatialCoverage"]}, "from_json": {"args": ["resource_definition"], "min_max_lineno": {"min_lineno": 91, "max_lineno": 120}, "calls": ["resource_definition.get", "resource_definition.get", "resource_definition.get", "resource_definition.get", "resource_definition.get", "resource_definition.get", "resource_definition.get", "resource_definition.get", "resource_definition.get", "resource_definition.get().get", "resource_definition.get().get", "resource.Resource", "str", "uuid.uuid4", "resource_definition.get", "resource_definition.get"], "store_vars_calls": {"json_metadata": "resource_definition.get", "layout": "resource_definition.get", "record_id_candidate": "resource_definition.get", "dataset_id": "resource_definition.get", "provenance_id": "resource_definition.get", "name": "resource_definition.get", "variable_ids": "resource_definition.get", "resource_type": "resource_definition.get", "data_url": "resource_definition.get", "temporal_coverage": "resource_definition.get().get", "spatial_coverage": "resource_definition.get().get"}}}}, "ResourceCollectionBuilder": {"min_max_lineno": {"min_lineno": 122, "max_lineno": 366}, "methods": {"__init__": {"args": ["self", "session"], "min_max_lineno": {"min_lineno": 123, "max_lineno": 134}, "calls": ["set", "set", "set"]}, "instantiate_resources": {"args": ["self", "resource_definitions"], "min_max_lineno": {"min_lineno": 135, "max_lineno": 143}, "calls": ["Resource.from_json.Resource.from_json", "Resource.from_json.ResourceCollectionBuilder.db_records_references[].add", "Resource.from_json.ResourceCollectionBuilder.db_records_references[].add", "Resource.from_json.ResourceCollectionBuilder.db_records_references[].update", "Resource.from_json.Resource.from_json"], "store_vars_calls": {"resource": "Resource.from_json"}}, "validate_schema": {"args": ["self"], "min_max_lineno": {"min_lineno": 144, "max_lineno": 154}, "calls": ["dcat_service.misc.validator.ValidatorRunner", "dcat_service.misc.validator.ValidatorRunner.run_validations", "resource.Resource.schema_validators", "validation_result.is_valid", "validation_results_with_errors.append"], "store_vars_calls": {"validator_runner": "ValidatorRunner", "validation_results": "validator_runner.run_validations"}}, "build_record_associations": {"args": ["self"], "min_max_lineno": {"min_lineno": 155, "max_lineno": 210}, "calls": ["dcat_service.models.dataset.Dataset.find_by_record_ids", "dcat_service.models.provenance.Provenance.find_by_record_ids", "dcat_service.models.variable.Variable.find_by_record_ids", "set", "set", "set", "set", "valid_dataset_associations.keys", "valid_provenance_associations.keys", "valid_variable_associations.keys", "dcat_service.misc.validation_result.ValidationResult", "str", "str", "str", "str", "dcat_service.misc.validation_result.ValidationResult.add_error", "set.add", "dcat_service.misc.validation_result.ValidationResult.add_error", "dcat_service.misc.validation_result.ValidationResult.add_error", "set", "len", "dcat_service.misc.validation_result.ValidationResult.add_error", "dcat_service.misc.validation_result.ValidationResult.is_valid", "validation_results_with_errors.append", "resource.to_json"], "store_vars_calls": {"datasets": "Dataset.find_by_record_ids", "provenance_arr": "Provenance.find_by_record_ids", "variables": "Variable.find_by_record_ids", "valid_dataset_ids": "set", "valid_provenance_ids": "set", "valid_variable_ids": "set", "resource_record_ids": "set", "validation_result": "ValidationResult", "resource_record_id": "str"}}, "persist": {"args": ["self"], "returns": [["resource_json_records"]], "min_max_lineno": {"min_lineno": 211, "max_lineno": 347}, "calls": ["sqlalchemy.Table", "sqlalchemy.dialects.postgresql.insert().values", "sqlalchemy.dialects.postgresql.insert().values.on_conflict_do_update", "sqlalchemy.Table", "sqlalchemy.dialects.postgresql.insert().values", "sqlalchemy.dialects.postgresql.insert().values", "sqlalchemy.dialects.postgresql.insert().values.on_conflict_do_update", "sqlalchemy.dialects.postgresql.insert().values", "sqlalchemy.dialects.postgresql.insert().values.on_conflict_do_update", "resource.ResourceCollectionBuilder.session.connection", "print", "resource.ResourceCollectionBuilder.execute", "resource_json_records.append", "query.append", "query.append", "len", "resource.ResourceCollectionBuilder.execute", "len", "resource.ResourceCollectionBuilder.session.execute", "len", "resource.ResourceCollectionBuilder.execute", "sqlalchemy.dialects.postgresql.insert", "sqlalchemy.bindparam", "sqlalchemy.bindparam", "sqlalchemy.bindparam", "sqlalchemy.bindparam", "sqlalchemy.bindparam", "sqlalchemy.bindparam", "sqlalchemy.bindparam", "sqlalchemy.bindparam", "sqlalchemy.bindparam", "sqlalchemy.dialects.postgresql.insert", "sqlalchemy.bindparam", "sqlalchemy.bindparam", "sqlalchemy.dialects.postgresql.insert", "sqlalchemy.bindparam", "sqlalchemy.bindparam", "sqlalchemy.bindparam", "sqlalchemy.bindparam", "sqlalchemy.dialects.postgresql.insert", "sqlalchemy.bindparam", "sqlalchemy.bindparam", "sqlalchemy.bindparam", "resources_variables_json_records.append", "temporal_coverage_json_records.append", "spatial_coverage_json_records.append", "values_arr.append", "resource.ResourceCollectionBuilder.persist.get_query"], "store_vars_calls": {"resource_db_table": "Table", "insert_resources_stmt": "postgresql.insert().values", "do_update_resources_stmt": "insert_resources_stmt.on_conflict_do_update", "resources_variables_table": "Table", "insert_resources_variables_stmt": "postgresql.insert().values", "insert_temporal_coverage_index_stmt": "postgresql.insert().values", "do_update_temporal_coverage_index_stmt": "insert_temporal_coverage_index_stmt.on_conflict_do_update", "insert_spatial_coverage_index_stmt": "postgresql.insert().values", "do_update_spatial_coverage_index_stmt": "insert_spatial_coverage_index_stmt.on_conflict_do_update", "connection": "self.session.connection"}, "functions": {"is_queryable": {"args": ["provenance_id"], "min_max_lineno": {"min_lineno": 275, "max_lineno": 277}}, "get_query": {"args": ["arr"], "min_max_lineno": {"min_lineno": 317, "max_lineno": 329}, "calls": ["query.append", "query.append", "values_arr.append"]}}}, "_as_wkt": {"args": ["self", "spatial_coverage"], "min_max_lineno": {"min_lineno": 349, "max_lineno": 366}, "calls": ["str().lower", "str"]}}}}, "is_test": false}