{"file": {"path": "/Users/dakixr/Desktop/github/scc/tmp-data/metadata/KnowledgeCaptureAndDiscoveryANDmintproject/model-catalog-python-api-client/modelcatalog/models/parameter.py", "fileNameBase": "parameter", "extension": "py", "doc": {"long_description": "This is the API of the Software Description Ontology at [https://w3id.org/okn/o/sdm](https://w3id.org/okn/o/sdm)  # noqa: E501\n\nThe version of the OpenAPI document: v1.8.0\nGenerated by: https://openapi-generator.tech", "short_description": "Model Catalog", "full": "Model Catalog\n\nThis is the API of the Software Description Ontology at [https://w3id.org/okn/o/sdm](https://w3id.org/okn/o/sdm)  # noqa: E501\n\nThe version of the OpenAPI document: v1.8.0\nGenerated by: https://openapi-generator.tech"}}, "dependencies": [{"import": "pprint", "type": "external"}, {"import": "re", "type": "external"}, {"import": "six", "type": "external"}], "classes": {"Parameter": {"doc": {"long_description": "Ref: https://openapi-generator.tech\n\nDo not edit the class manually.", "short_description": "NOTE: This class is auto generated by OpenAPI Generator.", "full": "NOTE: This class is auto generated by OpenAPI Generator.\nRef: https://openapi-generator.tech\n\nDo not edit the class manually."}, "extend": ["object"], "min_max_lineno": {"min_lineno": 19, "max_lineno": 547}, "methods": {"__init__": {"doc": {"short_description": "Parameter - a model defined in OpenAPI"}, "args": ["self", "has_default_value", "has_maximum_accepted_value", "description", "has_data_type", "has_fixed_value", "has_presentation", "label", "recommended_increment", "type", "has_minimum_accepted_value", "has_accepted_values", "adjusts_variable", "relevant_for_intervention", "position", "id", "uses_unit", "has_step_size"], "min_max_lineno": {"min_lineno": 73, "max_lineno": 113}}, "has_default_value": {"doc": {"long_description": "Default accepted value of a variable presentation (or a parameter)  # noqa: E501", "short_description": "Sets the has_default_value of this Parameter.", "args": {"has_default_value": {"description": "The has_default_value of this Parameter.  # noqa: E501"}}}, "args": ["self", "has_default_value"], "min_max_lineno": {"min_lineno": 125, "max_lineno": 136}}, "has_maximum_accepted_value": {"doc": {"long_description": "Maximum accepted value of a variable presentation (or a parameter)  # noqa: E501", "short_description": "Sets the has_maximum_accepted_value of this Parameter.", "args": {"has_maximum_accepted_value": {"description": "The has_maximum_accepted_value of this Parameter.  # noqa: E501"}}}, "args": ["self", "has_maximum_accepted_value"], "min_max_lineno": {"min_lineno": 148, "max_lineno": 159}}, "description": {"doc": {"long_description": "small description  # noqa: E501", "short_description": "Sets the description of this Parameter.", "args": {"description": {"description": "The description of this Parameter.  # noqa: E501"}}}, "args": ["self", "description"], "min_max_lineno": {"min_lineno": 171, "max_lineno": 182}}, "has_data_type": {"doc": {"long_description": "Property that indicates the data type of a parameter  # noqa: E501", "short_description": "Sets the has_data_type of this Parameter.", "args": {"has_data_type": {"description": "The has_data_type of this Parameter.  # noqa: E501"}}}, "args": ["self", "has_data_type"], "min_max_lineno": {"min_lineno": 194, "max_lineno": 205}}, "has_fixed_value": {"doc": {"long_description": "Value of a parameter in a software setup.  # noqa: E501", "short_description": "Sets the has_fixed_value of this Parameter.", "args": {"has_fixed_value": {"description": "The has_fixed_value of this Parameter.  # noqa: E501"}}}, "args": ["self", "has_fixed_value"], "min_max_lineno": {"min_lineno": 217, "max_lineno": 228}}, "has_presentation": {"doc": {"long_description": "Property that links an instance of a dataset (or a dataset specification) to the presentation of a variable contained (or expected to be contained) on it.  # noqa: E501", "short_description": "Sets the has_presentation of this Parameter.", "args": {"has_presentation": {"description": "The has_presentation of this Parameter.  # noqa: E501"}}}, "args": ["self", "has_presentation"], "min_max_lineno": {"min_lineno": 240, "max_lineno": 251}}, "label": {"doc": {"long_description": "short description of the resource  # noqa: E501", "short_description": "Sets the label of this Parameter.", "args": {"label": {"description": "The label of this Parameter.  # noqa: E501"}}}, "args": ["self", "label"], "min_max_lineno": {"min_lineno": 263, "max_lineno": 274}}, "recommended_increment": {"doc": {"long_description": "Value that represents how a parameter should be incremented on each iteration of a software component execution. This value is important when preparing execution ensembles automatically, e.g., simulating crop production varying the parameter \"fertilizer amount\" in increments of 10%.  # noqa: E501", "short_description": "Sets the recommended_increment of this Parameter.", "args": {"recommended_increment": {"description": "The recommended_increment of this Parameter.  # noqa: E501"}}}, "args": ["self", "recommended_increment"], "min_max_lineno": {"min_lineno": 286, "max_lineno": 297}}, "type": {"doc": {"long_description": "type of the resource  # noqa: E501", "short_description": "Sets the type of this Parameter.", "args": {"type": {"description": "The type of this Parameter.  # noqa: E501"}}}, "args": ["self", "type"], "min_max_lineno": {"min_lineno": 309, "max_lineno": 320}}, "has_minimum_accepted_value": {"doc": {"long_description": "Minimum accepted value of a variable presentation (or a parameter)  # noqa: E501", "short_description": "Sets the has_minimum_accepted_value of this Parameter.", "args": {"has_minimum_accepted_value": {"description": "The has_minimum_accepted_value of this Parameter.  # noqa: E501"}}}, "args": ["self", "has_minimum_accepted_value"], "min_max_lineno": {"min_lineno": 332, "max_lineno": 343}}, "has_accepted_values": {"doc": {"long_description": "Property that constraints which values are accepted for a parameter. For example, the name of a crop can only be \"Maize\" or \"Sorghum\"  # noqa: E501", "short_description": "Sets the has_accepted_values of this Parameter.", "args": {"has_accepted_values": {"description": "The has_accepted_values of this Parameter.  # noqa: E501"}}}, "args": ["self", "has_accepted_values"], "min_max_lineno": {"min_lineno": 355, "max_lineno": 366}}, "adjusts_variable": {"doc": {"long_description": "Property that links parameter with the variable they adjust. This property can be used when parameters quantify variables without directly representing them. For example, a \"fertilizer percentage adjustment\" parameter can quantify a \"fertilizer price\" variable  # noqa: E501", "short_description": "Sets the adjusts_variable of this Parameter.", "args": {"adjusts_variable": {"description": "The adjusts_variable of this Parameter.  # noqa: E501"}}}, "args": ["self", "adjusts_variable"], "min_max_lineno": {"min_lineno": 378, "max_lineno": 389}}, "relevant_for_intervention": {"doc": {"long_description": "Description not available  # noqa: E501", "short_description": "Sets the relevant_for_intervention of this Parameter.", "args": {"relevant_for_intervention": {"description": "The relevant_for_intervention of this Parameter.  # noqa: E501"}}}, "args": ["self", "relevant_for_intervention"], "min_max_lineno": {"min_lineno": 401, "max_lineno": 412}}, "position": {"doc": {"long_description": "Position of the parameter or input/output in the model configuration. This property is needed to know how to organize the I/O of the component on execution  # noqa: E501", "short_description": "Sets the position of this Parameter.", "args": {"position": {"description": "The position of this Parameter.  # noqa: E501"}}}, "args": ["self", "position"], "min_max_lineno": {"min_lineno": 424, "max_lineno": 435}}, "id": {"doc": {"long_description": "identifier  # noqa: E501", "short_description": "Sets the id of this Parameter.", "args": {"id": {"description": "The id of this Parameter.  # noqa: E501"}}}, "args": ["self", "id"], "min_max_lineno": {"min_lineno": 447, "max_lineno": 458}}, "uses_unit": {"doc": {"long_description": "Property used to link a variable presentation or time interval to the unit they are represented in  # noqa: E501", "short_description": "Sets the uses_unit of this Parameter.", "args": {"uses_unit": {"description": "The uses_unit of this Parameter.  # noqa: E501"}}}, "args": ["self", "uses_unit"], "min_max_lineno": {"min_lineno": 470, "max_lineno": 481}}, "has_step_size": {"doc": {"long_description": "Property that determines what are the increments (step size) that are commonly used to vary a parameter. This is commonly used for automatically setting up software tests. For example, if I want to set up a model and try 30 reasonable values on a parameter, I may use the default value and the step size to create the appropriate increments. If the step size is 0.1 and the default value is 0, then I will will be able to create setups: 0, 0.1, 0.2...2.9,3  # noqa: E501", "short_description": "Sets the has_step_size of this Parameter.", "args": {"has_step_size": {"description": "The has_step_size of this Parameter.  # noqa: E501"}}}, "args": ["self", "has_step_size"], "min_max_lineno": {"min_lineno": 493, "max_lineno": 504}}, "to_dict": {"doc": {"short_description": "Returns the model properties as a dict"}, "args": ["self"], "returns": [["result"]], "min_max_lineno": {"min_lineno": 505, "max_lineno": 528}, "calls": ["six.iteritems", "getattr", "isinstance", "list", "hasattr", "map", "getattr.to_dict", "isinstance", "dict", "map", "hasattr", "x.to_dict", "getattr.items", "hasattr", "item[].to_dict"], "store_vars_calls": {"value": "getattr"}}, "to_str": {"doc": {"short_description": "Returns the string representation of the model"}, "args": ["self"], "min_max_lineno": {"min_lineno": 529, "max_lineno": 532}, "calls": ["pprint.pformat", "parameter.Parameter.to_dict"]}, "__repr__": {"doc": {"short_description": "For `print` and `pprint`"}, "args": ["self"], "min_max_lineno": {"min_lineno": 533, "max_lineno": 536}, "calls": ["parameter.Parameter.to_str"]}, "__eq__": {"doc": {"short_description": "Returns true if both objects are equal"}, "args": ["self", "other"], "min_max_lineno": {"min_lineno": 537, "max_lineno": 543}, "calls": ["isinstance"]}, "__ne__": {"doc": {"short_description": "Returns true if both objects are not equal"}, "args": ["self", "other"], "min_max_lineno": {"min_lineno": 544, "max_lineno": 547}}}}}, "is_test": false}