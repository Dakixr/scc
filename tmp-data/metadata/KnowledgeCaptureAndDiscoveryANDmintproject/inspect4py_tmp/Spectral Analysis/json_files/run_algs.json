{"file": {"path": "/Users/dakixr/Desktop/github/scc/tmp-data/metadata/KnowledgeCaptureAndDiscoveryANDmintproject/autoTS/notebooks/Methods/Spectral Analysis/run_algs.py", "fileNameBase": "run_algs", "extension": "py", "doc": {"long_description": "@author: myron", "short_description": "Created on Thu Feb 20 13:29:55 2020", "full": "Created on Thu Feb 20 13:29:55 2020\n\n@author: myron"}}, "dependencies": [{"import": "numpy", "alias": "np", "type": "external"}, {"from_module": "pyleoclim.utils", "import": "spectral", "type": "external"}, {"import": "seaborn", "alias": "sns", "type": "external"}, {"import": "matplotlib", "alias": "plt", "type": "external"}, {"from_module": "matplotlib.ticker", "import": "ScalarFormatter", "type": "external"}, {"from_module": "matplotlib.ticker", "import": "FormatStrFormatter", "type": "external"}, {"from_module": "scipy.signal", "import": "find_peaks", "type": "external"}, {"from_module": "scipy.signal", "import": "peak_widths", "type": "external"}, {"from_module": "scipy.signal", "import": "peak_prominences", "type": "external"}, {"from_module": "statistics", "import": "mean", "type": "external"}, {"from_module": "scipy.optimize", "import": "linear_sum_assignment", "type": "external"}, {"import": "itertools", "type": "external"}], "functions": {"run_periodogram": {"args": ["series", "xlim", "label", "loglog", "title", "detrend", "actual_freq", "ana_args", "peak_tol", "dist_tol"], "returns": [["fig", "res_psd", "widths"]], "min_max_lineno": {"min_lineno": 18, "max_lineno": 58}, "calls": ["pyleoclim.utils.spectral.periodogram", "seaborn.set", "matplotlib.figure", "scipy.signal.find_peaks", "scipy.signal.peak_prominences", "scipy.signal.find_peaks", "matplotlib.subplot", "plt.subplot.plot", "scipy.signal.peak_widths", "matplotlib.hlines", "plt.subplot.get_xaxis().set_major_formatter", "plt.subplot.xaxis.set_major_formatter", "plt.subplot.set_ylabel", "plt.subplot.set_xlabel", "plt.subplot.legend", "plt.subplot.spines[].set_visible", "plt.subplot.spines[].set_visible", "statistics.mean", "statistics.mean", "plt.subplot.loglog", "plt.subplot.plot", "plt.subplot.set_xlim", "plt.subplot.axvline", "matplotlib.ticker.ScalarFormatter", "matplotlib.ticker.FormatStrFormatter", "plt.subplot.get_xaxis", "len", "len"], "store_vars_calls": {"res_psd": "spectral.periodogram", "fig": "plt.figure", "ax_spec": "plt.subplot", "widths": "peak_widths"}}, "run_mtm": {"args": ["series", "xlim", "label", "loglog", "title", "detrend", "actual_freq", "ana_args", "peak_tol", "dist_tol"], "returns": [["fig", "res_psd", "widths"]], "min_max_lineno": {"min_lineno": 59, "max_lineno": 98}, "calls": ["pyleoclim.utils.spectral.mtm", "seaborn.set", "matplotlib.figure", "scipy.signal.find_peaks", "scipy.signal.peak_prominences", "statistics.mean", "scipy.signal.find_peaks", "matplotlib.subplot", "plt.subplot.plot", "scipy.signal.peak_widths", "matplotlib.hlines", "plt.subplot.get_xaxis().set_major_formatter", "plt.subplot.xaxis.set_major_formatter", "plt.subplot.set_ylabel", "plt.subplot.set_xlabel", "plt.subplot.legend", "plt.subplot.spines[].set_visible", "plt.subplot.spines[].set_visible", "plt.subplot.loglog", "plt.subplot.plot", "plt.subplot.set_xlim", "plt.subplot.axvline", "matplotlib.ticker.ScalarFormatter", "matplotlib.ticker.FormatStrFormatter", "plt.subplot.get_xaxis", "len", "len"], "store_vars_calls": {"res_psd": "spectral.mtm", "fig": "plt.figure", "prom_thresh": "mean", "ax_spec": "plt.subplot", "widths": "peak_widths"}}, "run_welch": {"args": ["series", "xlim", "label", "loglog", "title", "detrend", "ana_args", "actual_freq", "peak_tol", "dist_tol"], "returns": [["fig", "res_psd", "widths"]], "min_max_lineno": {"min_lineno": 98, "max_lineno": 137}, "calls": ["pyleoclim.utils.spectral.welch", "seaborn.set", "matplotlib.figure", "scipy.signal.find_peaks", "scipy.signal.peak_prominences", "statistics.mean", "scipy.signal.find_peaks", "matplotlib.subplot", "plt.subplot.plot", "scipy.signal.peak_widths", "matplotlib.hlines", "plt.subplot.get_xaxis().set_major_formatter", "plt.subplot.xaxis.set_major_formatter", "plt.subplot.set_ylabel", "plt.subplot.set_xlabel", "plt.subplot.legend", "plt.subplot.spines[].set_visible", "plt.subplot.spines[].set_visible", "plt.subplot.loglog", "plt.subplot.plot", "plt.subplot.set_xlim", "plt.subplot.axvline", "matplotlib.ticker.ScalarFormatter", "matplotlib.ticker.FormatStrFormatter", "plt.subplot.get_xaxis", "len", "len"], "store_vars_calls": {"res_psd": "spectral.welch", "fig": "plt.figure", "prom_thresh": "mean", "ax_spec": "plt.subplot", "widths": "peak_widths"}}, "add_noise": {"args": ["signal"], "returns": [["signal_noise"]], "min_max_lineno": {"min_lineno": 138, "max_lineno": 145}, "calls": ["numpy.random.seed", "numpy.var", "numpy.random.normal", "numpy.sqrt", "numpy.size"], "store_vars_calls": {"sig_var": "np.var", "white_noise": "np.random.normal"}}, "peak_dist": {"args": ["peak", "freq"], "min_max_lineno": {"min_lineno": 146, "max_lineno": 148}, "calls": ["abs"]}, "cost_function": {"doc": {"long_description": "2. calc cost function for num_peaks, find peaks closest to actual peak.\n3. \n#rank by correct num peaks, distance, height/width ratio\n#try instead of adding distance, try normalized mean of distances", "short_description": "1. find all peaks"}, "args": ["res_psd", "actual_freqs", "dist_tol", "peak_tol"], "returns": [["correct_num_peaks", "dists", "avg_height_width_ratio"]], "min_max_lineno": {"min_lineno": 151, "max_lineno": 187}, "calls": ["scipy.signal.find_peaks", "scipy.signal.peak_prominences", "scipy.signal.find_peaks", "numpy.asarray", "numpy.asarray", "dist().reshape", "scipy.optimize.linear_sum_assignment", "numpy.mean", "statistics.mean", "statistics.mean", "statistics.mean", "len", "len", "list", "abs", "len", "scipy.signal.peak_widths", "itertools.product", "dist", "enumerate"], "store_vars_calls": {"widths": "np.asarray", "temp_combs": "np.asarray", "cost": "dist().reshape", "dists": "np.mean", "avg_height_width_ratio": "mean"}}, "del_points": {"args": ["signal", "time", "del_percent"], "returns": [["signal", "time"]], "min_max_lineno": {"min_lineno": 188, "max_lineno": 194}, "calls": ["int", "numpy.random.choice", "numpy.delete", "numpy.delete", "range", "numpy.size", "numpy.size"], "store_vars_calls": {"n_del": "int", "del_idx": "np.random.choice", "signal": "np.delete", "time": "np.delete"}}}, "is_test": false}