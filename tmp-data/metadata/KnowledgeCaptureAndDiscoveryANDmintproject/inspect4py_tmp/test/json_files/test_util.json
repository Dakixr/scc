{"file": {"path": "/Users/dakixr/Desktop/github/scc/tmp-data/metadata/KnowledgeCaptureAndDiscoveryANDmintproject/niw/test/test_util.py", "fileNameBase": "test_util", "extension": "py"}, "dependencies": [{"from_module": "util", "import": "Util", "type": "external"}, {"import": "unittest", "type": "external"}], "classes": {"test_util": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 4, "max_lineno": 86}, "methods": {"test_getWorkflowName": {"args": ["self"], "min_max_lineno": {"min_lineno": 6, "max_lineno": 10}, "calls": ["test_util.test_util.assertEqual", "test_util.test_util.assertEqual", "test_util.test_util.assertEqual", "util.Util().getWorkflowName", "util.Util().getWorkflowName", "util.Util().getWorkflowName", "util.Util", "util.Util", "util.Util"]}, "test_createFolder": {"args": ["self"], "min_max_lineno": {"min_lineno": 11, "max_lineno": 30}, "calls": ["test_util.test_util.assertFalse", "util.Util().createFolder", "test_util.test_util.assertTrue", "test_util.test_util.assertTrue", "open().close", "test_util.test_util.assertTrue", "util.Util().createFolder", "test_util.test_util.assertTrue", "test_util.test_util.assertTrue", "os.rmdir", "os.path.exists", "os.path.exists", "os.path.exists", "util.Util", "os.listdir", "open", "os.listdir", "util.Util", "os.listdir", "os.path.join"]}, "test_findFirstQuote": {"args": ["self"], "min_max_lineno": {"min_lineno": 31, "max_lineno": 35}, "calls": ["util.Util.Util", "test_util.test_util.assertEqual", "test_util.test_util.assertEqual", "util.Util.Util.findFirstQuote", "util.Util.Util.findFirstQuote"], "store_vars_calls": {"util": "Util"}}, "test_findRealQuote": {"args": ["self"], "min_max_lineno": {"min_lineno": 36, "max_lineno": 39}, "calls": ["util.Util.Util", "test_util.test_util.assertEqual", "util.Util.Util.findRealQuote"], "store_vars_calls": {"util": "Util"}}, "test_isOpeningFile": {"args": ["self"], "min_max_lineno": {"min_lineno": 40, "max_lineno": 44}, "calls": ["util.Util.Util", "test_util.test_util.assertIs", "test_util.test_util.assertIs", "util.Util.Util.isOpeningFile", "util.Util.Util.isOpeningFile"], "store_vars_calls": {"util": "Util"}}, "test_spaces": {"args": ["self"], "min_max_lineno": {"min_lineno": 45, "max_lineno": 48}, "calls": ["test_util.test_util.assertEqual", "test_util.test_util.assertEqual", "util.Util().spaces", "util.Util().spaces", "util.Util", "util.Util"]}, "test_getFileName": {"args": ["self"], "min_max_lineno": {"min_lineno": 49, "max_lineno": 52}, "calls": ["test_util.test_util.assertEqual", "test_util.test_util.assertEqual", "util.Util().getFileName", "util.Util().getFileName", "util.Util", "util.Util"]}, "test_getMode": {"args": ["self"], "min_max_lineno": {"min_lineno": 53, "max_lineno": 57}}, "test_getBuffering": {"args": ["self"], "min_max_lineno": {"min_lineno": 58, "max_lineno": 60}}, "test_addZeros": {"args": ["self"], "min_max_lineno": {"min_lineno": 62, "max_lineno": 65}, "calls": ["test_util.test_util.assertEqual", "test_util.test_util.assertEqual", "util.Util().addZeros", "util.Util().addZeros", "util.Util", "util.Util"]}, "test_isPrinting": {"args": ["self"], "min_max_lineno": {"min_lineno": 66, "max_lineno": 73}, "calls": ["test_util.test_util.assertIs", "test_util.test_util.assertIs", "test_util.test_util.assertIs", "test_util.test_util.assertIs", "test_util.test_util.assertIs", "test_util.test_util.assertIs", "util.Util().isPrinting", "util.Util().isPrinting", "util.Util().isPrinting", "util.Util().isPrinting", "util.Util().isPrinting", "util.Util().isPrinting", "util.Util", "util.Util", "util.Util", "util.Util", "util.Util", "util.Util"]}, "test_checkForVariable": {"args": ["self"], "min_max_lineno": {"min_lineno": 74, "max_lineno": 76}}, "test_isNumber": {"args": ["self"], "min_max_lineno": {"min_lineno": 77, "max_lineno": 83}, "calls": ["test_util.test_util.assertIs", "test_util.test_util.assertIs", "test_util.test_util.assertIs", "test_util.test_util.assertIs", "test_util.test_util.assertIs", "util.Util().isNumber", "util.Util().isNumber", "util.Util().isNumber", "util.Util().isNumber", "util.Util().isNumber", "util.Util", "util.Util", "util.Util", "util.Util", "util.Util"]}, "test_inCode": {"args": ["self"], "min_max_lineno": {"min_lineno": 84, "max_lineno": 86}}}}}, "main_info": {"main_flag": 1, "main_function": "test_util.unittest.main", "type": "script"}, "is_test": true}