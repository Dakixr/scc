{"file": {"path": "/Users/dakixr/Desktop/github/scc/tmp-data/metadata/KnowledgeCaptureAndDiscoveryANDmintproject/somef/src/somef/test/test_cli.py", "fileNameBase": "test_cli", "extension": "py"}, "dependencies": [{"import": "json", "type": "external"}, {"import": "os", "type": "external"}, {"import": "unittest", "type": "external"}, {"import": "validators", "type": "external"}, {"from_module": "pathlib", "import": "Path", "type": "external"}, {"from_module": "somef", "import": "cli", "type": "external"}, {"from_module": "somef", "import": "parser_somef", "type": "external"}], "classes": {"TestCli": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 13, "max_lineno": 976}, "methods": {"test_issue_280": {"doc": {"short_description": "Checks if SOMEF fails with a non-valid URL"}, "args": ["self"], "min_max_lineno": {"min_lineno": 29, "max_lineno": 47}, "calls": ["set", "open", "set.remove", "len", "validators.url", "print", "remove_urls.append", "len"], "store_vars_calls": {"repo_set": "set"}}, "test_issue_311": {"doc": {"short_description": "Checks if codemeta export has labels defined outside codemeta"}, "args": ["self"], "min_max_lineno": {"min_lineno": 48, "max_lineno": 66}, "calls": ["somef.cli.run_cli", "open", "open.read", "open.close", "os.remove", "open.read.find"], "store_vars_calls": {"text_file": "open", "data": "text_file.read"}}, "test_issue_281": {"doc": {"short_description": "Checks if missing categories are properly added to the output JSON, when required"}, "args": ["self"], "min_max_lineno": {"min_lineno": 67, "max_lineno": 85}, "calls": ["somef.cli.run_cli", "open", "open.read", "open.close", "os.remove", "open.read.find"], "store_vars_calls": {"text_file": "open", "data": "text_file.read"}}, "test_issue_200": {"doc": {"short_description": "Tests if the hierarchical representation of headers is properly stored in the output"}, "args": ["self"], "min_max_lineno": {"min_lineno": 86, "max_lineno": 104}, "calls": ["somef.cli.run_cli", "open", "open.read", "open.close", "os.remove", "open.read.find"], "store_vars_calls": {"text_file": "open", "data": "text_file.read"}}, "test_issue_343": {"doc": {"short_description": "Assesses problems with the parser"}, "args": ["self"], "min_max_lineno": {"min_lineno": 105, "max_lineno": 123}, "calls": ["somef.cli.run_cli", "open", "open.read", "open.close", "os.remove", "open.read.find"], "store_vars_calls": {"text_file": "open", "data": "text_file.read"}}, "test_issue_355": {"doc": {"short_description": "Checks somef failures against specific repositories"}, "args": ["self"], "min_max_lineno": {"min_lineno": 124, "max_lineno": 144}, "calls": ["somef.cli.run_cli", "open", "open.read", "print", "open.close", "os.remove", "open.read.find"], "store_vars_calls": {"text_file": "open", "data": "text_file.read"}}, "test_issue_150": {"doc": {"short_description": "Codemeta export checks"}, "args": ["self"], "min_max_lineno": {"min_lineno": 145, "max_lineno": 164}, "calls": ["somef.cli.run_cli", "open", "open.read", "open.close", "os.remove", "open.read.find"], "store_vars_calls": {"text_file": "open", "data": "text_file.read"}}, "test_issue_346": {"doc": {"short_description": "Checks if acks are properly detected"}, "args": ["self"], "min_max_lineno": {"min_lineno": 165, "max_lineno": 183}, "calls": ["somef.cli.run_cli", "open", "open.read", "open.close", "os.remove", "open.read.find"], "store_vars_calls": {"text_file": "open", "data": "text_file.read"}}, "test_issue_241": {"doc": {"short_description": "Checks the detection of package distributions"}, "args": ["self"], "min_max_lineno": {"min_lineno": 184, "max_lineno": 202}, "calls": ["somef.cli.run_cli", "open", "open.read", "open.close", "os.remove", "open.read.find"], "store_vars_calls": {"text_file": "open", "data": "text_file.read"}}, "test_issue_380": {"doc": {"short_description": "Checks if parser works well against level 3 and 4 headers"}, "args": ["self"], "min_max_lineno": {"min_lineno": 203, "max_lineno": 221}, "calls": ["somef.cli.run_cli", "open", "open.read", "open.close", "os.remove", "open.read.find"], "store_vars_calls": {"text_file": "open", "data": "text_file.read"}}, "test_issue_379": {"doc": {"short_description": "Checks if a target readme works (it caused duplicate excerpts)"}, "args": ["self"], "min_max_lineno": {"min_lineno": 222, "max_lineno": 242}, "calls": ["somef.cli.run_cli", "open", "open.read", "open.close", "json.loads", "os.remove", "len"], "store_vars_calls": {"text_file": "open", "data": "text_file.read", "json_content": "json.loads"}}, "test_issue_383": {"doc": {"short_description": "Checks if the section `Contact` can be properly parsed"}, "args": ["self"], "min_max_lineno": {"min_lineno": 243, "max_lineno": 261}, "calls": ["somef.cli.run_cli", "open", "open.read", "open.close", "os.remove", "open.read.find"], "store_vars_calls": {"text_file": "open", "data": "text_file.read"}}, "test_issue_384": {"doc": {"short_description": "Assesses header extraction errors"}, "args": ["self"], "min_max_lineno": {"min_lineno": 262, "max_lineno": 280}, "calls": ["somef.cli.run_cli", "open", "open.read", "open.close", "os.remove", "open.read.find"], "store_vars_calls": {"text_file": "open", "data": "text_file.read"}}, "test_issue_378": {"doc": {"short_description": "Checks classification of a header based on what was written in upper level headers"}, "args": ["self"], "min_max_lineno": {"min_lineno": 281, "max_lineno": 306}, "calls": ["somef.cli.run_cli", "open", "open.read", "open.close", "json.loads", "os.remove", "install.keys"], "store_vars_calls": {"text_file": "open", "data": "text_file.read", "json_content": "json.loads"}}, "test_issue_378_2": {"doc": {"short_description": "Checks classification of a header based on what was written in upper level headers"}, "args": ["self"], "min_max_lineno": {"min_lineno": 307, "max_lineno": 333}, "calls": ["somef.cli.run_cli", "open", "open.read", "open.close", "json.loads", "os.remove", "install.keys"], "store_vars_calls": {"text_file": "open", "data": "text_file.read", "json_content": "json.loads"}}, "test_issue_260": {"doc": {"short_description": "Checks if colab notebooks are detected"}, "args": ["self"], "min_max_lineno": {"min_lineno": 334, "max_lineno": 352}, "calls": ["somef.cli.run_cli", "open", "open.read", "open.close", "os.remove", "open.read.find"], "store_vars_calls": {"text_file": "open", "data": "text_file.read"}}, "test_issue_319_1": {"doc": {"short_description": "Check if citation file format is recognized and returned"}, "args": ["self"], "min_max_lineno": {"min_lineno": 353, "max_lineno": 372}, "calls": ["somef.cli.run_cli", "open", "open.read", "open.close", "os.remove", "open.read.find"], "store_vars_calls": {"text_file": "open", "data": "text_file.read"}}, "test_issue_388": {"doc": {"short_description": "Test checks that ontologies are recognized appropriately"}, "args": ["self"], "min_max_lineno": {"min_lineno": 373, "max_lineno": 393}, "calls": ["somef.cli.run_cli", "open", "open.read", "json.loads", "open.close", "os.remove", "len"], "store_vars_calls": {"text_file": "open", "data": "text_file.read", "json_content": "json.loads"}}, "test_issue_319_2": {"doc": {"short_description": "Test checks that the output format of citation files is specified in the output"}, "args": ["self"], "min_max_lineno": {"min_lineno": 394, "max_lineno": 413}, "calls": ["somef.cli.run_cli", "open", "open.read", "open.close", "os.remove", "open.read.find"], "store_vars_calls": {"text_file": "open", "data": "text_file.read"}}, "test_issue_385": {"doc": {"short_description": "More checks based on parent headers"}, "args": ["self"], "min_max_lineno": {"min_lineno": 414, "max_lineno": 434}, "calls": ["somef.cli.run_cli", "open", "open.read", "open.close", "json.loads", "os.remove", "len"], "store_vars_calls": {"text_file": "open", "data": "text_file.read", "json_content": "json.loads"}}, "test_issue_398": {"doc": {"short_description": "Checks that repostatus has confidence (always 1.0)"}, "args": ["self"], "min_max_lineno": {"min_lineno": 435, "max_lineno": 456}, "calls": ["somef.cli.run_cli", "open", "open.read", "open.close", "json.loads", "os.remove", "len"], "store_vars_calls": {"text_file": "open", "data": "text_file.read", "json_content": "json.loads"}}, "test_issue_393": {"doc": {"short_description": "Checks that if a folder within a repository is passed to the tool, it does not break"}, "args": ["self"], "min_max_lineno": {"min_lineno": 457, "max_lineno": 477}, "calls": ["somef.cli.run_cli", "open", "open.read", "open.close", "json.loads", "os.remove"], "store_vars_calls": {"text_file": "open", "data": "text_file.read", "json_content": "json.loads"}}, "test_issue_314": {"doc": {"short_description": "Checks that the program can be run using only a single readme"}, "args": ["self"], "min_max_lineno": {"min_lineno": 478, "max_lineno": 499}, "calls": ["somef.cli.run_cli", "open", "open.read", "open.close", "json.loads", "os.remove"], "store_vars_calls": {"text_file": "open", "data": "text_file.read", "json_content": "json.loads"}}, "test_issue_314_1": {"doc": {"short_description": "Checks that the program can be run using only a single readme. GitHub"}, "args": ["self"], "min_max_lineno": {"min_lineno": 500, "max_lineno": 521}, "calls": ["somef.cli.run_cli", "open", "open.read", "open.close", "json.loads", "os.remove"], "store_vars_calls": {"text_file": "open", "data": "text_file.read", "json_content": "json.loads"}}, "test_issue_314_2": {"doc": {"short_description": "Checks that the program can be run using only a single readme. Gitlab"}, "args": ["self"], "min_max_lineno": {"min_lineno": 522, "max_lineno": 543}, "calls": ["somef.cli.run_cli", "open", "open.read", "open.close", "json.loads", "os.remove"], "store_vars_calls": {"text_file": "open", "data": "text_file.read", "json_content": "json.loads"}}, "test_issue_314_3": {"doc": {"short_description": "Checks that the program can be run using only a single readme. Gitlab"}, "args": ["self"], "min_max_lineno": {"min_lineno": 544, "max_lineno": 565}, "calls": ["somef.cli.run_cli", "open", "open.read", "open.close", "json.loads", "os.remove"], "store_vars_calls": {"text_file": "open", "data": "text_file.read", "json_content": "json.loads"}}, "test_issue_403": {"doc": {"short_description": "Checks that the readme returned by somef is correct"}, "args": ["self"], "min_max_lineno": {"min_lineno": 566, "max_lineno": 588}, "calls": ["somef.cli.run_cli", "open", "open.read", "open.close", "json.loads", "os.remove"], "store_vars_calls": {"text_file": "open", "data": "text_file.read", "json_content": "json.loads"}}, "test_issue_408": {"doc": {"short_description": "Checks that the documentation links (docs) are properly found"}, "args": ["self"], "min_max_lineno": {"min_lineno": 589, "max_lineno": 610}, "calls": ["somef.cli.run_cli", "open", "open.read", "open.close", "os.remove", "open.read.find"], "store_vars_calls": {"text_file": "open", "data": "text_file.read"}}, "test_issue_408_1": {"doc": {"short_description": "Checks that the documentation links (docs) are properly found"}, "args": ["self"], "min_max_lineno": {"min_lineno": 611, "max_lineno": 632}, "calls": ["somef.cli.run_cli", "open", "open.read", "open.close", "os.remove", "open.read.find"], "store_vars_calls": {"text_file": "open", "data": "text_file.read"}}, "test_issue_225_406": {"doc": {"short_description": "Checks if wiki links are detected"}, "args": ["self"], "min_max_lineno": {"min_lineno": 633, "max_lineno": 653}, "calls": ["somef.cli.run_cli", "open", "open.read", "open.close", "open.read.find", "os.remove"], "store_vars_calls": {"text_file": "open", "data": "text_file.read"}}, "test_issue_406": {"doc": {"short_description": "Test that checks whether the extracted elements in the documentation have a type"}, "args": ["self"], "min_max_lineno": {"min_lineno": 654, "max_lineno": 674}, "calls": ["somef.cli.run_cli", "open", "open.read", "open.close", "open.read.find", "os.remove"], "store_vars_calls": {"text_file": "open", "data": "text_file.read"}}, "test_issue_255": {"doc": {"short_description": "Tests if somef can detect wiki articles"}, "args": ["self"], "min_max_lineno": {"min_lineno": 675, "max_lineno": 695}, "calls": ["somef.cli.run_cli", "open", "open.read", "open.close", "os.remove", "open.read.find"], "store_vars_calls": {"text_file": "open", "data": "text_file.read"}}, "test_issue_255_1": {"doc": {"short_description": "Tests if somef can detect wiki articles"}, "args": ["self"], "min_max_lineno": {"min_lineno": 696, "max_lineno": 716}, "calls": ["somef.cli.run_cli", "open", "open.read", "open.close", "os.remove", "open.read.find"], "store_vars_calls": {"text_file": "open", "data": "text_file.read"}}, "test_issue_375": {"doc": {"short_description": "Checks that svg badges are not captured as images"}, "args": ["self"], "min_max_lineno": {"min_lineno": 717, "max_lineno": 737}, "calls": ["somef.cli.run_cli", "open", "open.read", "open.close", "os.remove", "open.read.find"], "store_vars_calls": {"text_file": "open", "data": "text_file.read"}}, "test_issue_136": {"doc": {"short_description": "Tests that checks if the DOI is extracted from a reference publication in somef"}, "args": ["self"], "min_max_lineno": {"min_lineno": 738, "max_lineno": 758}, "calls": ["somef.cli.run_cli", "open", "open.read", "open.close", "os.remove", "open.read.find"], "store_vars_calls": {"text_file": "open", "data": "text_file.read"}}, "test_issue_136_1": {"doc": {"short_description": "Tests that checks if the DOI is extracted from a reference publication in somef"}, "args": ["self"], "min_max_lineno": {"min_lineno": 759, "max_lineno": 779}, "calls": ["somef.cli.run_cli", "open", "open.read", "open.close", "os.remove", "open.read.find"], "store_vars_calls": {"text_file": "open", "data": "text_file.read"}}, "test_issue_353": {"doc": {"short_description": "Tests that somef can successfully download a given github repo (reportedly failing)"}, "args": ["self"], "min_max_lineno": {"min_lineno": 780, "max_lineno": 800}, "calls": ["somef.cli.run_cli", "open", "open.read", "open.close", "os.remove", "open.read.find"], "store_vars_calls": {"text_file": "open", "data": "text_file.read"}}, "test_issue_366": {"doc": {"short_description": "Checks if somef can detect Docker compose files"}, "args": ["self"], "min_max_lineno": {"min_lineno": 801, "max_lineno": 821}, "calls": ["somef.cli.run_cli", "open", "open.read", "open.close", "os.remove", "open.read.find"], "store_vars_calls": {"text_file": "open", "data": "text_file.read"}}, "test_issue_417": {"doc": {"short_description": "Checks for different codemeta errors"}, "args": ["self"], "min_max_lineno": {"min_lineno": 822, "max_lineno": 844}, "calls": ["somef.cli.run_cli", "open", "open.read", "open.close", "json.loads", "os.remove"], "store_vars_calls": {"text_file": "open", "data": "text_file.read", "json_content": "json.loads"}}, "test_issue_382": {"doc": {"short_description": "Checks a given github repo works fine (contact section)"}, "args": ["self"], "min_max_lineno": {"min_lineno": 845, "max_lineno": 867}, "calls": ["somef.cli.run_cli", "open", "open.read", "open.close", "json.loads", "os.remove"], "store_vars_calls": {"text_file": "open", "data": "text_file.read", "json_content": "json.loads"}}, "test_issue_428": {"doc": {"short_description": "Checks a given github repo works fine (contact section)"}, "args": ["self"], "min_max_lineno": {"min_lineno": 868, "max_lineno": 888}, "calls": ["somef.cli.run_cli", "open", "open.read", "open.close", "os.remove", "open.read.find"], "store_vars_calls": {"text_file": "open", "data": "text_file.read"}}, "test_issue_443": {"args": ["self"], "min_max_lineno": {"min_lineno": 889, "max_lineno": 910}, "calls": ["somef.cli.run_cli", "open", "open.read", "open.close", "json.loads", "os.remove"], "store_vars_calls": {"text_file": "open", "data": "text_file.read", "json_content": "json.loads"}}, "test_issue_443_2": {"args": ["self"], "min_max_lineno": {"min_lineno": 911, "max_lineno": 932}, "calls": ["somef.cli.run_cli", "open", "open.read", "open.close", "json.loads", "os.remove"], "store_vars_calls": {"text_file": "open", "data": "text_file.read", "json_content": "json.loads"}}, "test_issue_443_3": {"args": ["self"], "min_max_lineno": {"min_lineno": 933, "max_lineno": 954}, "calls": ["somef.cli.run_cli", "open", "open.read", "open.close", "json.loads", "os.remove"], "store_vars_calls": {"text_file": "open", "data": "text_file.read", "json_content": "json.loads"}}, "test_issue_457": {"args": ["self"], "min_max_lineno": {"min_lineno": 955, "max_lineno": 976}, "calls": ["somef.cli.run_cli", "open", "open.read", "open.close", "json.loads", "os.remove"], "store_vars_calls": {"text_file": "open", "data": "text_file.read", "json_content": "json.loads"}}}}}, "is_test": true}