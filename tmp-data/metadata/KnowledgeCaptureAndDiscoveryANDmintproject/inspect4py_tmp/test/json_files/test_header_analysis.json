{"file": {"path": "/Users/dakixr/Desktop/github/scc/tmp-data/metadata/KnowledgeCaptureAndDiscoveryANDmintproject/somef/src/somef/test/test_header_analysis.py", "fileNameBase": "test_header_analysis", "extension": "py"}, "dependencies": [{"import": "json", "type": "external"}, {"import": "os", "type": "external"}, {"import": "unittest", "type": "external"}, {"from_module": "pathlib", "import": "Path", "type": "external"}, {"from_module": "header_analysis", "import": "extract_header_content", "type": "external"}, {"from_module": "header_analysis", "import": "extract_categories_using_headers", "type": "external"}, {"from_module": "header_analysis", "import": "extract_bash_code", "type": "external"}, {"from_module": "somef", "import": "cli", "type": "external"}], "classes": {"TestHeaderAnalysis": {"extend": ["unittest.TestCase"], "min_max_lineno": {"min_lineno": 14, "max_lineno": 99}, "methods": {"test_extract_header_content_hash": {"doc": {"short_description": "Test to check if the markdown parser works against hash headers"}, "args": ["self"], "min_max_lineno": {"min_lineno": 16, "max_lineno": 23}, "calls": ["open", "data_file.read", "header_analysis.extract_header_content", "print", "len"], "store_vars_calls": {"text": "data_file.read"}}, "test_extract_header_content_hash_complex": {"doc": {"short_description": "Test to check if the markdown parser works in a more complex setting"}, "args": ["self"], "min_max_lineno": {"min_lineno": 24, "max_lineno": 32}, "calls": ["open", "data_file.read", "header_analysis.extract_header_content", "print", "len"], "store_vars_calls": {"text": "data_file.read"}}, "test_extract_header_content_underline": {"doc": {"short_description": "Parser checks in case header are underlined (e.g., '___')"}, "args": ["self"], "min_max_lineno": {"min_lineno": 33, "max_lineno": 40}, "calls": ["open", "data_file.read", "header_analysis.extract_header_content", "print", "len"], "store_vars_calls": {"text": "data_file.read"}}, "test_extract_categories_using_headers": {"doc": {"short_description": "More markdown checks to see if all categories are recognized."}, "args": ["self"], "min_max_lineno": {"min_lineno": 41, "max_lineno": 48}, "calls": ["open", "data_file.read", "header_analysis.extract_categories_using_headers", "len"], "store_vars_calls": {"file_text": "data_file.read"}}, "test_extract_bash_code": {"doc": {"short_description": "Test to check if bash code can be detected in readme files"}, "args": ["self"], "min_max_lineno": {"min_lineno": 49, "max_lineno": 55}, "calls": ["open", "data_file.read", "header_analysis.extract_bash_code", "len"], "store_vars_calls": {"text": "data_file.read", "output": "extract_bash_code"}}, "test_issue_232": {"doc": {"short_description": "Test to avoid a bug in header analysis, where no installation instructions were detected"}, "args": ["self"], "min_max_lineno": {"min_lineno": 56, "max_lineno": 68}, "calls": ["open", "data_file.read", "header_analysis.extract_header_content", "print", "open", "data_file.read", "header_analysis.extract_header_content", "print", "len", "len"], "store_vars_calls": {"file_text": "data_file.read"}}, "test_issue_237": {"doc": {"short_description": "Test to check excerpt division and classification"}, "args": ["self"], "min_max_lineno": {"min_lineno": 69, "max_lineno": 78}, "calls": ["open", "data_file.read", "header_analysis.extract_categories_using_headers", "element.split", "print", "len"], "store_vars_calls": {"file_text": "data_file.read", "split": "element.split"}}, "test_issue_313": {"doc": {"short_description": "Test to see if the original title of a section is returned"}, "args": ["self"], "min_max_lineno": {"min_lineno": 79, "max_lineno": 88}, "calls": ["open", "data_file.read", "header_analysis.extract_categories_using_headers", "json.get", "elem.get"], "store_vars_calls": {"file_text": "data_file.read", "element": "json.get", "title": "elem.get"}}, "test_issue_425": {"doc": {"short_description": "Checks that the confidence value of fields extracted using header extraction technique is 1.0"}, "args": ["self"], "min_max_lineno": {"min_lineno": 89, "max_lineno": 99}, "calls": ["open", "data_file.read", "header_analysis.extract_categories_using_headers", "json.get", "elem.get", "print"], "store_vars_calls": {"file_text": "data_file.read", "element": "json.get", "confidence": "elem.get"}}}}}, "is_test": true}