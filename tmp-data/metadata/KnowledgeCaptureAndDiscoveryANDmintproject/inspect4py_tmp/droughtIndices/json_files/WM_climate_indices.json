{"file": {"path": "/Users/dakixr/Desktop/github/scc/tmp-data/metadata/KnowledgeCaptureAndDiscoveryANDmintproject/droughtIndices/WM_climate_indices.py", "fileNameBase": "WM_climate_indices", "extension": "py", "doc": {"long_description": "@author: deborahkhider\n@description: Climate indices (drought) for DARPA World's modeler program", "short_description": "Created on Mon Aug 19 17:15:34 2019", "full": "Created on Mon Aug 19 17:15:34 2019\n\n@author: deborahkhider\n@description: Climate indices (drought) for DARPA World's modeler program"}}, "dependencies": [{"import": "xarray", "alias": "xr", "type": "external"}, {"import": "pandas", "alias": "pd", "type": "external"}, {"import": "numpy", "alias": "np", "type": "external"}, {"from_module": "climate_indices", "import": "compute", "type": "external"}, {"from_module": "climate_indices", "import": "indices", "type": "external"}, {"import": "uuid", "type": "external"}, {"from_module": "datetime", "import": "date", "type": "external"}, {"import": "datetime", "type": "external"}, {"import": "os", "type": "external"}, {"import": "glob", "type": "external"}, {"from_module": "calendar", "import": "monthrange", "type": "external"}, {"import": "sys", "type": "external"}, {"import": "ast", "type": "external"}, {"import": "cartopy", "alias": "ccrs", "type": "external"}, {"import": "cartopy", "alias": "cfeature", "type": "external"}, {"import": "matplotlib", "alias": "plt", "type": "external"}, {"import": "imageio", "type": "external"}, {"from_module": "cartopy.mpl.gridliner", "import": "LONGITUDE_FORMATTER", "type": "external"}, {"from_module": "cartopy.mpl.gridliner", "import": "LATITUDE_FORMATTER", "type": "external"}, {"import": "json", "type": "external"}, {"import": "warnings", "type": "external"}, {"import": "matplotlib", "alias": "cm", "type": "external"}, {"import": "cftime", "type": "external"}], "functions": {"openCHIRPS": {"doc": {"short_description": "Open CHIRPS dataset and returns the data", "args": {"dataset_name": {"description": "The name of the CHIRPS dataset", "type_name": "str", "is_optional": false}, "bounding_box": {"description": "lat/lon to cut to appropriate size", "type_name": "list", "is_optional": false}, "globe": {"description": "If considering the full spatial coverage", "type_name": "bool", "is_optional": false}}, "returns": {"description": "da_precip (Xarray DataArray): A dataArray of precipitation", "is_generator": false}}, "args": ["dataset_name", "bounding_box", "globe"], "returns": [["da_precip"]], "min_max_lineno": {"min_lineno": 34, "max_lineno": 58}, "calls": ["xarray.open_dataset", "warnings.warn", "xr.open_dataset.sel", "slice", "slice"], "store_vars_calls": {"data": "xr.open_dataset", "p_": "data.sel"}}, "openGLDAS": {"doc": {"short_description": "Open GLDAS datasets and return precipitation and temperature", "args": {"dataset_name": {"description": "The name of the GLDAS folder", "type_name": "str", "is_optional": false}, "bounding_box": {"description": "lat/lon to cut to appropriate size", "type_name": "list", "is_optional": false}, "globe": {"description": "If considering the full spatial coverage", "type_name": "bool", "is_optional": false}, "periodicity": {"description": "The temporal resolution of the input data. Useful to\nknow how the data is organized.", "type_name": "str", "is_optional": false}, "netcdf": {"description": "Whether the input data is in netCDF format.", "type_name": "bool", "is_optional": false}}, "returns": {"description": "da_precip (Xarra DataArray): A dataArray of precipitation\nda_temp (Xarra DataArray): A dataArray of temperature", "is_generator": false}}, "args": ["dataset_name", "bounding_box", "globe", "periodicity", "netcdf"], "returns": [["da_precip", "da_temp"]], "min_max_lineno": {"min_lineno": 59, "max_lineno": 117}, "calls": ["pandas.to_datetime", "pd.to_datetime.strftime", "file_names.sort", "xarray.open_mfdataset", "xarray.open_dataset", "warnings.warn", "xr.open_dataset.sel", "days.append", "os.path.join", "glob.glob", "slice", "slice", "calendar.monthrange", "os.listdir", "os.path.isdir", "file_names.append", "int", "int", "os.path.join", "item.split", "item.split"], "store_vars_calls": {"time": "pd.to_datetime", "v": "time.strftime", "data": "xr.open_dataset", "p_": "data.sel", "nc_files": "glob.glob"}}, "openFLDAS": {"doc": {"short_description": "Open FLDAS datasets and return precipitation and temperature", "args": {"dataset_name": {"description": "The name of the GLDAS folder", "type_name": "str", "is_optional": false}, "bounding_box": {"description": "lat/lon to cut to appropriate size", "type_name": "list", "is_optional": false}, "globe": {"description": "If considering the full spatial coverage", "type_name": "bool", "is_optional": false}, "periodicity": {"description": "The temporal resolution of the input data. Useful to\nknow how the data is organized.", "type_name": "str", "is_optional": false}, "netcdf": {"description": "Whether the input data is in netCDF format.", "type_name": "bool", "is_optional": false}}, "returns": {"description": "da_precip (Xarra DataArray): A dataArray of precipitation\nda_temp (Xarra DataArray): A dataArray of temperature", "is_generator": false}}, "args": ["dataset_name", "bounding_box", "globe", "periodicity", "netcdf"], "returns": [["da_precip", "da_temp"]], "min_max_lineno": {"min_lineno": 118, "max_lineno": 175}, "calls": ["pandas.to_datetime", "pd.to_datetime.strftime", "file_names.sort", "xarray.open_mfdataset", "xarray.open_dataset", "warnings.warn", "xr.open_dataset.sel", "days.append", "os.path.join", "glob.glob", "slice", "slice", "calendar.monthrange", "os.listdir", "os.path.isdir", "file_names.append", "int", "int", "os.path.join", "item.split", "item.split"], "store_vars_calls": {"time": "pd.to_datetime", "v": "time.strftime", "data": "xr.open_dataset", "p_": "data.sel", "nc_files": "glob.glob"}}, "openECMWF": {"doc": {"short_description": "Open ECMWF datasets and return precipitation and temperature", "args": {"dataset_name": {"description": "The name of the ECMWF file", "type_name": "str", "is_optional": false}, "bounding_box": {"description": "lat/lon to cut to appropriate size", "type_name": "list", "is_optional": false}, "globe": {"description": "If considering the full spatial coverage", "type_name": "bool", "is_optional": false}}, "returns": {"description": "da_precip (Xarra DataArray): A dataArray of precipitation\nda_temp (Xarra DataArray): A dataArray of temperature", "is_generator": false}}, "args": ["dataset_name", "bounding_box", "globe"], "returns": [["da_precip", "da_temp"]], "min_max_lineno": {"min_lineno": 176, "max_lineno": 215}, "calls": ["xarray.open_dataset", "data.reindex.reindex", "warnings.warn", "data.reindex.sel", "list", "reversed", "slice", "slice"], "store_vars_calls": {"data": "data.reindex", "p_": "data.sel"}}, "openCESM": {"doc": {"short_description": "Open CESM data to calculate the indices", "args": {"dataset_name": {"description": "Name of the dataset", "type_name": "str", "is_optional": false}, "bounding_box": {"description": "A list containing [min_lon, max_lon, min_lat, max_lat].", "type_name": "list", "is_optional": false}, "globe": {"description": "Whether to use the entire globe.", "type_name": "bool", "is_optional": false}}, "returns": {"description": "The Xarray Dataarray object containing the precipitation data", "type_name": "xarray dataarray", "is_generator": false, "return_name": "da_precip"}}, "args": ["dataset_name", "bounding_box", "globe"], "returns": [["da_precip", "da_temp"]], "min_max_lineno": {"min_lineno": 216, "max_lineno": 276}, "calls": ["xarray.open_dataset", "da_precip.assign_coords.assign_coords", "da_temp.assign_coords.assign_coords", "warnings.warn", "xr.open_dataset.sel", "t.append", "days.append", "time_list.append", "item.strftime", "item.isoformat", "slice", "slice", "calendar.monthrange", "int"], "store_vars_calls": {"data": "xr.open_dataset", "da_precip": "da_precip.assign_coords", "da_temp": "da_temp.assign_coords", "p_": "data.sel"}}, "SPI": {"doc": {"long_description": "This function uses the SPI calculation from the climate indices package", "short_description": "Calculate SPI from precipitation", "args": {"da_precip": {"description": "A dataArray of precipitation", "type_name": "Xarray DataArray", "is_optional": false}, "distribution": {"description": "The distribution used to fit the data. Default is\n'gamma'. To use a Pearson Type III distribution, enter 'pearson'", "type_name": "str", "is_optional": false}, "periodicity": {"description": "Either 'monthly' or 'daily'", "type_name": "str", "is_optional": false}, "scales": {"description": "The timescales on which the index is computed, either 6 or 12.\nDefault is 6.", "type_name": "int", "is_optional": false}, "data_start_year": {"description": "Year to start computing  SPI - Default is first year in the data"}, "data_end_year": {"description": "Year to stop computing  SPI - Default is first year in the data"}, "calibration_start_year": {"description": "Start year for the calibration - Defauls is first year in the data"}, "calibration_end_year": {"description": "End year for the calibration - Default is to set a 30-year  period,\nor the full dataset if shorter than 30 years"}}, "returns": {"description": "ds_spi (Xarray DataArray): SPI index  DataArray\ninfo (dict): Dictionary containing relevant information about the calib period", "is_generator": false}}, "args": ["da_precip", "distribution", "periodicity", "scales", "data_start_year", "data_end_year", "calibration_start_year", "calibration_end_year"], "returns": [["ds_spi", "info"]], "min_max_lineno": {"min_lineno": 280, "max_lineno": 399}, "calls": ["isinstance", "da_precip.load", "xarray.apply_ufunc", "da_spi.unstack.unstack", "da_spi.unstack.sel", "da_spi.sel.to_dataset", "len", "da_precip.squeeze", "da_precip.stack().groupby", "len", "len", "int", "int", "int", "da_precip.stack().groupby", "str", "str", "str", "str", "slice", "numpy.min", "print", "int", "numpy.max", "print", "int", "numpy.min", "print", "int", "int", "print", "da_precip.stack", "da_precip.stack().groupby", "KeyError", "str", "str", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "int", "da_precip.stack", "numpy.max", "da_precip.stack"], "store_vars_calls": {"da_spi": "da_spi.unstack", "da_spi_cut": "da_spi.sel", "ds_spi": "da_spi_cut.to_dataset", "da_precip_groupby": "da_precip.stack().groupby", "data_start_year": "int", "data_end_year": "int", "calibration_start_year": "int", "calibration_end_year": "int"}}, "PET": {"doc": {"long_description": "This function uses the PET calculation from the climate indices package.\nMonhtly only.\nUses Thornthwaite equation.", "short_description": "Calculate PET from temperature", "args": {"da_temp": {"description": "A dataArray of temperature", "type_name": "Xarray DataArray", "is_optional": false}, "data_start_year": {"description": "Year to start computing  SPI - Default is first year in the data"}, "data_end_year": {"description": "Year to stop computing  SPI - Default is first year in the data"}}, "returns": {"description": "ds_pet (Xarray DataSet): PET index (mm/month)\nda_pet (Xarray DataArray): PET index for full length of data (mm/month). To use with SPEI function\ninfo (dict): Dictionary containing relevant information", "is_generator": false}}, "args": ["da_temp", "data_start_year", "data_end_year"], "returns": [["ds_pet", "da_pet", "info"]], "min_max_lineno": {"min_lineno": 401, "max_lineno": 490}, "calls": ["da_temp.sel", "da_temp.sel.load", "xarray.apply_ufunc", "da_pet_un.sel.unstack", "da_pet.unstack.sel", "da_pet_un.sel.to_dataset", "int", "int", "numpy.array", "int", "print", "int", "int", "int", "print", "int", "int", "str", "str", "len", "da_temp.sel.stack().groupby", "numpy.min", "print", "int", "numpy.max", "print", "int", "numpy.array", "slice", "da_temp.sel.stack().groupby", "str", "str", "slice", "numpy.min", "numpy.max", "numpy.array", "KeyError", "da_temp.sel.stack", "da_temp.sel.stack().groupby", "KeyError", "da_temp.sel.stack", "da_temp.sel.stack"], "store_vars_calls": {"da_temp_cut": "da_temp.sel", "da_pet": "da_pet_un.sel", "da_pet_un": "da_pet.unstack", "ds_pet": "da_pet.to_dataset", "data_start_year": "int", "data_end_year": "int", "lat": "np.array", "start_year": "int", "end_year": "int", "da_temp_groupby": "da_temp_cut.stack().groupby"}}, "SPEI": {"doc": {"long_description": "This function uses the SPI calculation from the climate indices package", "short_description": "Calculate SPI from precipitation", "args": {"da_precip": {"description": "A dataArray of precipitation", "type_name": "Xarray DataArray", "is_optional": false}, "da_temp": {"description": "A datarray of temperature values", "type_name": "Xarray DataArray", "is_optional": false}, "distribution": {"description": "The distribution used to fit the data. Default is\n'gamma'. To use a Pearson Type III distribution, enter 'pearson'", "type_name": "str", "is_optional": false}, "periodicity": {"description": "Either 'monthly' or 'daily'", "type_name": "str", "is_optional": false}, "scales": {"description": "The timescales on which the index is computed, either 6 or 12.\nDefault is 6.", "type_name": "int", "is_optional": false}, "data_start_year": {"description": "Year to start computing  SPI - Default is first year in the data"}, "data_end_year": {"description": "Year to stop computing  SPI - Default is first year in the data"}, "calibration_start_year": {"description": "Start year for the calibration - Defauls is first year in the data"}, "calibration_end_year": {"description": "End year for the calibration - Default is to set a 30-year  period,\nor the full dataset if shorter than 30 years"}}, "returns": {"description": "ds_spi (Xarray DataSet): SPEI index  DataArray\ninfo (dict): Dictionary containing relevant information about the calib period", "is_generator": false}}, "args": ["da_precip", "da_temp", "distribution", "periodicity", "scales", "data_start_year", "data_end_year", "calibration_start_year", "calibration_end_year"], "returns": [["ds_spei", "info"]], "min_max_lineno": {"min_lineno": 491, "max_lineno": 615}, "calls": ["WM_climate_indices.PET", "numpy.max", "numpy.min", "da_precip.sel", "da_precip.sel.load", "xarray.apply_ufunc", "da_spei.unstack.unstack", "da_spei.unstack.sel", "da_spei.sel.to_dataset", "int", "int", "int", "str", "str", "len", "da_precip.sel.stack().groupby", "da_pet.stack().groupby", "str", "str", "numpy.min", "print", "int", "numpy.max", "print", "int", "numpy.min", "print", "int", "int", "print", "int", "int", "int", "int", "slice", "da_precip.sel.stack().groupby", "da_pet.stack().groupby", "slice", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "int", "numpy.min", "numpy.min", "numpy.max", "numpy.max", "da_precip.sel.stack", "da_pet.stack", "da_precip.sel.stack().groupby", "da_pet.stack().groupby", "KeyError", "numpy.max", "da_precip.sel.stack", "da_pet.stack", "da_precip.sel.stack", "da_pet.stack"], "store_vars_calls": {"min_year": "np.max", "max_year": "np.min", "da_precip_cut": "da_precip.sel", "da_spei": "da_spei.unstack", "da_spei_cut": "da_spei.sel", "ds_spei": "da_spei_cut.to_dataset", "data_start_year": "int", "data_end_year": "int", "calibration_start_year": "int", "da_precip_groupby": "da_precip_cut.stack().groupby", "da_pet_groupby": "da_pet.stack().groupby", "calibration_end_year": "int"}}, "to_netcdfMint": {"doc": {"short_description": "Returns a MINT-ready netcdf file with SPI values", "args": {"ds": {"description": "A dataset of drought indices", "type_name": "Xarray DataSet", "is_optional": false}, "info": {"description": "Dictionary containing pertinent information frpm calculation", "type_name": "dict", "is_optional": false}, "dir_out": {"description": "The out directory to write the netcdf files", "type_name": "str", "is_optional": false}, "dynamic_name": {"description": "Whether to generate a unique name dynamically using parameter settings. Otherwise returns, results.nc", "type_name": "bool", "is_optional": false}, "param_list": {"description": "list of parameters used for the runs", "type_name": "list", "is_optional": false}}, "returns": {"description": "ds (xarray dataset): Metadata complete dataset (important for viz)\nNetCDF ouput in MINT Format", "is_generator": false}}, "args": ["ds", "info", "dataset_type", "dir_out", "dynamic_name"], "returns": [["ds"]], "min_max_lineno": {"min_lineno": 617, "max_lineno": 736}, "calls": ["str", "str", "str", "str", "str", "ds.to_netcdf", "os.path.isdir", "os.makedirs", "uuid.uuid4", "datetime.date.today", "datetime.date.today", "float", "float", "float", "float", "float", "float", "list", "ds.latitude.min", "ds.latitude.max", "ds.longitude.min", "ds.longitude.max", "float", "float", "float", "float", "ds.spi.min", "ds.spi.max", "float", "float", "list", "str", "ds.lat.min", "ds.lat.max", "ds.lon.min", "ds.lon.max", "float", "float", "float", "float", "ds.pet.min", "ds.pet.max", "float", "float", "list", "ds.Y.min", "ds.Y.max", "ds.X.min", "ds.X.max", "ds.spei.min", "ds.spei.max", "str", "ds.attrs[].split", "str", "ds.attrs[].split", "str", "str", "str"]}, "visualizeDroughtIndex": {"doc": {"short_description": "Visualization of drought index", "args": {"ds": {"description": "the dataset containing the index", "type_name": "xarray dataset", "is_optional": false}, "dir_out": {"description": "the output directory for the visualization", "type_name": "str", "is_optional": false}, "dynamic_name": {"description": "Whether to generate a unique name dynamically using parameter settings. Otherwise returns, results.mp4", "type_name": "bool", "is_optional": false}}}, "args": ["ds", "dir_out", "dynamic_name"], "min_max_lineno": {"min_lineno": 739, "max_lineno": 816}, "calls": ["cartopy.PlateCarree", "numpy.size", "list", "imageio.get_writer.close", "numpy.arange", "list", "numpy.arange", "numpy.linspace", "matplotlib.subplots", "matplotlib.axes", "plt.axes.add_feature", "plt.axes.add_feature", "plt.axes.add_feature", "plt.axes.gridlines", "filenames.append", "matplotlib.savefig", "matplotlib.close", "imageio.get_writer", "imageio.get_writer", "imageio.get_writer.append_data", "ds.data_vars.keys", "os.path.isdir", "os.makedirs", "os.path.isdir", "os.makedirs", "os.path.isdir", "os.makedirs", "os.path.isdir", "os.makedirs", "float", "float", "xarray.apply_ufunc().all", "imageio.imread", "ds[].min", "ds[].max", "ds[].isel().plot.contourf", "ds[].isel().plot.contourf", "cartopy.PlateCarree", "xarray.apply_ufunc", "str", "str", "ds[].isel", "cartopy.PlateCarree", "cartopy.PlateCarree", "ds[].isel", "ds[].isel"], "store_vars_calls": {"proj": "ccrs.PlateCarree", "idx": "np.size", "count": "list", "levels": "np.linspace", "ax": "plt.axes", "gl": "ax.gridlines", "writer": "imageio.get_writer"}}}, "main_info": {"main_flag": 1, "type": "script"}, "is_test": true}