{"file": {"path": "/Users/dakixr/Desktop/github/scc/tmp-data/metadata/KnowledgeCaptureAndDiscoveryANDmintproject/P4ML-UI/dsbox-ta2/python/dsbox/executer/executionhelper.py", "fileNameBase": "executionhelper", "extension": "py"}, "dependencies": [{"import": "os", "type": "external"}, {"import": "sys", "type": "external"}, {"import": "json", "type": "external"}, {"import": "copy", "type": "external"}, {"import": "time", "type": "external"}, {"import": "uuid", "type": "external"}, {"import": "shutil", "type": "external"}, {"import": "os", "type": "external"}, {"import": "tempfile", "type": "external"}, {"import": "numpy", "alias": "np", "type": "external"}, {"import": "pandas", "alias": "pd", "type": "external"}, {"from_module": "primitive_interfaces.base", "import": "PrimitiveBase", "type": "external"}, {"from_module": "primitive_interfaces.generator", "import": "GeneratorPrimitiveBase", "type": "external"}, {"from_module": "primitive_interfaces.supervised_learning", "import": "SupervisedLearnerPrimitiveBase", "type": "external"}, {"from_module": "primitive_interfaces.unsupervised_learning", "import": "UnsupervisedLearnerPrimitiveBase", "type": "external"}, {"from_module": "sklearn.externals", "import": "joblib", "type": "external"}, {"from_module": "sklearn.model_selection", "import": "KFold", "type": "external"}, {"from_module": "dsbox.schema.dataset_schema", "import": "VariableFileType", "type": "external"}, {"from_module": "dsbox.schema.profile_schema", "import": "DataProfileType", "alias": "dpt", "type": "external"}, {"from_module": "dsbox.schema.problem_schema", "import": "TaskType", "type": "external"}, {"from_module": "dsbox.executer.execution", "import": "Execution", "type": "external"}, {"from_module": "dsbox.executer", "import": "pickle_patch", "type": "external"}, {"import": "scipy", "type": "external"}, {"import": "stopit", "type": "external"}, {"import": "inspect", "type": "external"}, {"import": "importlib", "type": "external"}, {"import": "traceback", "type": "external"}, {"from_module": "builtins", "import": "range", "type": "external"}, {"from_module": "dsbox.schema.data_profile", "import": "DataProfile", "type": "external"}, {"from_module": "sklearn.linear_model", "import": "LinearRegression", "type": "external"}, {"from_module": "sklearn.linear_model", "import": "LogisticRegression", "type": "external"}, {"from_module": "sklearn.metrics", "import": "make_scorer", "type": "external"}], "classes": {"ExecutionHelper": {"extend": ["object"], "min_max_lineno": {"min_lineno": 43, "max_lineno": 816}, "methods": {"__init__": {"args": ["self", "problem", "data_manager"], "min_max_lineno": {"min_lineno": 47, "max_lineno": 51}, "calls": ["dsbox.executer.execution.Execution"], "store_vars_calls": {"self.e": "Execution"}}, "instantiate_primitive_imputation": {"args": ["self", "primitive", "imputation"], "returns": [["executable"]], "min_max_lineno": {"min_lineno": 52, "max_lineno": 76}, "calls": ["print", "print", "executionhelper.ExecutionHelper.e.execute", "primitive.cls.rsplit", "importlib.import_module", "getattr", "getattr."], "store_vars_calls": {"executable": "PrimitiveClass", "module": "importlib.import_module", "PrimitiveClass": "getattr"}}, "instantiate_primitive": {"args": ["self", "primitive"], "returns": [["executable"]], "min_max_lineno": {"min_lineno": 78, "max_lineno": 115}, "calls": ["primitive.getInitKeywordArgs", "primitive.getInitArgs", "isinstance", "executionhelper.ExecutionHelper._process_kwargs", "executionhelper.ExecutionHelper._process_args", "executionhelper.ExecutionHelper.e.execute", "primitive.cls.rsplit", "primitive.getInitKeywordArgs", "primitive.getInitArgs", "importlib.import_module", "getattr", "getattr.", "sys.stderr.write", "traceback.print_exc"], "store_vars_calls": {"primitive.unified_interface": "isinstance", "kwargs": "self._process_kwargs", "args": "self._process_args", "executable": "PrimitiveClass", "module": "importlib.import_module", "PrimitiveClass": "getattr"}}, "execute_primitive": {"args": ["self", "primitive", "df", "df_lbl", "cur_profile"], "min_max_lineno": {"min_lineno": 117, "max_lineno": 173}, "calls": ["stopit.threading_timeoutable", "time.time", "time.time", "primitive.pipeline.notifyChanges", "pandas.DataFrame", "executionhelper.ExecutionHelper.instantiate_primitive", "executionhelper.ExecutionHelper._profile_matches_precondition", "col.format", "executionhelper.ExecutionHelper._execute_primitive", "sys.stderr.write", "traceback.print_exc", "executionhelper.ExecutionHelper._profile_matches_precondition", "executionhelper.ExecutionHelper.instantiate_primitive", "executionhelper.ExecutionHelper._execute_primitive", "df[].fillna"], "store_vars_calls": {"primitive.start_time": "time.time", "primitive.end_time": "time.time", "primitive.executables": "self.instantiate_primitive", "colname": "col.format", "executable": "self.instantiate_primitive"}}, "execute_primitive_imputation": {"args": ["self", "primitive", "df", "df_lbl", "imputation", "cur_profile"], "min_max_lineno": {"min_lineno": 174, "max_lineno": 230}, "calls": ["time.time", "time.time", "primitive.pipeline.notifyChanges", "pandas.DataFrame", "executionhelper.ExecutionHelper._profile_matches_precondition", "col.format", "executionhelper.ExecutionHelper.instantiate_primitive_imputation", "executionhelper.ExecutionHelper.instantiate_primitive", "executionhelper.ExecutionHelper._execute_primitive", "sys.stderr.write", "traceback.print_exc", "executionhelper.ExecutionHelper._profile_matches_precondition", "executionhelper.ExecutionHelper.instantiate_primitive", "executionhelper.ExecutionHelper._execute_primitive", "df[].fillna"], "store_vars_calls": {"primitive.start_time": "time.time", "primitive.end_time": "time.time", "colname": "col.format", "primitive.executables": "self.instantiate_primitive", "executable": "self.instantiate_primitive"}}, "test_execute_primitive": {"args": ["self", "primitive", "df"], "min_max_lineno": {"min_lineno": 232, "max_lineno": 273}, "calls": ["stopit.threading_timeoutable", "pandas.DataFrame", "executionhelper.ExecutionHelper._execute_primitive", "col.format", "executionhelper.ExecutionHelper.instantiate_primitive", "primitive.executables.keys", "executionhelper.ExecutionHelper.instantiate_primitive", "primitive.executables.get", "executionhelper.ExecutionHelper._execute_primitive", "df[].fillna", "sys.stderr.write", "traceback.print_exc"], "store_vars_calls": {"colname": "col.format", "primitive.executables": "self.instantiate_primitive", "executable": "primitive.executables.get"}}, "_profile_matches_precondition": {"args": ["self", "preconditions", "profile"], "min_max_lineno": {"min_lineno": 274, "max_lineno": 280}, "calls": ["preconditions.keys", "profile.get"]}, "_execute_primitive": {"args": ["self", "primitive", "executable", "df", "df_lbl", "testing", "persistent"], "returns": [["retval", "executable"]], "min_max_lineno": {"min_lineno": 281, "max_lineno": 319}, "calls": ["args.append", "executable.fit.fit.produce", "isinstance", "executable.fit.fit.fit", "executable.fit.fit.produce", "executable.fit.fit.set_training_data", "isinstance", "executionhelper.ExecutionHelper.e.execute", "executable.fit.fit.transform", "executionhelper.ExecutionHelper.e.execute", "executable.fit.fit.fit_transform", "executionhelper.ExecutionHelper.e.execute", "executable.fit.fit.fit", "executable.fit.fit.set_training_data", "isinstance", "executable.fit.fit.set_training_data"], "store_vars_calls": {"retval": "executable.fit_transform", "executable": "executable.fit"}}, "cross_validation_score": {"args": ["self", "primitive", "X", "y", "cv"], "returns": [["yPredictions", "metric_values"]], "min_max_lineno": {"min_lineno": 320, "max_lineno": 395}, "calls": ["stopit.threading_timeoutable", "print", "sys.stdout.flush", "tempfile.TemporaryFile", "time.time", "sklearn.model_selection.KFold", "enumerate", "pandas.concat.sort_index", "builtins.range", "time.time", "primitive.pipeline.notifyChanges", "sklearn.model_selection.KFold.split", "executionhelper.ExecutionHelper.instantiate_primitive", "X.take", "y.take().values.ravel", "X.take", "y.take().values.ravel", "len", "executionhelper.ExecutionHelper._call_function", "int", "pandas.DataFrame", "primitive.pipeline.notifyChanges", "time.time", "executionhelper.ExecutionHelper.set_training_data", "executionhelper.ExecutionHelper.fit", "executionhelper.ExecutionHelper.produce", "pandas.concat", "traceback.print_exc", "y.take", "y.take", "executionhelper.ExecutionHelper.e.execute", "executionhelper.ExecutionHelper.e.execute", "executionhelper.ExecutionHelper.fit", "executionhelper.ExecutionHelper.predict"], "store_vars_calls": {"errorfile": "tempfile.TemporaryFile", "primitive.start_time": "time.time", "kf": "KFold", "yPredictions": "pd.concat", "primitive.end_time": "time.time", "executable": "self.instantiate_primitive", "trainX": "X.take", "trainY": "y.take().values.ravel", "testX": "X.take", "testY": "y.take().values.ravel", "metric_val": "self._call_function", "ypredDF": "pd.DataFrame", "ypred": "executable.predict", "prim": "self.e.execute"}}, "create_primitive_model": {"args": ["self", "primitive", "X", "y"], "min_max_lineno": {"min_lineno": 396, "max_lineno": 412}, "calls": ["executionhelper.ExecutionHelper.instantiate_primitive", "executionhelper.ExecutionHelper.set_training_data", "executionhelper.ExecutionHelper.fit", "executionhelper.ExecutionHelper.e.execute", "executionhelper.ExecutionHelper.fit", "y.values.ravel", "y.values.ravel"], "store_vars_calls": {"executable": "self.e.execute"}}, "_as_tensor": {"args": ["self", "image_list"], "returns": [["result"]], "min_max_lineno": {"min_lineno": 413, "max_lineno": 420}, "calls": ["numpy.empty", "builtins.range", "len", "image.img_to_array", "len", "image.img_to_array"], "store_vars_calls": {"result": "np.empty"}}, "featurise": {"args": ["self", "primitive", "df"], "min_max_lineno": {"min_lineno": 421, "max_lineno": 513}, "calls": ["stopit.threading_timeoutable", "time.time", "executionhelper.ExecutionHelper.raw_data_columns", "time.time", "primitive.pipeline.notifyChanges", "pandas.DataFrame", "col.format", "executionhelper.ExecutionHelper.instantiate_primitive", "executionhelper.ExecutionHelper.fit_transform", "isinstance", "pandas.DataFrame", "ncols.remove", "pandas.concat", "executionhelper.ExecutionHelper.fit", "executionhelper.ExecutionHelper.transform.todense", "executionhelper.ExecutionHelper.instantiate_primitive", "executionhelper.ExecutionHelper._as_tensor", "executionhelper.ExecutionHelper.transform", "pandas.DataFrame", "ncols.remove", "pandas.concat", "str", "builtins.range", "pandas.concat.iterrows", "col.format", "str", "builtins.range", "int", "executionhelper.ExecutionHelper.instantiate_primitive", "allfeatures.keys", "col.format", "executionhelper.ExecutionHelper.produce", "builtins.range", "pandas.concat.set_value", "len", "allfeatures.get", "allfeatures.get.append", "pandas.concat.get", "fcols.append", "pandas.concat.set_value", "numpy.average", "str", "col.format"], "store_vars_calls": {"primitive.start_time": "time.time", "featurecols": "self.raw_data_columns", "primitive.end_time": "time.time", "executable": "self.instantiate_primitive", "nvals": "executable.transform", "newdf": "pd.DataFrame", "df": "pd.concat", "image_tensor": "self._as_tensor", "featurevals": "allfeatures.get"}}, "test_featurise": {"args": ["self", "primitive", "df"], "min_max_lineno": {"min_lineno": 514, "max_lineno": 595}, "calls": ["stopit.threading_timeoutable", "executionhelper.ExecutionHelper.raw_data_columns", "pandas.DataFrame", "col.format", "executionhelper.ExecutionHelper.instantiate_primitive", "isinstance", "pandas.DataFrame", "ncols.remove", "pandas.concat", "executionhelper.ExecutionHelper.transform", "executionhelper.ExecutionHelper.fit_transform", "executionhelper.ExecutionHelper.transform.todense", "executionhelper.ExecutionHelper._as_tensor", "executionhelper.ExecutionHelper.transform", "pandas.DataFrame", "ncols.remove", "pandas.concat", "str", "builtins.range", "pandas.concat.iterrows", "col.format", "str", "builtins.range", "executionhelper.ExecutionHelper.instantiate_primitive", "allfeatures.keys", "col.format", "executionhelper.ExecutionHelper.produce", "builtins.range", "pandas.concat.set_value", "len", "allfeatures.get", "allfeatures.get.append", "pandas.concat.get", "fcols.append", "pandas.concat.set_value", "numpy.average", "str", "col.format"], "store_vars_calls": {"featurecols": "self.raw_data_columns", "executable": "self.instantiate_primitive", "newdf": "pd.DataFrame", "df": "pd.concat", "nvals": "executable.transform", "image_tensor": "self._as_tensor", "featurevals": "allfeatures.get"}}, "raw_data_columns": {"args": ["self", "columns"], "returns": [["cols"]], "min_max_lineno": {"min_lineno": 596, "max_lineno": 603}, "calls": ["cols.append"]}, "_process_args": {"args": ["self", "args", "task_type", "metrics"], "returns": [["result_args"]], "min_max_lineno": {"min_lineno": 604, "max_lineno": 616}, "calls": ["isinstance", "arg.startswith", "result_args.append", "executionhelper.ExecutionHelper._get_arg_value", "isinstance", "arg.startswith", "result_args.append", "result_args.append", "executionhelper.ExecutionHelper._get_arg_value"]}, "_get_arg_value": {"args": ["self", "arg_specification", "task_type", "metrics"], "returns": [["arg_specification"]], "min_max_lineno": {"min_lineno": 617, "max_lineno": 638}, "calls": ["arg_specification.startswith", "sklearn.metrics.make_scorer", "sklearn.metrics.make_scorer", "Exception", "sklearn.linear_model.LogisticRegression", "sklearn.linear_model.LinearRegression", "Exception"]}, "_process_kwargs": {"args": ["self", "kwargs", "task_type", "metrics"], "returns": [["result_kwargs"]], "min_max_lineno": {"min_lineno": 639, "max_lineno": 647}, "calls": ["kwargs.items", "isinstance", "arg.startswith", "executionhelper.ExecutionHelper._get_arg_value"]}, "create_pipeline_executable": {"args": ["self", "pipeline", "config"], "min_max_lineno": {"min_lineno": 648, "max_lineno": 806}, "calls": ["os.path.abspath", "os.path.abspath", "os.path.abspath", "os.path.abspath", "os.path.dirname", "os.path.dirname", "os.path.dirname", "os.path.dirname", "statements.append", "statements.append", "statements.append", "statements.append", "statements.append", "statements.append", "statements.append", "statements.append", "statements.append", "statements.append", "statements.append", "statements.append", "statements.append", "statements.append", "statements.append", "statements.append", "statements.append", "statements.append", "statements.append", "statements.append", "statements.append", "statements.append", "statements.append", "statements.append", "statements.append", "statements.append", "statements.append", "statements.append", "statements.append", "statements.append", "statements.append", "statements.append", "statements.append", "statements.append", "statements.append", "statements.append", "statements.append", "statements.append", "statements.append", "statements.append", "os.chmod", "os.chmod", "os.chmod", "os.chmod", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "os.path.dirname", "os.path.dirname", "os.path.dirname", "os.path.dirname", "open", "exfile.write", "set", "os.path.dirname", "os.path.dirname", "os.path.dirname", "os.path.dirname", "str", "config.get", "config.get", "config.get", "str", "statements.append", "statements.append", "statements.append", "sklearn.externals.joblib.dump", "statements.append", "statements.append", "statements.append", "statements.append", "exfile.write", "exfile.write", "os.path.abspath", "os.path.abspath", "os.path.abspath", "os.path.abspath", "sys.stderr.write", "primitive.cls.rsplit", "imports.append", "statements.append", "statements.append", "statements.append", "statements.append", "statements.append", "statements.append", "primitive.executables.keys", "statements.append"], "store_vars_calls": {"results_dir": "os.path.abspath", "rdir": "os.path.dirname"}}, "_call_function": {"args": ["self", "scoring_function"], "min_max_lineno": {"min_lineno": 807, "max_lineno": 816}, "calls": ["inspect.getmodule", "importlib.import_module", "scoring_function", "sys.stderr.write", "traceback.print_exc"], "store_vars_calls": {"mod": "inspect.getmodule", "module": "importlib.import_module"}}}}}, "is_test": false}