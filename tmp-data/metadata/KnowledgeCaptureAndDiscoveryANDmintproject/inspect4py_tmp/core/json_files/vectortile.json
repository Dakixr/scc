{"file": {"path": "/Users/dakixr/Desktop/github/scc/tmp-data/metadata/KnowledgeCaptureAndDiscoveryANDmintproject/MINT-GeoViz/src/core/vectortile.py", "fileNameBase": "vectortile", "extension": "py"}, "dependencies": [{"import": "math", "type": "external"}, {"import": "requests", "type": "external"}, {"import": "json", "type": "external"}, {"from_module": "pathlib", "import": "Path", "type": "external"}, {"from_module": "itertools", "import": "cycle", "type": "external"}, {"import": "pandas", "alias": "pd", "type": "external"}, {"import": "geopandas", "alias": "gpd", "type": "external"}, {"import": "holoviews", "alias": "hv", "type": "external"}, {"import": "geoviews", "alias": "gv", "type": "external"}], "classes": {"VectorTile": {"doc": {"long_description": "Also refer to\nhttps://svn.openstreetmap.org/applications/routing/pyroute/tilenames.py", "short_description": "Assumes tiles are 256x256 pixel", "full": "Assumes tiles are 256x256 pixel\nAlso refer to\nhttps://svn.openstreetmap.org/applications/routing/pyroute/tilenames.py"}, "min_max_lineno": {"min_lineno": 21, "max_lineno": 184}, "methods": {"deg2xy": {"doc": {"long_description": "- src: https://is.gd/mjvdR7", "short_description": "Lat,Lon to tile numbers"}, "args": ["lat_deg", "lon_deg", "zoom"], "returns": [["xtile", "ytile"]], "min_max_lineno": {"min_lineno": 40, "max_lineno": 51}, "calls": ["math.radians", "int", "int", "math.log", "math.tan", "math.cos"], "store_vars_calls": {"lat_rad": "math.radians", "xtile": "int", "ytile": "int"}}, "xyz2deg": {"doc": {"long_description": "This returns the NW-corner of the square. \nUse the function with xtile+1 and/or ytile+1 to get the other corners. \nWith xtile+0.5 & ytile+0.5 it will return the center of the tile.\n- src: https://is.gd/mjvdR7", "short_description": "Tile numbers to lat/lon in degree"}, "args": ["xtile", "ytile", "zoom"], "returns": [["lat_deg", "lon_deg"]], "min_max_lineno": {"min_lineno": 52, "max_lineno": 66}, "calls": ["math.atan", "math.degrees", "math.sinh"], "store_vars_calls": {"lat_rad": "math.atan", "lat_deg": "math.degrees"}}, "__init__": {"doc": {"long_description": "- xtile, ytile, z (int)\n- size (int) : currently only supports 256 because of the latlon->tile\n    conversion calculation is constrained to that size\n- fformat (str): currently it must be json because I don't know\n    how to read mvt or topojson formats to geopandas.DataFrame", "short_description": "Args:"}, "args": ["self", "xtile", "ytile", "z", "size", "layer", "fformat"], "min_max_lineno": {"min_lineno": 67, "max_lineno": 84}, "calls": ["vectortile.VectorTile.xyz2deg"]}, "from_xyz": {"args": ["cls", "xtile", "ytile", "z"], "min_max_lineno": {"min_lineno": 85, "max_lineno": 88}, "calls": ["cls"]}, "from_latlon": {"args": ["cls", "lat", "lon", "z"], "min_max_lineno": {"min_lineno": 89, "max_lineno": 93}, "calls": ["cls.deg2xy", "cls"]}, "info": {"args": ["self"], "min_max_lineno": {"min_lineno": 94, "max_lineno": 99}, "calls": ["print", "print", "print", "print"]}, "to_gdf": {"doc": {"long_description": "request the vector tile from nextzen vector tile endpoint\n\nIf the tile was requested before and is saved, \nit will check the current python session's cache, then the local\ndisk to read the tile from memory.\n\nIf not cached, it will send a request to the vector tile server,\nsave the tile data both in python memory and local disk.\n\nReturns geopandas.DataFrame that contains some meta data like osm_id \nand most importantly) geometries", "short_description": "Given xtile, ytile and z(oom level), "}, "args": ["self"], "returns": [["gdf"]], "min_max_lineno": {"min_lineno": 100, "max_lineno": 158}, "calls": ["VECTILE_CACHE.get", "requests.get", "requests.get.json", "print", "fpath.exists", "VECTILE_CACHE[].get", "ValueError", "fdir.exists", "fdir.mkdir", "print", "open", "json.dump", "fpath.exists", "time.sleep", "geopandas.read_file", "IOError", "VECTILE_CACHE[].get", "geopandas.GeoDataFrame.read_file", "VECTILE_CACHE[].get", "pathlib.Path"], "store_vars_calls": {"r": "requests.get", "data": "r.json", "gdf": "gpd.read_file"}}, "to_ndoverlay": {"doc": {"long_description": "and returns a NdOverlay of Shape Elements with a numeric index\n\nkwargs:    \n- colors (iterable of color values, or str indicating a colormap definted in holoviews)\n    : Used to generate a itertools.cycle to cycle through color values. \n    : Default is 'Category20'\n    eg: color=bokeh.palettes.Category20_10\n\nFor hv.Cycle('colomap_name')'s usage, refer to: \nhttp://holoviews.org/user_guide/Style_Mapping.html", "short_description": "Fetches the vector tile (from python cache or from the local disk or from the web service <- search order)"}, "args": ["self", "colors", "labels"], "returns": [["ndoverlay"]], "min_max_lineno": {"min_lineno": 159, "max_lineno": 184}, "calls": ["vectortile.VectorTile.to_gdf", "holoviews.NdOverlay", "geoviews.Shape().opts", "enumerate", "geoviews.Shape", "holoviews.Cycle"], "store_vars_calls": {"gdf": "self.to_gdf", "ndoverlay": "hv.NdOverlay"}}}}}, "is_test": false}